"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6714],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=o.createContext({}),i=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=i(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=i(t),p=s,h=d["".concat(c,".").concat(p)]||d[p]||u[p]||r;return t?o.createElement(h,a(a({ref:n},m),{},{components:t})):o.createElement(h,a({ref:n},m))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:s,a[1]=l;for(var i=2;i<r;i++)a[i]=t[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var o=t(7462),s=(t(7294),t(3905));const r={title:"Relationship Query Mongodb"},a=void 0,l={unversionedId:"examples/nodejs/mongodbjoin",id:"examples/nodejs/mongodbjoin",title:"Relationship Query Mongodb",description:"Example about relationship one to many in mongodb with Node.js",source:"@site/docs/examples/nodejs/mongodbjoin.md",sourceDirName:"examples/nodejs",slug:"/examples/nodejs/mongodbjoin",permalink:"/docs/examples/nodejs/mongodbjoin",draft:!1,editUrl:"https://github.com/recallwei/wiki/tree/main/website/docs/examples/nodejs/mongodbjoin.md",tags:[],version:"current",frontMatter:{title:"Relationship Query Mongodb"},sidebar:"examples",previous:{title:"Assume Role Example",permalink:"/docs/examples/devops/assumerole"},next:{title:"Sign and verify message on EVM",permalink:"/docs/examples/nodejs/signmessage"}},c={},i=[],m={toc:i},d="wrapper";function u(e){let{components:n,...t}=e;return(0,s.kt)(d,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Example about relationship one to many in mongodb with Node.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const mongoose = require("mongoose");\n\n// Define the student schema\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  class: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: "Class",\n  },\n});\n\n// Define the class schema\nconst classSchema = new mongoose.Schema({\n  name: String,\n  students: [\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: "Student",\n    },\n  ],\n});\n\n// Create the models\nconst Student = mongoose.model("Student", studentSchema);\nconst Class = mongoose.model("Class", classSchema);\n\n// Create a new class\nconst mathClass = new Class({ name: "Math 101" });\n\n// Create a new student and associate it with the class\nconst john = new Student({ name: "John", class: mathClass });\n\n// Save the class and student to the database\nmathClass\n  .save()\n  .then(() => john.save())\n  .then(() => console.log("Student and class saved to the database"))\n  .catch((error) => console.log(error));\n\nStudent.findOne({ name: "John" })\n  .populate("class")\n  .exec(function (err, student) {\n    if (err) return handleError(err);\n    console.log("The class is %s", student.class.name);\n  });\n\nClass.findOne({ name: "Math 101" })\n  .populate("students")\n  .exec(function (err, mathClass) {\n    if (err) return handleError(err);\n    console.log("The students in the class are:");\n    mathClass.students.forEach((student) => {\n      console.log(student.name);\n    });\n  });\n\n// Aggregate\nClass.aggregate([\n  {\n    $match: { name: "Math 101" },\n  },\n  {\n    $lookup: {\n      from: "students",\n      localField: "_id",\n      foreignField: "class",\n      as: "students",\n    },\n  },\n]).then((mathClass) => {\n  console.log("The students in the class are:");\n  mathClass[0].students.forEach((student) => {\n    console.log(student.name);\n  });\n});\n')))}u.isMDXComponent=!0}}]);