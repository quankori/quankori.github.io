"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[375],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>d});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},l=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=s(r),u=a,d=m["".concat(c,".").concat(u)]||m[u]||g[u]||i;return r?t.createElement(d,o(o({ref:n},l),{},{components:r})):t.createElement(d,o({ref:n},l))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[m]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6142:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var t=r(7462),a=(r(7294),r(3905));const i={title:"Spring Boots"},o=void 0,p={unversionedId:"cheatsheet/programming/spring",id:"cheatsheet/programming/spring",title:"Spring Boots",description:"Overview",source:"@site/docs/cheatsheet/programming/spring.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/spring",permalink:"/docs/cheatsheet/programming/spring",draft:!1,tags:[],version:"current",frontMatter:{title:"Spring Boots"},sidebar:"cheatsheet",previous:{title:"Java",permalink:"/docs/cheatsheet/programming/java"},next:{title:"Computer Science",permalink:"/docs/cheatsheet/fundamental/computer-science"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Key Differences",id:"key-differences",level:2}],l={toc:s},m="wrapper";function g(e){let{components:n,...r}=e;return(0,a.kt)(m,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Spring Boot")," is a Java-based framework built on the Spring ecosystem, designed to simplify the development of scalable, production-ready applications with minimal configuration. It leverages ",(0,a.kt)("strong",{parentName:"p"},"Inversion of Control (IoC)"),", ",(0,a.kt)("strong",{parentName:"p"},"auto-configuration"),", and a rich set of tools to support enterprise-grade solutions, REST APIs, microservices, and reactive systems."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Spring framework"),": Provides foundational IoC, DI, and AOP."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Auto-configuration"),": Streamlines setup with starters and embedded servers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Language features"),": Integrates Java/Kotlin with annotations and reactive support.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory management"),": Tunes JVM memory and garbage collection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Concurrency"),": Manages threads and reactive streams."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Caching"),": Enhances speed with Spring Cache."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Database access"),": Optimizes data operations with Hibernate and pooling.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Scales with Spring Cloud and microservices."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Vertical scaling"),": Boosts single-instance performance via JVM tuning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Distributed systems"),": Integrates messaging and caching for distribution.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ecosystem & tools"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Build tools"),": Uses Maven, Gradle, or CLI for builds."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Libraries/frameworks"),": Offers MVC, Data, and Security modules."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing"),": Ensures quality with JUnit and Spring Test."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Debugging & monitoring"),": Monitors with Actuator and VisualVM."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Deployment"),": Supports JAR/WAR, Docker, and cloud platforms.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Singleton"),": Manages bean scopes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Factory"),": Creates beans dynamically."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Proxy"),": Implements AOP proxies."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Observer"),": Handles events with listeners."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Decorator"),": Enhances with filters.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Enterprise REST APIs"),": Builds robust HTTP services."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Microservices"),": Implements distributed architectures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Batch processing"),": Processes data in batches."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Reactive applications"),": Handles asynchronous workloads.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree")," (Java Example):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/main/java/com/example/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 CoreService.java\n\u251c\u2500\u2500 perf/\n\u2502   \u251c\u2500\u2500 CacheService.java\n\u2502   \u251c\u2500\u2500 ConcurrencyService.java\n\u251c\u2500\u2500 scale/\n\u2502   \u2514\u2500\u2500 MicroService.java\n\u251c\u2500\u2500 patterns/\n\u2502   \u2514\u2500\u2500 SingletonService.java\n\u2514\u2500\u2500 Application.java\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bash Scripts & Commands"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Redis for Caching (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nredis-server --port 6379 --dir data/redis --daemonize yes\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Build and Run with Docker (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\nmvn clean package\necho "FROM openjdk:17\nCOPY target/myapp.jar /app.jar\nCMD [\\"java\\", \\"-jar\\", \\"/app.jar\\"]" > Dockerfile\ndocker build -t springboot-app .\ndocker run -p 8080:8080 springboot-app\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Spring Boot Commands"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Run with Maven\nmvn spring-boot:run\n\n# Build JAR\nmvn clean package\n\n# Run with JVM tuning\njava -Xms512m -Xmx1024m -jar target/myapp.jar\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Spring Boot Example")," (Java):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/CoreService.java (**Spring framework**)\npackage com.example.core;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CoreService {\n    public String processData(int id) {\n        return "Processed " + id; // **Dependency injection** via @Service\n    }\n}\n\n// src/main/java/com/example/perf/CacheService.java (**Caching**)\npackage com.example.perf;\n\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CacheService {\n    @Cacheable("dataCache") // **Spring Cache**\n    public String getCachedData(String key) {\n        return "Cached " + key; // Simulated with Redis in practice\n    }\n}\n\n// src/main/java/com/example/perf/ConcurrencyService.java (**Concurrency**)\npackage com.example.perf;\n\nimport org.springframework.stereotype.Service;\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class ConcurrencyService {\n    public CompletableFuture<String> asyncTask(int id) {\n        return CompletableFuture.supplyAsync(() -> { // **CompletableFuture**\n            try {\n                Thread.sleep(1000); // Simulate work\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return "Task " + id;\n        });\n    }\n}\n\n// src/main/java/com/example/scale/MicroService.java (**Microservices**)\npackage com.example.scale;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MicroService {\n    @Autowired\n    private KafkaTemplate<String, String> kafkaTemplate; // **Messaging**\n\n    public void sendEvent(String topic, String data) {\n        kafkaTemplate.send(topic, data);\n        System.out.println("Event sent to " + topic + ": " + data);\n    }\n}\n\n// src/main/java/com/example/patterns/SingletonService.java (**Singleton**)\npackage com.example.patterns;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Scope("singleton") // **Singleton**\npublic class SingletonService {\n    public String getData() {\n        return "Singleton Data";\n    }\n}\n\n// src/main/java/com/example/Application.java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\n\n@SpringBootApplication\n@EnableCaching // **Caching**\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public KafkaTemplate<String, String> kafkaTemplate(ProducerFactory<String, String> producerFactory) {\n        return new KafkaTemplate<>(producerFactory); // **Kafka integration**\n    }\n}\n\n// src/main/java/com/example/MainController.java (Example Usage)\npackage com.example;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.example.core.CoreService;\nimport com.example.perf.CacheService;\nimport com.example.perf.ConcurrencyService;\nimport com.example.scale.MicroService;\nimport com.example.patterns.SingletonService;\n\n@RestController\npublic class MainController {\n    @Autowired\n    private CoreService coreService;\n    @Autowired\n    private CacheService cacheService;\n    @Autowired\n    private ConcurrencyService concurrencyService;\n    @Autowired\n    private MicroService microService;\n    @Autowired\n    private SingletonService singletonService;\n\n    @GetMapping("/run")\n    public String run() throws Exception {\n        // **Core architecture**\n        String coreResult = coreService.processData(1);\n\n        // **Caching**\n        String cached = cacheService.getCachedData("key");\n\n        // **Concurrency**\n        String asyncResult = concurrencyService.asyncTask(2).get();\n\n        // **Microservices**\n        microService.sendEvent("test_topic", "Event Data");\n\n        // **Singleton**\n        String singletonData = singletonService.getData();\n\n        return String.format("Core: %s, Cached: %s, Async: %s, Singleton: %s", coreResult, cached, asyncResult, singletonData);\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Notes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install dependencies via Maven:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- pom.xml --\x3e\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n  </dependency>\n</dependencies>\n"))),(0,a.kt)("li",{parentName:"ul"},"Requires Redis (",(0,a.kt)("inlineCode",{parentName:"li"},"localhost:6379"),") for caching and Kafka (",(0,a.kt)("inlineCode",{parentName:"li"},"localhost:9092"),") for messaging."),(0,a.kt)("li",{parentName:"ul"},"Bash scripts assume Maven and Docker installed; adjust paths as needed."),(0,a.kt)("li",{parentName:"ul"},"Run with ",(0,a.kt)("inlineCode",{parentName:"li"},"mvn spring-boot:run"),".")),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Architecture"),": Auto-configured with IoC and embedded servers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance Optimization"),": JVM-based with caching and concurrency."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling"),": Horizontal via Spring Cloud, distributed with messaging."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ecosystem & Tools"),": Rich Java ecosystem with robust tools."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Design Patterns"),": Leverages IoC, AOP, and singleton scopes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use Cases"),": Enterprise APIs, microservices, and reactive systems.")))}g.isMDXComponent=!0}}]);