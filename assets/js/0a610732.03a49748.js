"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,k=c["".concat(s,".").concat(g)]||c[g]||u[g]||i;return n?r.createElement(k,l(l({ref:t},m),{},{components:n})):r.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"Golang"},l=void 0,o={unversionedId:"cheatsheet/programming/golang",id:"cheatsheet/programming/golang",title:"Golang",description:"Golang",source:"@site/docs/cheatsheet/programming/golang.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/golang",permalink:"/docs/cheatsheet/programming/golang",draft:!1,tags:[],version:"current",frontMatter:{title:"Golang"},sidebar:"cheatsheet",previous:{title:"Nest.js",permalink:"/docs/cheatsheet/programming/nestjs"},next:{title:"RxJS",permalink:"/docs/cheatsheet/programming/rxjs"}},s={},p=[{value:"Golang",id:"golang",level:2},{value:"Key Differences",id:"key-differences",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"golang"},"Golang"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),": Golang (Go) is a statically typed, compiled language designed for simplicity, concurrency, and performance, featuring a lightweight runtime and single-binary output, ideal for scalable, high-performance systems."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Concurrency model"),": Built-in support for concurrent execution.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Goroutines"),": Lightweight threads managed by Go runtime."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Channels"),": Communication pipes between goroutines."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Select statement"),": Multiplexes channel operations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Runtime"),": Efficient execution environment.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Garbage collector"),": Low-latency memory management."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scheduler"),": Manages goroutines with GOMAXPROCS."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Lightweight threads"),": Underpins goroutines."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Language features"),": Core syntax and design.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Static typing"),": Compile-time type checking."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interfaces"),": Implicit implementation for flexibility."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Structs & methods"),": Object-like structures with behavior."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Error handling"),": Explicit error returns.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory management"),": Optimizes resource usage.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Stack vs heap allocation"),": Determines memory location."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Escape analysis"),": Optimizes allocation decisions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pprof profiling"),": Analyzes performance metrics."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Concurrency patterns"),": Leverages goroutines.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Worker pools"),": Distributes tasks across workers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Fan-out/fan-in"),": Parallelizes and aggregates tasks."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pipeline"),": Chains data processing stages."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Benchmarking"),": Measures performance.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Go testing framework"),": Built-in benchmarking tools."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pprof & trace"),": Detailed profiling and tracing."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compilation"),": Produces efficient binaries.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Single binary output"),": Simplifies deployment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cross-compilation"),": Builds for multiple platforms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Optimized machine code"),": High-performance execution.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Adds more instances.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Load balancing"),": Uses reverse proxies (e.g., Nginx)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Distributed systems"),": Scales across nodes."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Vertical scaling"),": Enhances single instance.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Optimize goroutine usage"),": Reduces overhead."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory tuning"),": Adjusts memory settings."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Fault tolerance"),": Ensures reliability.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Context"),": Manages cancellation and timeouts."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Circuit breaker"),": Prevents cascading failures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Retry logic"),": Handles transient errors.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ecosystem & tools"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Package management"),": Manages dependencies.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Go modules"),": Standard dependency system."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Vendoring"),": Locks dependency versions."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Frameworks"),": Simplifies web development.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Gin"),": High-performance HTTP framework."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Echo"),": Lightweight web framework."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Fiber"),": Fastify-inspired framework."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing"),": Ensures code quality.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Built-in testing"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"go test")," for unit tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testify"),": Adds assertions and mocks."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ginkgo"),": BDD-style testing framework."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Debugging & profiling"),": Analyzes execution.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Delve"),": Advanced debugger."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pprof"),": CPU/memory profiling."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Go trace"),": Execution tracing."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Deployment"),": Runs applications in production.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Docker"),": Containerizes apps."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Kubernetes"),": Orchestrates containers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Static binary deployment"),": Deploys single binaries.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dependency injection"),": Manually passes dependencies."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Factory pattern"),": Creates objects dynamically."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Singleton"),": Ensures single instance with ",(0,a.kt)("inlineCode",{parentName:"li"},"sync.Once"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Middleware pattern"),": Chains request handlers.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"High-performance APIs"),": Fast HTTP servers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Distributed systems"),": gRPC-based services."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cloud-native apps"),": Kubernetes-compatible apps."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"CLI tools"),": Efficient command-line utilities.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 concurrency.go\n\u251c\u2500\u2500 perf/\n\u2502   \u251c\u2500\u2500 memory.go\n\u2502   \u251c\u2500\u2500 concurrency.go\n\u251c\u2500\u2500 scale/\n\u2502   \u2514\u2500\u2500 fault.go\n\u251c\u2500\u2500 tools/\n\u2502   \u2514\u2500\u2500 test.go\n\u251c\u2500\u2500 patterns/\n\u2502   \u2514\u2500\u2500 middleware.go\n\u2514\u2500\u2500 main.go\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bash Scripts & Go Commands"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Nginx for Load Balancing (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\nsudo apt-get install nginx\necho "upstream backend {\n  server 127.0.0.1:8080;\n  server 127.0.0.1:8081;\n}\nserver {\n  listen 80;\n  location / {\n    proxy_pass http://backend;\n  }\n}" > /etc/nginx/sites-available/myapp\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Cross-Compilation (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nGOOS=linux GOARCH=amd64 go build -o myapp-linux main.go\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Go Commands"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Run with profiling\ngo run -pprof main.go\n\n# Test with benchmarking\ngo test -bench=.\n\n# Build single binary\ngo build -o myapp main.go\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Go Example")," (Adapted to NestJS-like Structure):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// src/core/concurrency.go (**Concurrency model**)\npackage core\n\nimport (\n    "fmt"\n    "time"\n)\n\ntype EventService struct{}\n\nfunc (s *EventService) TriggerEvent(event string, data int) {\n    go func() { // **Goroutines**\n        fmt.Println("Event triggered:", event, data)\n    }()\n}\n\nfunc (s *EventService) Listen(event string, ch chan int) {\n    select { // **Select statement**\n    case data := <-ch: // **Channels**\n        fmt.Println("Received:", event, data)\n    case <-time.After(1 * time.Second):\n        fmt.Println("Timeout")\n    }\n}\n\n// src/perf/memory.go (**Memory management**)\npackage perf\n\nimport "runtime"\n\ntype MemoryService struct{}\n\nfunc (s *MemoryService) OptimizeMemory() {\n    runtime.GC() // **Garbage collector**\n    // **Stack vs Heap**: Local vars on stack, pointers on heap\n}\n\n// src/perf/concurrency.go (**Concurrency patterns**)\npackage perf\n\nimport (\n    "fmt"\n    "sync"\n)\n\ntype ConcurrencyService struct{}\n\nfunc (s *ConcurrencyService) WorkerPool(tasks []int) {\n    var wg sync.WaitGroup\n    for _, task := range tasks {\n        wg.Add(1)\n        go func(t int) { // **Worker pools**\n            defer wg.Done()\n            fmt.Println("Task:", t)\n        }(task)\n    }\n    wg.Wait()\n}\n\nfunc (s *ConcurrencyService) FanOutFanIn(tasks []int) int {\n    var wg sync.WaitGroup\n    results := make(chan int, len(tasks))\n\n    // **Fan-out**\n    for _, task := range tasks {\n        wg.Add(1)\n        go func(t int) {\n            defer wg.Done()\n            results <- t * 2\n        }(task)\n    }\n\n    go func() {\n        wg.Wait()\n        close(results)\n    }()\n\n    // **Fan-in**\n    sum := 0\n    for result := range results {\n        sum += result\n    }\n    return sum\n}\n\n// src/scale/fault.go (**Fault tolerance**)\npackage scale\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\ntype FaultService struct{}\n\nfunc (s *FaultService) WithContext() {\n    ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second) // **Context**\n    defer cancel()\n\n    select {\n    case <-time.After(2 * time.Second):\n        fmt.Println("Task completed")\n    case <-ctx.Done():\n        fmt.Println("Task cancelled:", ctx.Err())\n    }\n}\n\n// src/patterns/middleware.go (**Middleware pattern**)\npackage patterns\n\nimport (\n    "fmt"\n    "net/http"\n)\n\ntype MiddlewareService struct{}\n\nfunc (s *MiddlewareService) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        fmt.Println("Middleware executed")\n        next.ServeHTTP(w, r)\n    })\n}\n\n// src/main.go\npackage main\n\nimport (\n    "fmt"\n    "net/http"\n    "src/core"\n    "src/patterns"\n    "src/perf"\n    "src/scale"\n)\n\nfunc main() {\n    eventService := &core.EventService{}\n    concurrencyService := &perf.ConcurrencyService{}\n    faultService := &scale.FaultService{}\n    middlewareService := &patterns.MiddlewareService{}\n\n    // **Event-driven model**\n    ch := make(chan int)\n    go eventService.Listen("test", ch)\n    eventService.TriggerEvent("test", 1)\n    ch <- 1\n\n    // **Concurrency patterns**\n    concurrencyService.WorkerPool([]int{1, 2, 3})\n    fmt.Println("Fan-Out/Fan-In result:", concurrencyService.FanOutFanIn([]int{1, 2, 3}))\n\n    // **Fault tolerance**\n    faultService.WithContext()\n\n    // **Middleware pattern**\n    http.Handle("/", middlewareService.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintln(w, "Hello, Go!")\n    })))\n    http.ListenAndServe(":8080", nil)\n}\n')),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Architecture"),": Concurrency-driven with goroutines and efficient runtime."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance Optimization"),": Memory and concurrency tuned for speed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling"),": Horizontal with load balancing, fault-tolerant design."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ecosystem & Tools"),": Lean tools for testing, profiling, and deployment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Design Patterns"),": Simple, effective patterns like middleware."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use Cases"),": High-performance, distributed, and cloud-native apps.")))}u.isMDXComponent=!0}}]);