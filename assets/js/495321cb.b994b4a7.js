"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[979],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>y});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(t),d=s,y=l["".concat(c,".").concat(d)]||l[d]||m[d]||o;return t?n.createElement(y,a(a({ref:r},u),{},{components:t})):n.createElement(y,a({ref:r},u))}));function y(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[l]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2122:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=t(7462),s=(t(7294),t(3905));const o={title:"Domain-Centric Architectures"},a=void 0,i={unversionedId:"cheatsheet/system-design/domain-centric",id:"cheatsheet/system-design/domain-centric",title:"Domain-Centric Architectures",description:"Onion Architecture",source:"@site/docs/cheatsheet/system-design/domain-centric.md",sourceDirName:"cheatsheet/system-design",slug:"/cheatsheet/system-design/domain-centric",permalink:"/docs/cheatsheet/system-design/domain-centric",draft:!1,tags:[],version:"current",frontMatter:{title:"Domain-Centric Architectures"},sidebar:"cheatsheet",previous:{title:"Monolithic Architecture",permalink:"/docs/cheatsheet/system-design/monolithic"},next:{title:"Event-Driven Architecture",permalink:"/docs/cheatsheet/system-design/event-driven"}},c={},p=[{value:"Onion Architecture",id:"onion-architecture",level:2},{value:"Clean Architecture",id:"clean-architecture",level:2},{value:"EBI Architecture (Entity-Boundary-Interactor)",id:"ebi-architecture-entity-boundary-interactor",level:2},{value:"Hexagonal Architecture",id:"hexagonal-architecture",level:2},{value:"Key Differences",id:"key-differences",level:2}],u={toc:p},l="wrapper";function m(e){let{components:r,...t}=e;return(0,s.kt)(l,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"onion-architecture"},"Onion Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Onion Architecture organizes an application into concentric layers, with the core domain at the center. Dependencies flow outward, ensuring the business logic remains independent of external systems like databases or UI frameworks."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Core domain"),": Contains entities and business rules, free from external dependencies."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Application layer"),": Manages use cases and coordinates interactions between the core domain and external layers."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Infrastructure layer"),": Handles external concerns like database access or APIs, depending on inner layers."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 domain/\n\u2502   \u2514\u2500\u2500 user.entity.ts\n\u251c\u2500\u2500 application/\n\u2502   \u2514\u2500\u2500 user.service.ts\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 user.repository.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/domain/user.entity.ts (**Core domain**)\nexport class User {\n  constructor(public id: number, public name: string) {}\n}\n\n// src/application/user.service.ts (**Application layer**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../domain/user.entity";\nimport { UserRepository } from "../infrastructure/user.repository";\n\n@Injectable()\nexport class UserService {\n  constructor(private userRepo: UserRepository) {}\n\n  async getUser(id: number): Promise<User> {\n    return this.userRepo.findById(id);\n  }\n}\n\n// src/infrastructure/user.repository.ts (**Infrastructure layer**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../domain/user.entity";\n\n@Injectable()\nexport class UserRepository {\n  private users = [new User(1, "John")];\n\n  async findById(id: number): Promise<User> {\n    return this.users.find((u) => u.id === id);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService } from "./application/user.service";\nimport { UserRepository } from "./infrastructure/user.repository";\n\n@Module({\n  providers: [UserService, UserRepository],\n})\nexport class AppModule {}\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"clean-architecture"},"Clean Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Clean Architecture structures an app into layers with entities at the core, surrounded by use cases, interface adapters, and frameworks/drivers. It enforces independence of business logic from external tools."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Entities"),": Core business objects encapsulating rules and data."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Use cases"),": Application logic defining how entities are used."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Interface adapters"),": Convert data between use cases and external systems."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Frameworks/drivers"),": External technologies (e.g., DB, UI) interacting through adapters."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 entities/\n\u2502   \u2514\u2500\u2500 user.entity.ts\n\u251c\u2500\u2500 usecases/\n\u2502   \u2514\u2500\u2500 user.usecase.ts\n\u251c\u2500\u2500 adapters/\n\u2502   \u2514\u2500\u2500 user.gateway.ts\n\u251c\u2500\u2500 frameworks/\n\u2502   \u2514\u2500\u2500 user.repository.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/entities/user.entity.ts (**Entities**)\nexport class User {\n  constructor(public id: number, public name: string) {}\n}\n\n// src/usecases/user.usecase.ts (**Use cases**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../entities/user.entity";\nimport { UserGateway } from "../adapters/user.gateway";\n\n@Injectable()\nexport class UserUseCase {\n  constructor(private gateway: UserGateway) {}\n\n  async getUser(id: number): Promise<User> {\n    return this.gateway.findById(id);\n  }\n}\n\n// src/adapters/user.gateway.ts (**Interface adapters**)\nexport interface UserGateway {\n  findById(id: number): Promise<User>;\n}\n\n// src/frameworks/user.repository.ts (**Frameworks/drivers**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../entities/user.entity";\nimport { UserGateway } from "../adapters/user.gateway";\n\n@Injectable()\nexport class UserRepository implements UserGateway {\n  private users = [new User(1, "John")];\n\n  async findById(id: number): Promise<User> {\n    return this.users.find((u) => u.id === id);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserUseCase } from "./usecases/user.usecase";\nimport { UserRepository } from "./frameworks/user.repository";\n\n@Module({\n  providers: [\n    UserUseCase,\n    { provide: "UserGateway", useClass: UserRepository },\n  ],\n})\nexport class AppModule {}\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"ebi-architecture-entity-boundary-interactor"},"EBI Architecture (Entity-Boundary-Interactor)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": EBI Architecture simplifies domain-centric design into three components: entities for business objects, boundaries as interfaces, and interactors for logic, focusing on clear separation."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Entity"),": Core objects holding data and behavior."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Boundary"),": Interfaces specifying how entities are accessed."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Interactor"),": Logic managing interactions with entities via boundaries."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 entities/\n\u2502   \u2514\u2500\u2500 user.entity.ts\n\u251c\u2500\u2500 boundaries/\n\u2502   \u2514\u2500\u2500 user.boundary.ts\n\u251c\u2500\u2500 interactors/\n\u2502   \u2514\u2500\u2500 user.interactor.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/entities/user.entity.ts (**Entity**)\nexport class User {\n  constructor(public id: number, public name: string) {}\n}\n\n// src/boundaries/user.boundary.ts (**Boundary**)\nexport interface UserBoundary {\n  findById(id: number): Promise<User>;\n}\n\n// src/interactors/user.interactor.ts (**Interactor**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../entities/user.entity";\nimport { UserBoundary } from "../boundaries/user.boundary";\n\n@Injectable()\nexport class UserInteractor {\n  constructor(private boundary: UserBoundary) {}\n\n  async getUser(id: number): Promise<User> {\n    return this.boundary.findById(id);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserInteractor } from "./interactors/user.interactor";\n\n@Injectable()\nexport class UserRepository implements UserBoundary {\n  private users = [new User(1, "John")];\n\n  async findById(id: number): Promise<User> {\n    return this.users.find((u) => u.id === id);\n  }\n}\n\n@Module({\n  providers: [\n    UserInteractor,\n    { provide: "UserBoundary", useClass: UserRepository },\n  ],\n})\nexport class AppModule {}\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"hexagonal-architecture"},"Hexagonal Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Hexagonal Architecture (Ports and Adapters) isolates business logic in the core, using ports to define interactions and adapters to connect to external systems, promoting flexibility."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Ports"),": Interfaces specifying how the core communicates outward."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Adapters"),": Implementations linking ports to external systems."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 domain/\n\u2502   \u2514\u2500\u2500 user.entity.ts\n\u251c\u2500\u2500 ports/\n\u2502   \u2514\u2500\u2500 user.port.ts\n\u251c\u2500\u2500 adapters/\n\u2502   \u2514\u2500\u2500 user.repository.ts\n\u251c\u2500\u2500 application/\n\u2502   \u2514\u2500\u2500 user.service.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/domain/user.entity.ts (Core)\nexport class User {\n  constructor(public id: number, public name: string) {}\n}\n\n// src/ports/user.port.ts (**Ports**)\nexport interface UserPort {\n  findById(id: number): Promise<User>;\n}\n\n// src/adapters/user.repository.ts (**Adapters**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../domain/user.entity";\nimport { UserPort } from "../ports/user.port";\n\n@Injectable()\nexport class UserRepository implements UserPort {\n  private users = [new User(1, "John")];\n\n  async findById(id: number): Promise<User> {\n    return this.users.find((u) => u.id === id);\n  }\n}\n\n// src/application/user.service.ts (Core Logic with Ports)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "../domain/user.entity";\nimport { UserPort } from "../ports/user.port";\n\n@Injectable()\nexport class UserService {\n  constructor(private userPort: UserPort) {}\n\n  async getUser(id: number): Promise<User> {\n    return this.userPort.findById(id);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService } from "./application/user.service";\nimport { UserRepository } from "./adapters/user.repository";\n\n@Module({\n  providers: [UserService, { provide: "UserPort", useClass: UserRepository }],\n})\nexport class AppModule {}\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"key-differences"},"Key Differences"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Onion: Layers with core domain at center, outward dependencies."),(0,s.kt)("li",{parentName:"ul"},"Clean: Circular structure with entities at core, explicit adapters."),(0,s.kt)("li",{parentName:"ul"},"EBI: Simplified with entity-boundary-interactor trio."),(0,s.kt)("li",{parentName:"ul"},"Hexagonal: Ports and adapters for flexible external integration.")))}m.isMDXComponent=!0}}]);