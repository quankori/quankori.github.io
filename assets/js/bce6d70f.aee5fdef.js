"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[586],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,u=d["".concat(l,".").concat(g)]||d[g]||m[g]||o;return t?r.createElement(u,s(s({ref:n},p),{},{components:t})):r.createElement(u,s({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={title:"MongoDB"},s=void 0,i={unversionedId:"cheatsheet/database/mongodb",id:"cheatsheet/database/mongodb",title:"MongoDB",description:"MongoDB",source:"@site/docs/cheatsheet/database/mongodb.md",sourceDirName:"cheatsheet/database",slug:"/cheatsheet/database/mongodb",permalink:"/docs/cheatsheet/database/mongodb",draft:!1,tags:[],version:"current",frontMatter:{title:"MongoDB"},sidebar:"cheatsheet",previous:{title:"PostgreSQL",permalink:"/docs/cheatsheet/database/postgresql"},next:{title:"Redis",permalink:"/docs/cheatsheet/database/redis"}},l={},c=[{value:"MongoDB",id:"mongodb",level:2},{value:"Key Differences",id:"key-differences",level:2}],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"mongodb"},"MongoDB"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),": MongoDB is a NoSQL, document-oriented database that stores data in flexible, JSON-like BSON documents, offering scalability, high availability, and performance for modern applications."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Sharding"),": Distributes data across multiple servers for horizontal scaling."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Replica sets"),": Ensures high availability with primary-secondary replication.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core features"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Schema-less design"),": Allows dynamic, flexible data structures without predefined schemas."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Document model"),": Uses JSON/BSON for data storage, enabling rich structures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Embedded documents & arrays"),": Supports nesting data within documents for efficient queries.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Indexing"),": Enhances query speed with single, compound, or geospatial indexes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Aggregation pipeline"),": Processes and transforms data with a powerful pipeline."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Write concern vs read preference"),": Balances durability and performance in reads/writes.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Consistency"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BASE model"),": Prioritizes availability and eventual consistency over strict ACID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Tunable consistency"),": Adjusts read/write consistency via concern settings.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 mongo/\n\u2502   \u251c\u2500\u2500 mongo.service.ts\n\u2502   \u2514\u2500\u2500 mongo.module.ts\n\u2514\u2500\u2500 main.ts\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bash Scripts & MongoDB Commands"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Replica Set (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Start MongoDB instances for replica set (3 nodes)\nmkdir -p data/rs1 data/rs2 data/rs3\nmongod --replSet rs0 --port 27017 --dbpath data/rs1 --fork --logpath data/rs1.log\nmongod --replSet rs0 --port 27018 --dbpath data/rs2 --fork --logpath data/rs2.log\nmongod --replSet rs0 --port 27019 --dbpath data/rs3 --fork --logpath data/rs3.log\n\n# Initiate replica set\nmongo --port 27017 --eval \'rs.initiate({\n  _id: "rs0",\n  members: [\n    { _id: 0, host: "localhost:27017" },\n    { _id: 1, host: "localhost:27018" },\n    { _id: 2, host: "localhost:27019" }\n  ]\n})\'\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Enable Sharding (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Start config servers, shard servers, and mongos\nmongod --configsvr --port 27020 --dbpath data/config --fork --logpath data/config.log\nmongod --shardsvr --port 27021 --dbpath data/shard1 --fork --logpath data/shard1.log\nmongos --configdb localhost:27020 --port 27017 --fork --logpath data/mongos.log\n\n# Enable sharding on database and collection (run in mongo shell)\nmongo --port 27017 <<EOF\nsh.enableSharding("mydb")\nsh.shardCollection("mydb.users", { "userId": "hashed" })\nEOF\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"MongoDB Shell Commands"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// **Indexing**: Create a compound index\ndb.users.createIndex({ userId: 1, name: 1 });\n\n// **Aggregation pipeline**: Count users by city\ndb.users.aggregate([\n  { $match: { "address.city": "Hanoi" } },\n  { $group: { _id: "$address.city", total: { $sum: 1 } } },\n]);\n\n// **Write concern**: Insert with majority write\ndb.users.insertOne(\n  { userId: 1, name: "John" },\n  { writeConcern: { w: "majority" } }\n);\n\n// **Read preference**: Read from secondary\ndb.users.findOne({ userId: 1 }).readPref("secondaryPreferred");\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/mongo/mongo.service.ts\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { MongoClient, Collection } from "mongodb";\n\n@Injectable()\nexport class MongoService implements OnModuleInit {\n  private client: MongoClient;\n  private collection: Collection;\n\n  constructor() {\n    this.client = new MongoClient("mongodb://localhost:27017");\n  }\n\n  async onModuleInit() {\n    await this.client.connect();\n    const db = this.client.db("mydb");\n    this.collection = db.collection("users");\n\n    // **Indexing** (Single)\n    await this.collection.createIndex({ userId: 1 });\n  }\n\n  // **Replica sets** & **Sharding**: Assumes configured cluster\n  async addUser(userId: number, name: string) {\n    const doc = {\n      userId,\n      name,\n      address: { city: "Hanoi", zip: "10000" }, // **Embedded documents**\n      tags: ["dev", "tech"], // **Arrays**\n    };\n    await this.collection.insertOne(doc, { writeConcern: { w: "majority" } }); // **Write concern**\n  }\n\n  async getUser(userId: number) {\n    return this.collection.findOne(\n      { userId },\n      { readPreference: "secondaryPreferred" } // **Read preference**\n    );\n  }\n\n  async aggregateUsersByCity() {\n    // **Aggregation pipeline**\n    return this.collection\n      .aggregate([\n        { $match: { "address.city": "Hanoi" } },\n        { $group: { _id: "$address.city", total: { $sum: 1 } } },\n      ])\n      .toArray();\n  }\n}\n\n// src/mongo/mongo.module.ts\nimport { Module } from "@nestjs/common";\nimport { MongoService } from "./mongo.service";\n\n@Module({\n  providers: [MongoService],\n  exports: [MongoService],\n})\nexport class MongoModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { Module } from "@nestjs/common";\nimport { MongoModule } from "./mongo/mongo.module";\nimport { MongoService } from "./mongo/mongo.service";\n\n@Module({\n  imports: [MongoModule],\n})\nexport class AppModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const mongoService = app.get(MongoService);\n\n  // Add user (**Schema-less design**, **Document model**)\n  await mongoService.addUser(1, "John");\n\n  // Get user (**Tunable consistency**)\n  const user = await mongoService.getUser(1);\n  console.log(user);\n\n  // Aggregate users (**Performance**)\n  const aggResult = await mongoService.aggregateUsersByCity();\n  console.log(aggResult);\n\n  await app.listen(3000);\n}\nbootstrap();\n')))),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling"),": Sharding for load distribution; Replica Sets for redundancy."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Features"),": Flexible, nested data with no schema constraints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance"),": Indexes for speed, aggregation for transformation, concerns for tuning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Consistency"),": BASE with adjustable read/write consistency.")))}m.isMDXComponent=!0}}]);