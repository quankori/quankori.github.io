"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,k=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={title:"Message Queue"},i=void 0,s={unversionedId:"cheatsheet/fundamental/message-queue",id:"cheatsheet/fundamental/message-queue",title:"Message Queue",description:"Overview",source:"@site/docs/cheatsheet/fundamental/message-queue.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/message-queue",permalink:"/docs/cheatsheet/fundamental/message-queue",draft:!1,tags:[],version:"current",frontMatter:{title:"Message Queue"},sidebar:"cheatsheet",previous:{title:"Design Principle",permalink:"/docs/cheatsheet/fundamental/design-principle"},next:{title:"Common Concepts",permalink:"/docs/cheatsheet/database/common-concept"}},l={},m=[{value:"Overview",id:"overview",level:2},{value:"1. RabbitMQ with NestJS",id:"1-rabbitmq-with-nestjs",level:2},{value:"Components",id:"components",level:3},{value:"NestJS Sample Code",id:"nestjs-sample-code",level:3},{value:"Producer (Sending Messages)",id:"producer-sending-messages",level:4},{value:"Consumer (Receiving and Processing Messages)",id:"consumer-receiving-and-processing-messages",level:4},{value:"Workflow Visualization",id:"workflow-visualization",level:3},{value:"2. Kafka with NestJS",id:"2-kafka-with-nestjs",level:2},{value:"Components",id:"components-1",level:3},{value:"NestJS Sample Code",id:"nestjs-sample-code-1",level:3},{value:"Producer (Sending Events)",id:"producer-sending-events",level:4},{value:"Consumer (Receiving and Processing Events)",id:"consumer-receiving-and-processing-events",level:4},{value:"Workflow Visualization",id:"workflow-visualization-1",level:3},{value:"Comparison of RabbitMQ and Kafka",id:"comparison-of-rabbitmq-and-kafka",level:2},{value:"Bash Scripts &amp; Commands",id:"bash-scripts--commands",level:2},{value:"RabbitMQ",id:"rabbitmq",level:3},{value:"Kafka",id:"kafka",level:3},{value:"General Workflow Visualization",id:"general-workflow-visualization",level:2},{value:"RabbitMQ",id:"rabbitmq-1",level:3},{value:"Kafka",id:"kafka-1",level:3}],p={toc:m},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Both ",(0,r.kt)("strong",{parentName:"p"},"RabbitMQ")," and ",(0,r.kt)("strong",{parentName:"p"},"Kafka")," are popular message brokers in microservices architectures, each with distinct approaches:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RabbitMQ"),": A traditional message broker using AMQP, focusing on delivering messages between producers and consumers via queues."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Kafka"),": A distributed streaming platform storing and processing event streams in real-time, using topics and partitions.")),(0,r.kt)("p",null,"Below are the details on components, NestJS implementations, and workflow visualizations for each."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"1-rabbitmq-with-nestjs"},"1. RabbitMQ with NestJS"),(0,r.kt)("h3",{id:"components"},"Components"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Producer"),": Service sending messages to RabbitMQ (NestJS client)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Queue"),": Stores messages, ensuring FIFO processing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Consumer"),": Service receiving and processing messages from the queue (NestJS microservice)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Exchange"),": Routes messages to queues based on routing keys (e.g., direct, topic, fanout)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Channel"),": Communication channel between producer/consumer and RabbitMQ.")),(0,r.kt)("h3",{id:"nestjs-sample-code"},"NestJS Sample Code"),(0,r.kt)("h4",{id:"producer-sending-messages"},"Producer (Sending Messages)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/producer/producer.service.ts\nimport { Injectable } from "@nestjs/common";\nimport {\n  ClientProxy,\n  ClientProxyFactory,\n  Transport,\n} from "@nestjs/microservices";\n\n@Injectable()\nexport class ProducerService {\n  private client: ClientProxy;\n\n  constructor() {\n    this.client = ClientProxyFactory.create({\n      transport: Transport.RMQ,\n      options: {\n        urls: ["amqp://localhost:5672"],\n        queue: "email_queue",\n        queueOptions: { durable: true },\n      },\n    });\n  }\n\n  async sendEmail(email: string) {\n    await this.client.emit("send_email", { email }).toPromise();\n    console.log(`Sent email request for ${email}`);\n  }\n}\n')),(0,r.kt)("h4",{id:"consumer-receiving-and-processing-messages"},"Consumer (Receiving and Processing Messages)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/consumer/consumer.controller.ts\nimport { Controller } from "@nestjs/common";\nimport { EventPattern } from "@nestjs/microservices";\n\n@Controller()\nexport class ConsumerController {\n  @EventPattern("send_email") // Listens to events from the queue\n  async handleEmail(data: { email: string }) {\n    console.log(`Processing email for ${data.email}`);\n    // Process email logic here\n  }\n}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { Transport } from "@nestjs/microservices";\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice(AppModule, {\n    transport: Transport.RMQ,\n    options: {\n      urls: ["amqp://localhost:5672"],\n      queue: "email_queue",\n      queueOptions: { durable: true },\n    },\n  });\n  await app.listen();\n}\nbootstrap();\n')),(0,r.kt)("h3",{id:"workflow-visualization"},"Workflow Visualization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Producer] --\x3e [Exchange] --\x3e [Queue: email_queue] --\x3e [Consumer]\n   |              |             |                        |\n   |              |             |                        +--\x3e Process email\n   |              |             +--\x3e Store message\n   |              +--\x3e Route via routing key\n   +--\x3e Send message (send_email)\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Producer")," sends a message to the ",(0,r.kt)("strong",{parentName:"li"},"Exchange")," with a routing key (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"send_email"),")."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Exchange")," routes the message to the ",(0,r.kt)("strong",{parentName:"li"},"Queue")," (",(0,r.kt)("inlineCode",{parentName:"li"},"email_queue"),")."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Consumer")," retrieves and processes the message (e.g., sends an email)."),(0,r.kt)("li",{parentName:"ol"},"Message is removed from the queue after acknowledgment.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"2-kafka-with-nestjs"},"2. Kafka with NestJS"),(0,r.kt)("h3",{id:"components-1"},"Components"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Producer"),": Service sending events to a Kafka topic (NestJS client)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Topic"),": Channel storing event streams, divided into partitions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Partition"),": Segment of data within a topic, enabling parallel processing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Consumer"),": Service consuming events from a topic (NestJS microservice)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Consumer Group"),": Group of consumers sharing workload across partitions.")),(0,r.kt)("h3",{id:"nestjs-sample-code-1"},"NestJS Sample Code"),(0,r.kt)("h4",{id:"producer-sending-events"},"Producer (Sending Events)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/producer/producer.service.ts\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport {\n  ClientKafka,\n  ClientProxyFactory,\n  Transport,\n} from "@nestjs/microservices";\n\n@Injectable()\nexport class ProducerService implements OnModuleInit {\n  private client: ClientKafka;\n\n  constructor() {\n    this.client = ClientProxyFactory.create({\n      transport: Transport.KAFKA,\n      options: {\n        client: { brokers: ["localhost:9092"] },\n        consumer: { groupId: "email-group" },\n      },\n    }) as ClientKafka;\n  }\n\n  async onModuleInit() {\n    await this.client.connect();\n  }\n\n  async sendEmail(email: string) {\n    await this.client\n      .emit("email_topic", { key: email, value: { email } })\n      .toPromise();\n    console.log(`Sent email event for ${email} to Kafka`);\n  }\n}\n')),(0,r.kt)("h4",{id:"consumer-receiving-and-processing-events"},"Consumer (Receiving and Processing Events)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/consumer/consumer.controller.ts\nimport { Controller } from "@nestjs/common";\nimport { MessagePattern } from "@nestjs/microservices";\n\n@Controller()\nexport class ConsumerController {\n  @MessagePattern("email_topic") // Listens to the topic\n  async handleEmail(data: { key: string; value: { email: string } }) {\n    console.log(`Processing email event for ${data.value.email}`);\n    // Process email logic here\n  }\n}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { Transport } from "@nestjs/microservices";\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice(AppModule, {\n    transport: Transport.KAFKA,\n    options: {\n      client: { brokers: ["localhost:9092"] },\n      consumer: { groupId: "email-group" },\n    },\n  });\n  await app.listen();\n}\nbootstrap();\n')),(0,r.kt)("h3",{id:"workflow-visualization-1"},"Workflow Visualization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Producer] --\x3e [Topic: email_topic] --\x3e [Partition 0] --\x3e [Consumer Group: email-group]\n   |              |                     [Partition 1] --\x3e [Consumer 1]\n   |              |                     [Partition 2] --\x3e [Consumer 2]\n   |              +--\x3e Store event\n   +--\x3e Send event (email_topic)\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Producer")," sends an event to the ",(0,r.kt)("strong",{parentName:"li"},"Topic")," (",(0,r.kt)("inlineCode",{parentName:"li"},"email_topic"),") with a key (e.g., email)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Topic")," distributes the event to ",(0,r.kt)("strong",{parentName:"li"},"Partitions")," based on the key."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Consumer Group")," assigns partitions to consumers (e.g., Consumer 1, Consumer 2)."),(0,r.kt)("li",{parentName:"ol"},"Each ",(0,r.kt)("strong",{parentName:"li"},"Consumer")," processes events from its assigned partition (e.g., sends email)."),(0,r.kt)("li",{parentName:"ol"},"Events remain stored in the topic (unlike RabbitMQ\u2019s immediate removal).")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"comparison-of-rabbitmq-and-kafka"},"Comparison of RabbitMQ and Kafka"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Aspect")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"RabbitMQ")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Kafka")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Model")),(0,r.kt)("td",{parentName:"tr",align:null},"Queue-based (AMQP)"),(0,r.kt)("td",{parentName:"tr",align:null},"Topic-based (Event Streaming)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Message Handling")),(0,r.kt)("td",{parentName:"tr",align:null},"Removed after processing (ack)"),(0,r.kt)("td",{parentName:"tr",align:null},"Retained for a period (retention)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},"Single queue, competing consumers"),(0,r.kt)("td",{parentName:"tr",align:null},"Partitions enable parallel consumers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Use Case")),(0,r.kt)("td",{parentName:"tr",align:null},"Task queues, short-lived messages"),(0,r.kt)("td",{parentName:"tr",align:null},"Event streaming, real-time data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Consistency")),(0,r.kt)("td",{parentName:"tr",align:null},"Strong (queue-based)"),(0,r.kt)("td",{parentName:"tr",align:null},"Eventual (partition-based)")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"bash-scripts--commands"},"Bash Scripts & Commands"),(0,r.kt)("h3",{id:"rabbitmq"},"RabbitMQ"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Start RabbitMQ (Docker)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create Queue (CLI)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rabbitmqadmin declare queue name=email_queue durable=true\n")))),(0,r.kt)("h3",{id:"kafka"},"Kafka"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Start Kafka (Docker)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --name zookeeper -p 2181:2181 zookeeper\ndocker run -d --name kafka -p 9092:9092 --link zookeeper:zookeeper confluentinc/cp-kafka\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create Topic (CLI)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kafka-topics.sh --create --topic email_topic --partitions 3 --replication-factor 1 --bootstrap-server localhost:9092\n")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"general-workflow-visualization"},"General Workflow Visualization"),(0,r.kt)("h3",{id:"rabbitmq-1"},"RabbitMQ"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Producer] --\x3e [Exchange] --\x3e [Queue] --\x3e [Consumer 1]\n   |              |             |         [Consumer 2]\n   +--\x3e Emit       +--\x3e Route    +--\x3e Consume (FIFO)\n")),(0,r.kt)("h3",{id:"kafka-1"},"Kafka"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Producer] --\x3e [Topic] --\x3e [Partition 0] --\x3e [Consumer 1]\n   |             |        [Partition 1] --\x3e [Consumer 2]\n   +--\x3e Emit      +--\x3e Distribute       +--\x3e Consume (Parallel)\n")))}u.isMDXComponent=!0}}]);