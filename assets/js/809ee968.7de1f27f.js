"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7192],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,k=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return n?r.createElement(k,o(o({ref:t},m),{},{components:n})):r.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"Process and Thread"},o=void 0,s={unversionedId:"programming/fundamental/process-and-thread",id:"programming/fundamental/process-and-thread",title:"Process and Thread",description:"Image",source:"@site/docs/programming/fundamental/process-and-thread.md",sourceDirName:"programming/fundamental",slug:"/programming/fundamental/process-and-thread",permalink:"/docs/programming/fundamental/process-and-thread",draft:!1,tags:[],version:"current",frontMatter:{title:"Process and Thread"},sidebar:"programming",previous:{title:"Open Systems Interconnection Reference Model",permalink:"/docs/programming/fundamental/osimodel"},next:{title:"SOLID Principle",permalink:"/docs/programming/fundamental/solid"}},l={},p=[{value:"Process",id:"process",level:2},{value:"Thread",id:"thread",level:2},{value:"Comparison",id:"comparison",level:2},{value:"Example in Go",id:"example-in-go",level:2},{value:"Summary",id:"summary",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/8.PNG",alt:"Image"})),(0,a.kt)("h2",{id:"process"},"Process"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition"),":\nA process is an instance of a computer program that is being executed. It contains the program code and its current activity. Each process has its own memory space and resources."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Key Characteristics"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Isolation"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Each process runs in its own memory space and has its own resources. This isolation ensures that one process cannot directly access the memory of another process."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Resource Management"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A process has its own set of resources, including memory, file handles, and network connections."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Concurrency"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Multiple processes can run concurrently on a multi-core processor or through time-slicing on a single-core processor."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Inter-Process Communication (IPC)"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Since processes are isolated, they need mechanisms for communication, such as pipes, sockets, shared memory, and message passing.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":\nRunning a web browser and a text editor simultaneously are examples of two separate processes."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Life Cycle of a Process"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Creation"),": A process is created by another process (parent process) using system calls like ",(0,a.kt)("inlineCode",{parentName:"li"},"fork()")," in Unix."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Execution"),": The process executes its instructions."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Waiting"),": A process may wait for some event to occur (like I/O completion)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Termination"),": A process completes execution and is terminated, releasing its resources.")),(0,a.kt)("h2",{id:"thread"},"Thread"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition"),":\nA thread is the smallest unit of execution within a process. A process can have multiple threads, which share the process\u2019s resources, including memory and open files."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Key Characteristics"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Shared Resources"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"All threads within a process share the same memory space and resources, allowing for efficient communication and data sharing."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Lightweight"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Threads are more lightweight compared to processes. Creating and switching between threads requires less overhead than processes."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Concurrency"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Multiple threads within the same process can run concurrently. They can be executed in parallel on multiple cores or time-sliced on a single core."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Synchronization"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Since threads share the same resources, synchronization mechanisms like mutexes, semaphores, and locks are necessary to avoid conflicts and ensure data consistency.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":\nA web browser might have multiple threads for handling user input, rendering pages, and downloading files simultaneously."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Life Cycle of a Thread"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Creation"),": A thread is created within a process."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Execution"),": The thread executes its instructions."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Waiting"),": A thread can wait for some event (like a resource becoming available)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Termination"),": The thread completes execution and is terminated.")),(0,a.kt)("h2",{id:"comparison"},"Comparison"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Processes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory"),": Each process has its own memory space."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Communication"),": Processes require IPC mechanisms to communicate."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Overhead"),": Higher overhead for creation and context switching."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Isolation"),": Processes are isolated from each other, enhancing security.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Threads"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory"),": Threads share the same memory space within a process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Communication"),": Easier communication between threads since they share memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Overhead"),": Lower overhead for creation and context switching."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Synchronization"),": Requires synchronization mechanisms to manage shared resources.")),(0,a.kt)("h2",{id:"example-in-go"},"Example in Go"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using Goroutines in Go"),":"),(0,a.kt)("p",null,"Go provides goroutines, which are lightweight threads managed by the Go runtime."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example: Concurrently printing numbers and letters"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc printNumbers() {\n    for i := 1; i <= 5; i++ {\n        fmt.Printf("%d ", i)\n        time.Sleep(100 * time.Millisecond)\n    }\n}\n\nfunc printLetters() {\n    for i := \'A\'; i <= \'E\'; i++ {\n        fmt.Printf("%c ", i)\n        time.Sleep(150 * time.Millisecond)\n    }\n}\n\nfunc main() {\n    go printNumbers() // Start a goroutine\n    go printLetters() // Start another goroutine\n\n    // Wait for goroutines to finish\n    time.Sleep(1 * time.Second)\n}\n')),(0,a.kt)("p",null,"In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"printNumbers")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"printLetters")," functions run concurrently using goroutines."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Processes"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Independent execution units with their own memory space."),(0,a.kt)("li",{parentName:"ul"},"Require IPC mechanisms for communication."),(0,a.kt)("li",{parentName:"ul"},"Higher overhead for creation and context switching."),(0,a.kt)("li",{parentName:"ul"},"Example: Running multiple applications on a computer."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Threads"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Lightweight execution units within a process sharing the same memory."),(0,a.kt)("li",{parentName:"ul"},"Easier communication but require synchronization."),(0,a.kt)("li",{parentName:"ul"},"Lower overhead for creation and context switching."),(0,a.kt)("li",{parentName:"ul"},"Example: Multiple tasks within a single application (e.g., web browser tabs).")))))}u.isMDXComponent=!0}}]);