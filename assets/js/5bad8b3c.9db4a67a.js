"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2679],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>b});var o=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=o.createContext({}),i=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=i(n.components);return o.createElement(s.Provider,{value:e},n.children)},f="mdxType",k={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),f=i(t),u=r,b=f["".concat(s,".").concat(u)]||f[u]||k[u]||a;return t?o.createElement(b,c(c({ref:e},p),{},{components:t})):o.createElement(b,c({ref:e},p))}));function b(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,c=new Array(a);c[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[f]="string"==typeof n?n:r,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4406:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var o=t(7462),r=(t(7294),t(3905));const a={title:"Proof Of Work"},c=void 0,l={unversionedId:"examples/go/pow",id:"examples/go/pow",title:"Proof Of Work",description:"Example Golang with basic PoW",source:"@site/docs/examples/go/pow.md",sourceDirName:"examples/go",slug:"/examples/go/pow",permalink:"/docs/examples/go/pow",draft:!1,editUrl:"https://github.com/recallwei/wiki/tree/main/website/docs/examples/go/pow.md",tags:[],version:"current",frontMatter:{title:"Proof Of Work"},sidebar:"examples",previous:{title:"Hierarchical Deterministic Wallet",permalink:"/docs/examples/go/hdwallet"},next:{title:"Job Queue",permalink:"/docs/examples/go/queue"}},s={},i=[],p={toc:i},f="wrapper";function k(n){let{components:e,...t}=n;return(0,r.kt)(f,(0,o.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Example Golang with basic PoW"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    maxNonce = math.MaxInt64\n)\n\n// Block struct for blockchain\ntype Block struct {\n    Timestamp     int64\n    Data          []byte\n    PrevBlockHash []byte\n    Hash          []byte\n    Nonce         int\n}\n\nconst targetBits = 24\n\n// ProofOfWork represents a proof-of-work\ntype ProofOfWork struct {\n    block  *types.Block\n    target *big.Int\n}\n\n\n// NewProofOfWork builds and returns a ProofOfWork\nfunc NewProofOfWork(b *types.Block) *ProofOfWork {\n    target := big.NewInt(1)\n    target.Lsh(target, uint(256-targetBits))\n\n    pow := &ProofOfWork{b, target}\n\n    return pow\n}\n\nfunc (pow *ProofOfWork) prepareData(nonce int) []byte {\n    data := bytes.Join(\n        [][]byte{\n            pow.block.PrevBlockHash,\n            pow.block.Data,\n            common.IntToHex(pow.block.Timestamp),\n            common.IntToHex(int64(targetBits)),\n            common.IntToHex(int64(nonce)),\n        },\n        []byte{},\n    )\n\n    return data\n}\n\n// Run performs a proof-of-work\nfunc (pow *ProofOfWork) Run() (int, []byte) {\n    var hashInt big.Int\n    var hash [32]byte\n    nonce := 0\n\n    fmt.Printf("Mining the block containing \\"%s\\"\\n", pow.block.Data)\n    for nonce < maxNonce {\n        data := pow.prepareData(nonce)\n\n        hash = sha256.Sum256(data)\n        fmt.Printf("\\r%x", hash)\n        hashInt.SetBytes(hash[:])\n\n        if hashInt.Cmp(pow.target) == -1 {\n            break\n        } else {\n            nonce++\n        }\n    }\n    fmt.Print("\\n\\n")\n\n    return nonce, hash[:]\n}\n\n// Validate validates block\'s PoW\nfunc (pow *ProofOfWork) Validate() bool {\n    var hashInt big.Int\n\n    data := pow.prepareData(pow.block.Nonce)\n    hash := sha256.Sum256(data)\n    hashInt.SetBytes(hash[:])\n\n    isValid := hashInt.Cmp(pow.target) == -1\n\n    return isValid\n}\n\n// NewBlock creates and returns Block\nfunc NewBlock(data string, prevBlockHash []byte) *types.Block {\n    block := &types.Block{time.Now().Unix(), []byte(data), prevBlockHash, []byte{}, 0}\n    pow := consensus.NewProofOfWork(block)\n    nonce, hash := pow.Run()\n\n    block.Hash = hash[:]\n    block.Nonce = nonce\n\n    return block\n}\n\n// NewGenesisBlock creates and returns genesis Block\nfunc NewGenesisBlock() *types.Block {\n    return NewBlock("Genesis Block", []byte{})\n}\n\ntype Blockchain struct {\n    Blocks []*types.Block\n}\n\n// AddBlock saves provided data as a block in the blockchain\nfunc (bc *Blockchain) AddBlock(data string) {\n    prevBlock := bc.Blocks[len(bc.Blocks)-1]\n    newBlock := NewBlock(data, prevBlock.Hash)\n    bc.Blocks = append(bc.Blocks, newBlock)\n}\n\n// NewBlockchain creates a new Blockchain with genesis Block\nfunc NewBlockchain() *Blockchain {\n    return &Blockchain{[]*types.Block{NewGenesisBlock()}}\n}\n\nfunc main() {\n\n    bc := core.NewBlockchain()\n\n    bc.AddBlock("Add one user")\n    bc.AddBlock("Add two user")\n\n    for _, block := range bc.Blocks {\n        fmt.Printf("Prev. hash: %x\\n", block.PrevBlockHash)\n        fmt.Printf("Data: %s\\n", block.Data)\n        fmt.Printf("Hash: %x\\n", block.Hash)\n        fmt.Println()\n    }\n}\n')))}k.isMDXComponent=!0}}]);