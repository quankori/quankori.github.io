"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[131],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,v=p["".concat(c,".").concat(d)]||p[d]||m[d]||s;return t?r.createElement(v,o(o({ref:n},u),{},{components:t})):r.createElement(v,o({ref:n},u))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={title:"Serverless Architecture"},o=void 0,i={unversionedId:"cheatsheet/system-design/serverless",id:"cheatsheet/system-design/serverless",title:"Serverless Architecture",description:"Serverless Architecture",source:"@site/docs/cheatsheet/system-design/serverless.md",sourceDirName:"cheatsheet/system-design",slug:"/cheatsheet/system-design/serverless",permalink:"/docs/cheatsheet/system-design/serverless",draft:!1,tags:[],version:"current",frontMatter:{title:"Serverless Architecture"},sidebar:"cheatsheet",previous:{title:"Microservices Architecture",permalink:"/docs/cheatsheet/system-design/microservices"},next:{title:"Node.js",permalink:"/docs/cheatsheet/programming/nodejs"}},c={},l=[{value:"Serverless Architecture",id:"serverless-architecture",level:2},{value:"Key Differences",id:"key-differences",level:2}],u={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"serverless-architecture"},"Serverless Architecture"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),": Serverless Architecture allows developers to build and run applications without managing servers, leveraging cloud providers for execution, scaling, and infrastructure, focusing on code and events."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Functions as a service"),": Event-triggered, short-lived code execution (e.g., AWS Lambda)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Backend as a service"),": Pre-built backend features (e.g., Firebase authentication, database)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"API gateway"),": Manages and routes API requests to serverless functions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Storage services"),": Scalable, managed storage (e.g., AWS S3, DynamoDB)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 functions/\n\u2502   \u2514\u2500\u2500 user.function.ts\n\u251c\u2500\u2500 baas/\n\u2502   \u2514\u2500\u2500 auth.service.ts\n\u251c\u2500\u2500 gateway/\n\u2502   \u2514\u2500\u2500 api.handler.ts\n\u251c\u2500\u2500 storage/\n\u2502   \u2514\u2500\u2500 s3.service.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/functions/user.function.ts (**Functions as a service**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UserFunction {\n  async handleEvent(event: any): Promise<any> {\n    // Simulate Lambda-like event handling\n    const userId = event.userId || 1;\n    return { id: userId, name: "John", status: "Created" };\n  }\n}\n\n// src/baas/auth.service.ts (**Backend as a service**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class AuthService {\n  async login(email: string, password: string): Promise<string> {\n    // Simulate Firebase-like auth\n    if (email === "test@example.com" && password === "password") {\n      return "mock-token";\n    }\n    throw new Error("Invalid credentials");\n  }\n}\n\n// src/gateway/api.handler.ts (**API gateway**)\nimport { Injectable } from "@nestjs/common";\nimport { UserFunction } from "../functions/user.function";\n\n@Injectable()\nexport class ApiHandler {\n  constructor(private userFunction: UserFunction) {}\n\n  async handleRequest(event: any): Promise<any> {\n    // Simulate API Gateway routing\n    if (event.path === "/users" && event.httpMethod === "POST") {\n      return this.userFunction.handleEvent(event.body);\n    }\n    return { status: "Not Found" };\n  }\n}\n\n// src/storage/s3.service.ts (**Storage services**)\nimport { Injectable } from "@nestjs/common";\nimport { S3 } from "aws-sdk";\n\n@Injectable()\nexport class S3Service {\n  private s3 = new S3({ region: "us-east-1" });\n\n  async uploadFile(key: string, data: string): Promise<void> {\n    await this.s3\n      .putObject({\n        Bucket: "my-bucket",\n        Key: key,\n        Body: data,\n      })\n      .promise();\n    console.log(`Uploaded ${key} to S3`);\n  }\n\n  async getFile(key: string): Promise<string> {\n    const result = await this.s3\n      .getObject({\n        Bucket: "my-bucket",\n        Key: key,\n      })\n      .promise();\n    return result.Body.toString();\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserFunction } from "./functions/user.function";\nimport { AuthService } from "./baas/auth.service";\nimport { ApiHandler } from "./gateway/api.handler";\nimport { S3Service } from "./storage/s3.service";\n\n@Module({\n  providers: [UserFunction, AuthService, ApiHandler, S3Service],\n})\nexport class AppModule {}\n\n// src/main.ts (Simulated Serverless Entry)\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { UserFunction } from "./functions/user.function";\nimport { AuthService } from "./baas/auth.service";\nimport { ApiHandler } from "./gateway/api.handler";\nimport { S3Service } from "./storage/s3.service";\n\n// Simulate AWS Lambda handler\nexport async function handler(event: any) {\n  const app = await NestFactory.createApplicationContext(AppModule);\n  const userFunction = app.get(UserFunction);\n  const authService = app.get(AuthService);\n  const apiHandler = app.get(ApiHandler);\n  const s3Service = app.get(S3Service);\n\n  // FaaS: Handle event\n  const faasResult = await userFunction.handleEvent(event);\n\n  // BaaS: Simulate login\n  const token = await authService.login("test@example.com", "password");\n\n  // API Gateway: Route request\n  const apiResult = await apiHandler.handleRequest({\n    path: "/users",\n    httpMethod: "POST",\n    body: event,\n  });\n\n  // Storage: Upload to S3\n  await s3Service.uploadFile(\n    `user-${faasResult.id}.txt`,\n    JSON.stringify(faasResult)\n  );\n\n  return { faasResult, token, apiResult };\n}\n\n// Example invocation\nhandler({ userId: 1 }).then(console.log);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Notes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install AWS SDK: ",(0,a.kt)("inlineCode",{parentName:"li"},"npm install aws-sdk"),"."),(0,a.kt)("li",{parentName:"ul"},"Requires AWS credentials and an S3 bucket (",(0,a.kt)("inlineCode",{parentName:"li"},"my-bucket"),") configured."),(0,a.kt)("li",{parentName:"ul"},"This simulates a serverless setup; for real deployment, use AWS Lambda with a framework like ",(0,a.kt)("inlineCode",{parentName:"li"},"serverless")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"nestia"),".")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Functions as a Service"),": Executes code on-demand, no server management (e.g., Lambda)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Backend as a Service"),": Provides ready-made backend features (e.g., Firebase)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"API Gateway"),": Centralizes request routing and management (e.g., AWS API Gateway)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Storage Services"),": Offers scalable, managed storage (e.g., S3).")))}m.isMDXComponent=!0}}]);