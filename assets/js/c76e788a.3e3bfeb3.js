"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6563],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>g});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),u=o,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return r?t.createElement(g,i(i({ref:n},p),{},{components:r})):t.createElement(g,i({ref:n},p))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9380:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const a={title:"MongoDB Read Replicate"},i=void 0,s={unversionedId:"examples/docker/mongo_replicate",id:"examples/docker/mongo_replicate",title:"MongoDB Read Replicate",description:"docker-compose.yml",source:"@site/docs/examples/docker/mongo_replicate.md",sourceDirName:"examples/docker",slug:"/examples/docker/mongo_replicate",permalink:"/docs/examples/docker/mongo_replicate",draft:!1,editUrl:"https://github.com/recallwei/wiki/tree/main/website/docs/examples/docker/mongo_replicate.md",tags:[],version:"current",frontMatter:{title:"MongoDB Read Replicate"},sidebar:"examples",previous:{title:"RabbitMQ",permalink:"/docs/examples/go/rabbitmq"}},l={},c=[],p={toc:c},m="wrapper";function d(e){let{components:n,...r}=e;return(0,o.kt)(m,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.8"\n\nservices:\n  mongo1:\n    container_name: mongo1\n    image: mongo:4.4\n    volumes:\n      - ./data/data1:/data/db\n      - ./rs-init.sh:/scripts/rs-init.sh\n    networks:\n      - mongors-network\n    ports:\n      - 27021:27017\n    links:\n      - mongo2\n      - mongo3\n    restart: always\n    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]\n  mongo2:\n    container_name: mongo2\n    image: mongo:4.4\n    volumes:\n      - ./data/data2:/data/db\n    networks:\n      - mongors-network\n    ports:\n      - 27022:27017\n    restart: always\n    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]\n  mongo3:\n    container_name: mongo3\n    image: mongo:4.4\n    volumes:\n      - ./data/data3:/data/db\n    networks:\n      - mongors-network\n    ports:\n      - 27023:27017\n    restart: always\n    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]\n\nnetworks:\n  mongors-network:\n    driver: bridge\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"rs-init.sh")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nmongo <<EOF\nvar config = {\n    "_id": "dbrs",\n    "version": 1,\n    "members": [\n        {\n            "_id": 1,\n            "host": "mongo1:27017",\n            "priority": 3\n        },\n        {\n            "_id": 2,\n            "host": "mongo2:27017",\n            "priority": 2\n        },\n        {\n            "_id": 3,\n            "host": "mongo3:27017",\n            "priority": 1\n        }\n    ]\n};\nrs.initiate(config, { force: true });\nrs.status();\nEOF\n')))}d.isMDXComponent=!0}}]);