"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Computer Science"},l=void 0,o={unversionedId:"cheatsheet/fundamental/computer-science",id:"cheatsheet/fundamental/computer-science",title:"Computer Science",description:"Overview",source:"@site/docs/cheatsheet/fundamental/computer-science.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/computer-science",permalink:"/docs/cheatsheet/fundamental/computer-science",draft:!1,tags:[],version:"current",frontMatter:{title:"Computer Science"},sidebar:"cheatsheet",previous:{title:"Spring Boots",permalink:"/docs/cheatsheet/programming/spring"},next:{title:"Design Pattern",permalink:"/docs/cheatsheet/fundamental/design-pattern"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Key Differences",id:"key-differences",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Computer Science Fundamentals")," cover the essential building blocks of computing systems, including memory management (",(0,r.kt)("strong",{parentName:"p"},"Stack")," and ",(0,r.kt)("strong",{parentName:"p"},"Heap"),"), processor operations (",(0,r.kt)("strong",{parentName:"p"},"CPU"),"), and execution units (",(0,r.kt)("strong",{parentName:"p"},"Processes"),"). These concepts underpin operating systems, software performance, and hardware-software interactions, crucial for understanding how programs run efficiently and reliably."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core concepts"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack"),": Manages function calls with LIFO structure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap"),": Handles dynamic memory allocation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU"),": Executes instructions via cycles and caching."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process"),": Represents program execution with states and threads.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory management"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Virtual memory"),": Abstracts physical memory with paging."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory allocation"),": Allocates static or dynamic memory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory protection"),": Isolates process memory spaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cache memory"),": Speeds up data access with levels.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Process management"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scheduling"),": Allocates CPU time to processes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Context switching"),": Switches between processes or threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inter-process communication"),": Enables process data sharing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process synchronization"),": Prevents race conditions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CPU architecture"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instruction execution"),": Runs fetch-decode-execute cycles."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multi-core processing"),": Parallelizes tasks across cores."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interrupts"),": Handles external or internal events."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU scheduling"),": Optimizes core usage.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory optimization"),": Enhances data locality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU optimization"),": Improves instruction execution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling tools"),": Analyzes runtime performance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency optimization"),": Boosts multi-threading.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Operating systems"),": Manages hardware and processes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Embedded systems"),": Runs on constrained devices."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"High-performance computing"),": Scales for complex tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Real-time systems"),": Ensures timely execution.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Source Tree")," (C Example):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 memory.c   (Stack & Heap)\n\u2502   \u2514\u2500\u2500 cpu.c      (CPU Simulation)\n\u251c\u2500\u2500 process/\n\u2502   \u2514\u2500\u2500 proc.c     (Process & Threads)\n\u251c\u2500\u2500 main.c\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bash Scripts & Commands"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Compile and Run C Program (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\ngcc -o myapp src/main.c src/core/memory.c src/core/cpu.c src/process/proc.c -pthread\n./myapp\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Profile with Gprof (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\ngcc -pg -o myapp src/main.c src/core/memory.c src/core/cpu.c src/process/proc.c -pthread\n./myapp\ngprof myapp gmon.out > profile.txt\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Commands"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Check CPU usage\ntop\n\n# Monitor memory\nfree -m\n\n# Run with Valgrind\nvalgrind --leak-check=yes ./myapp\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"C Example")," (Simulating Concepts):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'// src/core/memory.c (**Stack & Heap**)\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid stackExample(int depth) {\n    if (depth > 1000) return; // Prevent **Stack overflow**\n    int stackVar = depth;\n    printf("Stack depth: %d\\n", stackVar);\n    stackExample(depth + 1); // **Function call stack**\n}\n\nvoid heapExample() {\n    int* heapVar = (int*)malloc(sizeof(int) * 10); // **Dynamic memory allocation**\n    if (heapVar) {\n        heapVar[0] = 42;\n        printf("Heap value: %d\\n", heapVar[0]);\n        free(heapVar); // **Heap management**\n    }\n}\n\n// src/core/cpu.c (**CPU Simulation**)\n#include <stdio.h>\n\nvoid cpuSimulation() {\n    int result = 0;\n    for (int i = 0; i < 1000000; i++) { // Simulate **Instruction execution**\n        result += i; // **Pipelining** would optimize this\n    }\n    printf("CPU simulation result: %d\\n", result);\n}\n\n// src/process/proc.c (**Process & Threads**)\n#include <pthread.h>\n#include <stdio.h>\n\nvoid* threadFunc(void* arg) {\n    printf("Thread running: %ld\\n", (long)arg);\n    return NULL;\n}\n\nvoid processExample() {\n    pthread_t thread;\n    pthread_create(&thread, NULL, threadFunc, (void*)1); // **Multiprocessing & Threads**\n    pthread_join(thread, NULL);\n    printf("Main process continues\\n");\n}\n\n// src/main.c\n#include <stdio.h>\n#include "core/memory.h"\n#include "core/cpu.h"\n#include "process/proc.h"\n\nint main() {\n    printf("=== Stack Example ===\\n");\n    stackExample(0); // **Stack**\n\n    printf("=== Heap Example ===\\n");\n    heapExample(); // **Heap**\n\n    printf("=== CPU Simulation ===\\n");\n    cpuSimulation(); // **CPU**\n\n    printf("=== Process Example ===\\n");\n    processExample(); // **Process**\n\n    return 0;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Requires a C compiler (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"gcc"),") and ",(0,r.kt)("inlineCode",{parentName:"li"},"pthread")," library."),(0,r.kt)("li",{parentName:"ul"},"Bash scripts assume ",(0,r.kt)("inlineCode",{parentName:"li"},"gcc"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"gprof"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"valgrind")," installed; adjust paths as needed."),(0,r.kt)("li",{parentName:"ul"},"Example simulates basic concepts; real-world apps would use OS APIs (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"fork"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"mmap"),").")),(0,r.kt)("h2",{id:"key-differences"},"Key Differences"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Core Concepts"),": Stack (static, fast), Heap (dynamic, flexible), CPU (execution), Process (runtime)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Management"),": Virtual memory and caching optimize access."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process Management"),": Scheduling and IPC manage execution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Architecture"),": Multi-core and interrupts enhance processing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization"),": Locality and parallelism boost efficiency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Cases"),": Spans OS, embedded, HPC, and real-time systems.")))}u.isMDXComponent=!0}}]);