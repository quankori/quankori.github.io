"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[249],{3905:(n,t,e)=>{e.d(t,{Zo:()=>i,kt:()=>h});var a=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,a,r=function(n,t){if(null==n)return{};var e,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)e=o[a],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)e=o[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var c=a.createContext({}),l=function(n){var t=a.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):s(s({},t),n)),e},i=function(n){var t=l(n.components);return a.createElement(c.Provider,{value:t},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,i=u(n,["components","mdxType","originalType","parentName"]),p=l(e),g=r,h=p["".concat(c,".").concat(g)]||p[g]||m[g]||o;return e?a.createElement(h,s(s({ref:t},i),{},{components:e})):a.createElement(h,s({ref:t},i))}));function h(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,s=new Array(o);s[0]=g;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=n,u[p]="string"==typeof n?n:r,s[1]=u;for(var l=2;l<o;l++)s[l]=e[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,e)}g.displayName="MDXCreateElement"},4868:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var a=e(7462),r=(e(7294),e(3905));const o={title:"Hash & Map Cheatsheet"},s=void 0,u={unversionedId:"cheatsheet/algorithm/hash-map",id:"cheatsheet/algorithm/hash-map",title:"Hash & Map Cheatsheet",description:"Contains Duplicate",source:"@site/docs/cheatsheet/algorithm/hash-map.md",sourceDirName:"cheatsheet/algorithm",slug:"/cheatsheet/algorithm/hash-map",permalink:"/docs/cheatsheet/algorithm/hash-map",draft:!1,tags:[],version:"current",frontMatter:{title:"Hash & Map Cheatsheet"},sidebar:"cheatsheet",previous:{title:"Fundamental CheatSheet",permalink:"/docs/cheatsheet/go/core"},next:{title:"Two Pointer Cheatsheet",permalink:"/docs/cheatsheet/algorithm/two-pointer"}},c={},l=[{value:"Contains Duplicate",id:"contains-duplicate",level:3},{value:"Valid Anagram",id:"valid-anagram",level:3},{value:"Two Sum",id:"two-sum",level:3},{value:"Group Anagrams",id:"group-anagrams",level:3}],i={toc:l},p="wrapper";function m(n){let{components:t,...e}=n;return(0,r.kt)(p,(0,a.Z)({},i,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"contains-duplicate"},"Contains Duplicate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function containsDuplicate(nums: number[]): boolean {\n  const seen = new Set<number>();\n  for (const num of nums) {\n    if (seen.has(num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n  return false;\n}\n\n// Example Test Cases\nconst test1 = [1, 2, 3, 1];\nconst test2 = [1, 2, 3, 4];\nconst test3 = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2];\n\nconsole.log(containsDuplicate(test1)); // Output: true\nconsole.log(containsDuplicate(test2)); // Output: false\nconsole.log(containsDuplicate(test3)); // Output: true\n")),(0,r.kt)("h3",{id:"valid-anagram"},"Valid Anagram"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function isAnagram(s: string, t: string): boolean {\n  if (s.length !== t.length) return false;\n\n  const charCount: Map<string, number> = new Map();\n\n  // Count characters in string s\n  for (const char of s) {\n    charCount.set(char, (charCount.get(char) || 0) + 1);\n  }\n\n  // Decrement counts based on string t\n  for (const char of t) {\n    if (!charCount.has(char)) {\n      // Character not found in s\n      return false;\n    }\n    const count = charCount.get(char)! - 1;\n    if (count < 0) {\n      // More occurrences in t than in s\n      return false;\n    }\n    charCount.set(char, count);\n  }\n\n  // Optional: Verify all counts are zero\n  for (const count of charCount.values()) {\n    if (count !== 0) return false;\n  }\n\n  return true;\n}\n\n// Example Test Cases\nconst anagram1_s = "anagram";\nconst anagram1_t = "nagaram";\nconst anagram2_s = "rat";\nconst anagram2_t = "car";\n\nconsole.log(isAnagram(anagram1_s, anagram1_t)); // Output: true\nconsole.log(isAnagram(anagram2_s, anagram2_t)); // Output: false\n')),(0,r.kt)("h3",{id:"two-sum"},"Two Sum"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function twoSum(nums: number[], target: number): number[] {\n  const numMap = new Map<number, number>(); // Map to store number and its index\n\n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (numMap.has(complement)) {\n      return [numMap.get(complement)!, i];\n    }\n    numMap.set(nums[i], i);\n  }\n\n  return [];\n}\n\n// Example Test Cases\nconst nums1 = [2, 7, 11, 15];\nconst target1 = 9;\nconst nums2 = [3, 2, 4];\nconst target2 = 6;\nconst nums3 = [3, 3];\nconst target3 = 6;\n\nconsole.log(twoSum(nums1, target1)); // Output: [0, 1]\nconsole.log(twoSum(nums2, target2)); // Output: [1, 2]\nconsole.log(twoSum(nums3, target3)); // Output: [0, 1]\n")),(0,r.kt)("h3",{id:"group-anagrams"},"Group Anagrams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function groupAnagrams(strs: string[]): string[][] {\n  const map = new Map<string, string[]>();\n\n  for (const str of strs) {\n    const sorted = str.split("").sort().join("");\n    if (map.has(sorted)) {\n      map.get(sorted)!.push(str);\n    } else {\n      map.set(sorted, [str]);\n    }\n  }\n\n  return Array.from(map.values());\n}\n\n// Example Test Cases\nconst group1 = ["eat", "tea", "tan", "ate", "nat", "bat"];\nconst group2 = [""];\nconst group3 = ["a"];\n\nconsole.log(groupAnagrams(group1));\n// Output: [["eat","tea","ate"],["tan","nat"],["bat"]]\n\nconsole.log(groupAnagrams(group2));\n// Output: [[""]]\n\nconsole.log(groupAnagrams(group3));\n// Output: [["a"]]\n')))}m.isMDXComponent=!0}}]);