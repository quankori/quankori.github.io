"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2538],{3905:(n,t,e)=>{e.d(t,{Zo:()=>l,kt:()=>d});var r=e(7294);function h(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function c(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?c(Object(e),!0).forEach((function(t){h(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,r,h=function(n,t){if(null==n)return{};var e,r,h={},c=Object.keys(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||(h[e]=n[e]);return h}(n,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(h[e]=n[e])}return h}var a=r.createContext({}),s=function(n){var t=r.useContext(a),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},l=function(n){var t=s(n.components);return r.createElement(a.Provider,{value:t},n.children)},g="mdxType",u={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(n,t){var e=n.components,h=n.mdxType,c=n.originalType,a=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),g=s(e),p=h,d=g["".concat(a,".").concat(p)]||g[p]||u[p]||c;return e?r.createElement(d,i(i({ref:t},l),{},{components:e})):r.createElement(d,i({ref:t},l))}));function d(n,t){var e=arguments,h=t&&t.mdxType;if("string"==typeof n||h){var c=e.length,i=new Array(c);i[0]=p;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=n,o[g]="string"==typeof n?n:h,i[1]=o;for(var s=2;s<c;s++)i[s]=e[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}p.displayName="MDXCreateElement"},5095:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>s});var r=e(7462),h=(e(7294),e(3905));const c={title:"Process v\xe0 Thread trong Node.js"},i=void 0,o={unversionedId:"blog/process-nodejs",id:"blog/process-nodejs",title:"Process v\xe0 Thread trong Node.js",description:"Sau khi tr\u1ea3i qua n l\u1ea7n ph\u1ecfng v\u1ea5n cho v\u1ecb tr\xed Node.js Developer, t\xf4i \u0111\xe3 g\u1eb7p nhi\u1ec1u c\xe2u h\u1ecfi xoay quanh c\xe1c v\u1ea5n \u0111\u1ec1 nh\u01b0 Event Loop, Scope, Non Blocking I/O, Asynchronous,... \u0110\xe2y l\xe0 nh\u1eefng c\xe2u h\u1ecfi ph\u1ed5 bi\u1ebfn khi ph\u1ecfng v\u1ea5n cho v\u1ecb tr\xed Node.js Developer. Tuy nhi\xean, ngo\xe0i nh\u1eefng c\xe2u h\u1ecfi \u0111\xf3, c\xf2n c\xf3 m\u1ed9t s\u1ed1 c\xe2u h\u1ecfi khi\u1ebfn t\xf4i t\xf2 m\xf2 v\u1ec1 c\xe1ch qu\u1ea3n l\xfd v\xe0 m\u1edf r\u1ed9ng thread, process trong Node.js. T\xf4i t\u1eebng nghe v\xe0 t\xecm hi\u1ec3u v\u1ec1 c\xe1c kh\xe1i ni\u1ec7m Cluster, Child Process v\xe0 Worker Threads trong c\xe1c b\xe0i blog, nh\u01b0ng th\u1ef1c t\u1ebf th\xec t\xf4i \xedt khi \u0111\u01b0\u1ee3c \xe1p d\u1ee5ng v\xe0 hi\u1ec3u v\u1ec1 c\u01a1 ch\u1ebf \u0111\u1eb7c bi\u1ec7t n\xe0y c\u1ee7a Node.js. \ud83d\ude02",source:"@site/docs/blog/1-process-nodejs.md",sourceDirName:"blog",slug:"/blog/process-nodejs",permalink:"/docs/blog/process-nodejs",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Process v\xe0 Thread trong Node.js"},sidebar:"blogs"},a={},s=[{value:"Kh\xe1i ni\u1ec7m v\u1ec1 Process v\xe0 Thread",id:"kh\xe1i-ni\u1ec7m-v\u1ec1-process-v\xe0-thread",level:2},{value:"Process",id:"process",level:3},{value:"Thread",id:"thread",level:3},{value:"Worker Threads l\xe0 g\xec",id:"worker-threads-l\xe0-g\xec",level:2},{value:"Child Process",id:"child-process",level:2},{value:"Cluster trong Node.js",id:"cluster-trong-nodejs",level:2},{value:"PM2",id:"pm2",level:3},{value:"T\xf3m t\u1eaft",id:"t\xf3m-t\u1eaft",level:2},{value:"Ngu\u1ed3n",id:"ngu\u1ed3n",level:2}],l={toc:s},g="wrapper";function u(n){let{components:t,...e}=n;return(0,h.kt)(g,(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,h.kt)("p",null,"Sau khi tr\u1ea3i qua n l\u1ea7n ph\u1ecfng v\u1ea5n cho v\u1ecb tr\xed Node.js Developer, t\xf4i \u0111\xe3 g\u1eb7p nhi\u1ec1u c\xe2u h\u1ecfi xoay quanh c\xe1c v\u1ea5n \u0111\u1ec1 nh\u01b0 Event Loop, Scope, Non Blocking I/O, Asynchronous,... \u0110\xe2y l\xe0 nh\u1eefng c\xe2u h\u1ecfi ph\u1ed5 bi\u1ebfn khi ph\u1ecfng v\u1ea5n cho v\u1ecb tr\xed Node.js Developer. Tuy nhi\xean, ngo\xe0i nh\u1eefng c\xe2u h\u1ecfi \u0111\xf3, c\xf2n c\xf3 m\u1ed9t s\u1ed1 c\xe2u h\u1ecfi khi\u1ebfn t\xf4i t\xf2 m\xf2 v\u1ec1 c\xe1ch qu\u1ea3n l\xfd v\xe0 m\u1edf r\u1ed9ng ",(0,h.kt)("strong",{parentName:"p"},"thread"),", ",(0,h.kt)("strong",{parentName:"p"},"process")," trong Node.js. T\xf4i t\u1eebng nghe v\xe0 t\xecm hi\u1ec3u v\u1ec1 c\xe1c kh\xe1i ni\u1ec7m ",(0,h.kt)("strong",{parentName:"p"},"Cluster"),", ",(0,h.kt)("strong",{parentName:"p"},"Child Process")," v\xe0 ",(0,h.kt)("strong",{parentName:"p"},"Worker Threads")," trong c\xe1c b\xe0i blog, nh\u01b0ng th\u1ef1c t\u1ebf th\xec t\xf4i \xedt khi \u0111\u01b0\u1ee3c \xe1p d\u1ee5ng v\xe0 hi\u1ec3u v\u1ec1 c\u01a1 ch\u1ebf \u0111\u1eb7c bi\u1ec7t n\xe0y c\u1ee7a Node.js. \ud83d\ude02"),(0,h.kt)("p",null,"Tuy nhi\xean, \u0111\u1ec3 hi\u1ec3u r\xf5 s\u1ee9c m\u1ea1nh c\u1ee7a Node.js trong vi\u1ec7c n\xe0y, ch\xfang ta c\u1ea7n b\u1eaft \u0111\u1ea7u t\u1eeb nh\u1eefng kh\xe1i ni\u1ec7m c\u0103n b\u1ea3n: ",(0,h.kt)("strong",{parentName:"p"},"Process")," v\xe0 ",(0,h.kt)("strong",{parentName:"p"},"Thread")," trong l\u1eadp tr\xecnh. C\u1ea3 hai \u0111\u1ec1u l\xe0 n\u1ec1n t\u1ea3ng c\u01a1 b\u1ea3n cho b\u1ea5t k\u1ef3 h\u1ec7 th\u1ed1ng x\u1eed l\xfd \u0111a t\xe1c v\u1ee5 n\xe0o, v\xe0 hi\u1ec3u bi\u1ebft v\u1eefng ch\u1eafc v\u1ec1 ch\xfang s\u1ebd gi\xfap ta kh\xe1m ph\xe1 s\xe2u h\u01a1n v\u1ec1 c\xe1ch Node.js s\u1eed d\u1ee5ng ch\xfang \u0111\u1ec3 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t v\xe0 kh\xf4ng ch\u1ec9 gi\u1edbi h\u1ea1n \u1edf Node.js c\xf2n nhi\u1ec1u ng\xf4n ng\u1eef l\u1eadp tr\xecnh kh\xe1c c\u0169ng xoay quanh v\u1ec1 n\xe0y."),(0,h.kt)("h2",{id:"kh\xe1i-ni\u1ec7m-v\u1ec1-process-v\xe0-thread"},"Kh\xe1i ni\u1ec7m v\u1ec1 Process v\xe0 Thread"),(0,h.kt)("p",null,(0,h.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/8.PNG",alt:"Image"})),(0,h.kt)("h3",{id:"process"},"Process"),(0,h.kt)("p",null,"Nh\u01b0 tr\xean h\xecnh, Process bao g\u1ed3m c\xe1c ph\u1ea7n Thread v\xe0 Memory. Process \u0111\u1ea1i di\u1ec7n cho 1 ti\u1ebfn tr\xecnh di\u1ec5n ra, ti\u1ebfn tr\xecnh \u1edf \u0111\xe2y c\xf3 th\u1ec3 h\xecnh dung khi b\u1ea1n m\u1edf 1 tr\xecnh duy\u1ec7t ho\u1eb7c ch\u1ea1y m\u1ed9t ch\u01b0\u01a1ng tr\xecnh th\xec l\xfac n\xe0y t\u1ea1o ra m\u1ed9t ti\u1ebfn tr\xecnh."),(0,h.kt)("p",null,"C\xe1c th\xe0nh ph\u1ea7n c\u1ee7a 1 ti\u1ebfn tr\xecnh (Process) khi ch\u1ea1y \u0111\u01b0\u1ee3c h\u1ec7 \u0111i\u1ec1u h\xe0nh c\u1ea5p:"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"M\xe3 \u0111\u1ecbnh danh ti\u1ebfn tr\xecnh g\u1ecdi l\xe0 PID."),(0,h.kt)("li",{parentName:"ul"},"\xcdt nh\u1ea5t m\u1ed9t main thread cho process, main thread t\u1eaft th\xec process c\u0169ng t\u1eaft theo."),(0,h.kt)("li",{parentName:"ul"},"V\xf9ng nh\u1edb cho Process, nh\u01b0 trong h\xecnh l\xe0 ph\u1ea7n m\xe0u tr\u1eafng. V\u1edbi b\u1ed9 nh\u1edb chung l\xe0 Heap (ph\u1ea7n m\xe0u xanh d\u01b0\u01a1ng)")),(0,h.kt)("h3",{id:"thread"},"Thread"),(0,h.kt)("p",null,"Thread l\xe0 m\u1ed9t lu\u1ed3ng trong ti\u1ebfn tr\xecnh, nh\u01b0 trong h\xecnh th\xec trong c\xe1c thread s\u1ebd c\xf3 hai th\xe0nh ph\u1ea7n ch\xednh l\xe0:"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},(0,h.kt)("strong",{parentName:"li"},"Registers")," c\xf3 th\u1ec3 hi\u1ec3u l\xe0 n\u01a1i l\u01b0u tr\u1eef bi\u1ebfn t\u1ea1m th\u1eddi khi th\u1ef1c thi thread"),(0,h.kt)("li",{parentName:"ul"},(0,h.kt)("strong",{parentName:"li"},"Stack")," l\xe0 v\xf9ng nh\u1edb trong thread \u0111\u01b0\u1ee3c c\u1ea5p kho\u1ea3ng 1-2 MB")),(0,h.kt)("p",null,"V\xe0 ngo\xe0i ra c\xe1c thread s\u1ebd x\xe0i chung v\xf9ng b\u1ed9 nh\u1edb chung l\xe0 Heap (v\xf9ng xanh d\u01b0\u01a1ng). Tuy nhi\xean, khi qu\u1ea3n l\xfd multi thread ch\xfang ta s\u1ebd g\u1eb7p m\u1ed9t s\u1ed1 thu\u1eadt v\u1ea5n \u0111\u1ec1 sau:"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"Khi process t\u1ea1o qu\xe1 nhi\u1ec1u thread s\u1ebd b\u1ecb l\u1ed7i ",(0,h.kt)("strong",{parentName:"li"},"stack overflow")),(0,h.kt)("li",{parentName:"ul"},"Khi thread s\u1eed d\u1ee5ng chung b\u1ed9 nh\u1edb Heap b\u1ecb xung \u0111\u1ed9t d\u1eef li\u1ec7u s\u1ebd x\u1ea3y ra l\u1ed7i ",(0,h.kt)("strong",{parentName:"li"},"race condition")),(0,h.kt)("li",{parentName:"ul"},"S\u1ed1 l\u01b0\u1ee3ng thread ch\u1ea1y song song m\u1ed9t th\u1eddi \u0111i\u1ec3m s\u1ebd b\u1eb1ng s\u1ed1 l\u01b0\u1ee3ng CPU m\xe0 ch\xfang ta \u0111ang c\xf3 => nhi\u1ec1u thread kh\xf4ng gi\xfap nhanh h\u01a1n. Th\u01b0\u1eddng s\u1ebd l\xe0 s\u1ed1 thread ch\u1ea1y song song = s\u1ed1 core CPU ","*"," 2 \ud83e\uddd0")),(0,h.kt)("h2",{id:"worker-threads-l\xe0-g\xec"},"Worker Threads l\xe0 g\xec"),(0,h.kt)("p",null,"Trong m\u1ed9t s\u1ed1 kh\xe1i ni\u1ec7m c\u1ed1t l\xf5i c\u1ee7a Node.js, m\u1ed9t th\u1eddi gian d\xe0i n\xf3 \u0111\u01b0\u1ee3c xem l\xe0 m\u1ed9t m\xf4i tr\u01b0\u1eddng \u0111\u01a1n lu\u1ed3ng (single thread). Tuy nhi\xean, t\u1eeb phi\xean b\u1ea3n 10.5 tr\u1edf \u0111i, Node.js \u0111\xe3 gi\u1edbi thi\u1ec7u t\xednh n\u0103ng ",(0,h.kt)("inlineCode",{parentName:"p"},"worker_thread")," v\xe0 t\u1eeb phi\xean b\u1ea3n 12, t\xednh n\u0103ng n\xe0y \u0111\xe3 tr\u1edf th\xe0nh \u1ed5n \u0111\u1ecbnh. \u0110i\u1ec1u n\xe0y \u0111\xe3 m\u1edf ra c\xe1nh c\u1eeda cho m\u1ed9t s\u1ef1 c\u1ea3i ti\u1ebfn m\u1edbi v\u1ec1 vi\u1ec7c s\u1eed d\u1ee5ng \u0111a lu\u1ed3ng (multi-thread) trong Node.js."),(0,h.kt)("p",null,"Nh\u01b0ng t\u1ea1i sao l\u1ea1i c\u1ea7n t\xednh n\u0103ng \u0111a lu\u1ed3ng (worker_thread) khi Node.js \u0111ang c\xf3 \u01b0u \u0111i\u1ec3m l\xe0 \u0111\u01a1n lu\u1ed3ng?"),(0,h.kt)("p",null,"Tr\u01b0\u1edbc khi n\xf3i v\u1ec1 l\u1ee3i \xedch c\u1ee7a worker_thread, ch\xfang ta h\xe3y xem x\xe9t c\xe1c h\u1ea1n ch\u1ebf v\xe0 \u0111i\u1ec3m y\u1ebfu c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng \u0111\u01a1n lu\u1ed3ng. D\xf9 th\u1ef1c hi\u1ec7n c\xe1c t\xe1c v\u1ee5 kh\xf4ng \u0111\u1ed3ng b\u1ed9 (non-blocking) gi\xfap \u0111\u1ecbnh h\xecnh s\u1ee9c m\u1ea1nh c\u1ee7a \u0111\u01a1n lu\u1ed3ng, nh\u01b0ng n\xf3 v\u1eabn b\u1ecb gi\u1edbi h\u1ea1n trong vi\u1ec7c x\u1eed l\xfd c\xe1c t\xe1c v\u1ee5 n\u1eb7ng v\u1ec1 CPU. \u0110i\u1ec1u n\xe0y c\xf3 th\u1ec3 g\xe2y \u1ea3nh h\u01b0\u1edfng t\u1edbi hi\u1ec7u su\u1ea5t c\u1ee7a Event Loop b\u1eb1ng c\xe1ch l\xe0m ch\u1eadm ho\u1eb7c ch\u1eb7n n\xf3. V\xec v\u1eady, worker_thread ra \u0111\u1eddi nh\u1eb1m kh\u1eafc ph\u1ee5c h\u1ea1n ch\u1ebf n\xe0y b\u1eb1ng c\xe1ch t\u1ea1o ra nh\u1eefng lu\u1ed3ng ri\xeang bi\u1ec7t, gi\xfap gi\u1ea3m t\u1ea3i cho Event Loop ch\xednh v\xe0 c\u1ea3i thi\u1ec7n hi\u1ec7u su\u1ea5t."),(0,h.kt)("p",null,"Khi \u0111\u01b0\u1ee3c t\u1ea1o ra, m\u1ed7i lu\u1ed3ng trong worker_thread s\u1ebd c\xf3 m\u1ed9t v\xf9ng nh\u1edb stack v\xe0 heap ri\xeang, gi\xfap tr\xe1nh c\xe1c l\u1ed7i li\xean quan \u0111\u1ebfn ",(0,h.kt)("inlineCode",{parentName:"p"},"stack overflow"),". Th\xf4ng qua vi\u1ec7c truy\u1ec1n tin nh\u1eafn (message passing), c\xe1c lu\u1ed3ng n\xe0y c\xf3 th\u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi nhau m\xe0 kh\xf4ng g\u1eb7p nh\u1eefng v\u1ea5n \u0111\u1ec1 th\xf4ng th\u01b0\u1eddng c\u1ee7a \u0111a lu\u1ed3ng nh\u01b0 deadlocks hay race conditions. Tuy nhi\xean, qu\xe1 tr\xecnh chuy\u1ec3n \u0111\u1ed5i ng\u1eef c\u1ea3nh (",(0,h.kt)("inlineCode",{parentName:"p"},"context switching"),") gi\u1eefa c\xe1c lu\u1ed3ng c\u0169ng c\xf3 th\u1ec3 l\xe0m gi\u1ea3m hi\u1ec7u su\u1ea5t khi c\xf3 qu\xe1 nhi\u1ec1u lu\u1ed3ng \u0111\u01b0\u1ee3c t\u1ea1o ra."),(0,h.kt)("p",null,(0,h.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/worker-thread.jpg",alt:"Image"})),(0,h.kt)("p",null,(0,h.kt)("strong",{parentName:"p"},"Use Case"),":"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"T\xednh To\xe1n Song Song: Khi b\u1ea1n c\u1ea7n th\u1ef1c hi\u1ec7n c\xe1c t\xe1c v\u1ee5 t\xednh to\xe1n ph\u1ee9c t\u1ea1p m\xe0 c\xf3 th\u1ec3 chia nh\u1ecf v\xe0 th\u1ef1c hi\u1ec7n song song, nh\u01b0 x\u1eed l\xfd \u1ea3nh ho\u1eb7c t\xednh to\xe1n khoa h\u1ecdc."),(0,h.kt)("li",{parentName:"ul"},"T\u1ed1i \u01afu Hi\u1ec7u Su\u1ea5t CPU \u0110a L\xf5i: Khi b\u1ea1n mu\u1ed1n t\u1eadn d\u1ee5ng t\u1ed1i \u0111a s\u1ee9c m\u1ea1nh c\u1ee7a CPU \u0111a l\xf5i b\u1eb1ng c\xe1ch ph\xe2n ph\u1ed1i c\xe1c t\xe1c v\u1ee5 t\xednh to\xe1n t\u1edbi c\xe1c lu\u1ed3ng kh\xe1c nhau."),(0,h.kt)("li",{parentName:"ul"},"Trao \u0110\u1ed5i D\u1eef Li\u1ec7u Nhanh Ch\xf3ng: Khi c\u1ea7n trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\xe1c lu\u1ed3ng m\u1ed9t c\xe1ch nhanh ch\xf3ng v\xe0 hi\u1ec7u qu\u1ea3 th\xf4ng qua SharedArrayBuffer.")),(0,h.kt)("p",null,"M\u1ed9t v\xed d\u1ee5 v\u1ec1 Worker Threads trong b\xe0i to\xe1n n\xe9n file"),(0,h.kt)("p",null,(0,h.kt)("inlineCode",{parentName:"p"},"child-thread.js")),(0,h.kt)("pre",null,(0,h.kt)("code",{parentName:"pre",className:"language-js"},'const { parentPort } = require("worker_threads");\nconst JSZip = require("jszip");\nconst fs = require("fs");\nconst path = require("path");\n\nparentPort.on("message", async () => {\n  const imagesDirectory = path.join(__dirname, "images");\n  const zip = new JSZip();\n\n  fs.readdirSync(imagesDirectory).forEach((file) => {\n    const filePath = path.join(imagesDirectory, file);\n    const data = fs.readFileSync(filePath);\n    zip.file(file, data);\n  });\n\n  const zipData = await zip.generateAsync({ type: "nodebuffer" });\n  fs.writeFileSync(path.join(__dirname, "output.zip"), zipData);\n  parentPort.postMessage("File zip \u0111\xe3 \u0111\u01b0\u1ee3c t\u1ea1o: output.zip");\n});\n')),(0,h.kt)("p",null,(0,h.kt)("inlineCode",{parentName:"p"},"main-thread.js")),(0,h.kt)("pre",null,(0,h.kt)("code",{parentName:"pre",className:"language-js"},'const { Worker } = require("worker_threads");\n\n// T\u1ea1o Worker Thread th\u1ee9 nh\u1ea5t\nconst worker1 = new Worker("./src/worker-thread/child-thread.js");\nworker1.on("message", (message) =>\n  console.log("Tin nh\u1eafn t\u1eeb Worker 1:", message)\n);\nworker1.on("error", (error) => {\n  console.error(error);\n});\nworker1.on("exit", (code) => {\n  if (code !== 0) console.error(`Worker stopped with exit code ${code}`);\n});\nworker1.postMessage("D\u1eef li\u1ec7u cho Worker 1");\n\n// T\u1ea1o Worker Thread th\u1ee9 hai\nconst worker2 = new Worker("./src/worker-thread/child-thread.js");\nworker2.on("message", (message) =>\n  console.log("Tin nh\u1eafn t\u1eeb Worker 2:", message)\n);\nworker2.postMessage("D\u1eef li\u1ec7u cho Worker 2");\n')),(0,h.kt)("h2",{id:"child-process"},"Child Process"),(0,h.kt)("p",null,"Theo m\xf4 h\xecnh tr\xean th\xec child process l\xe0 vi\u1ec7c ch\xfang ta t\xe1ch t\u1eeb 1 process ch\xednh ra 1 process con kh\xe1c v\xe0 ch\u1ea1y \u0111\u1ed9c l\u1eadp k\u1ec3 c\u1ea3 khi process ch\xednh \u0111\xe3 xong ho\u1eb7c ng\u1ee7m. Nh\u01b0ng m\xe0 t\u1ea1i sao \u0111\xe3 c\xf3 worker-thread n\xe0y l\u1ea1i th\xeam child-process?"),(0,h.kt)("p",null,"B\u1ea3n ch\u1ea5t c\u1ea3 2 c\u0169ng kh\xe1 kh\xe1c nhau, child-process th\xec t\u1ea1o ra 1 process kh\xe1c c\xf3 b\u1ed9 nh\u1edb ri\xeang, bi\u1ebfn m\xf4i tr\u01b0\u1eddng ri\xeang v\xe0 kh\xf4ng \u1ea3nh h\u01b0\u1edfng nhau, trong process ch\xednh c\xf2n worker thread th\xec t\u1ea1o ra 1 thread kh\xe1c nh\u01b0ng v\u1eabn t\u1ed3n t\u1ea1i tr\xean process ch\xednh."),(0,h.kt)("p",null,"Tuy nhi\xean n\xf3 c\u0169ng s\u1ebd c\xf3 m\u1ed9t v\xe0i r\u0169i ro nh\u1ea5t \u0111\u1ecbnh nh\u01b0 l\xe0: \u1ea3nh h\u01b0\u1edfng IPC, child process kh\xf4ng k\u1ebft th\xfac hay l\xe0 vi\u1ec7c kh\u1edfi t\u1ea1o qu\xe1 nhi\u1ec1u process do code c\u0169ng s\u1ebd \u1ea3nh h\u01b0\u1edfng kh\xe1 nhi\u1ec1u \u0111\u1ebfn vi\u1ec7c s\u1ee7 d\u1ee5ng qu\xe1 nhi\u1ec1u t\xe0i nguy\xean CPU server."),(0,h.kt)("p",null,"\u0110\xe2y l\xe0 m\u1ed9t v\xed d\u1ee5 xem th\u1eedu child process ho\u1ea1t \u0111\u1ed9ng"),(0,h.kt)("pre",null,(0,h.kt)("code",{parentName:"pre",className:"language-js"},'const { spawn } = require("child_process");\n\n// Kh\u1edfi t\u1ea1o child process \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t t\xe1c v\u1ee5 (v\xed d\u1ee5: sleep trong bash)\nconst child = spawn("sleep", ["5"]); // \'sleep 5\' l\xe0 l\u1ec7nh \u0111\u1ec3 ch\u1edd 5 gi\xe2y\n\n// L\u1eafng nghe s\u1ef1 ki\u1ec7n khi child process k\u1ebft th\xfac\nchild.on("exit", function (code, signal) {\n  console.log("Child process exited with code", code);\n});\n\n// Main process ghi ra console ngay l\u1eadp t\u1ee9c\nconsole.log("Main process logged this message first.");\n')),(0,h.kt)("p",null,"M\u1ed9t v\xed d\u1ee5 v\u1ec1 child process v\u1edbi IPC (Inter-Process Communication)"),(0,h.kt)("pre",null,(0,h.kt)("code",{parentName:"pre",className:"language-js"},'const { fork } = require("child_process");\n\nconst child = fork("path/to/child_script.js");\n\n// G\u1eedi tin nh\u1eafn t\u1eeb parent process \u0111\u1ebfn child process\nchild.send({ hello: "world" });\n\n// Nh\u1eadn tin nh\u1eafn t\u1eeb child process\nchild.on("message", (message) => {\n  console.log("Message from child", message);\n});\n\n// Trong child script\nprocess.on("message", (message) => {\n  console.log("Message from parent:", message);\n\n  // G\u1eedi tin nh\u1eafn tr\u1edf l\u1ea1i parent process\n  process.send({ foo: "bar" });\n});\n')),(0,h.kt)("p",null,"M\u1ed9t v\xed d\u1ee5 kh\xe1c v\u1ec1 th\u01b0 thi m\xe3 linux"),(0,h.kt)("pre",null,(0,h.kt)("code",{parentName:"pre",className:"language-js"},'const { exec } = require("child_process");\n\n// Th\u1ef1c thi m\u1ed9t l\u1ec7nh Linux\nexec("ls", (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n\n  if (stderr) {\n    console.error(`stderr: ${stderr}`);\n    return;\n  }\n\n  console.log(`stdout: ${stdout}`);\n});\n')),(0,h.kt)("p",null,(0,h.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/child-process.jpg",alt:"Image"})),(0,h.kt)("p",null,(0,h.kt)("strong",{parentName:"p"},"Use Case"),":"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"Th\u1ef1c Hi\u1ec7n T\xe1c V\u1ee5 \u0110\u1ed9c L\u1eadp: Khi b\u1ea1n c\u1ea7n th\u1ef1c hi\u1ec7n t\xe1c v\u1ee5 kh\xf4ng li\xean quan tr\u1ef1c ti\u1ebfp t\u1edbi logic ch\xednh c\u1ee7a \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n, nh\u01b0 vi\u1ec7c ch\u1ea1y m\u1ed9t script shell ho\u1eb7c giao ti\u1ebfp v\u1edbi c\xe1c \u1ee9ng d\u1ee5ng kh\xe1c."),(0,h.kt)("li",{parentName:"ul"},"X\u1eed L\xfd T\xe1c V\u1ee5 N\u1eb7ng: Khi m\u1ed9t t\xe1c v\u1ee5 c\u1ea7n nhi\u1ec1u t\xe0i nguy\xean CPU ho\u1eb7c b\u1ed9 nh\u1edb v\xe0 b\u1ea1n kh\xf4ng mu\u1ed1n n\xf3 \u1ea3nh h\u01b0\u1edfng t\u1edbi ti\u1ebfn tr\xecnh ch\xednh."),(0,h.kt)("li",{parentName:"ul"},"C\xf4 L\u1eadp T\xe1c V\u1ee5: \u0110\u1ed1i v\u1edbi c\xe1c t\xe1c v\u1ee5 m\xe0 b\u1ea1n mu\u1ed1n c\xf4 l\u1eadp ho\xe0n to\xe0n v\u1edbi m\xf4i tr\u01b0\u1eddng c\u1ee7a ti\u1ebfn tr\xecnh ch\xednh, nh\u01b0 x\u1eed l\xfd d\u1eef li\u1ec7u nh\u1ea1y c\u1ea3m.")),(0,h.kt)("h2",{id:"cluster-trong-nodejs"},"Cluster trong Node.js"),(0,h.kt)("p",null,"(T\xe1c gi\u1ea3 l\u01b0\u1eddi...)"),(0,h.kt)("p",null,(0,h.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/cluster.jpg",alt:"Image"})),(0,h.kt)("p",null,(0,h.kt)("strong",{parentName:"p"},"Use Case"),":"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"X\u1eed L\xfd C\xf4ng Vi\u1ec7c Song Song \u1edf C\u1ea5p \u0110\u1ed9 Ti\u1ebfn Tr\xecnh: Khi b\u1ea1n mu\u1ed1n ph\xe2n ph\u1ed1i c\xe1c y\xeau c\u1ea7u m\u1ea1ng t\u1edbi nhi\u1ec1u ti\u1ebfn tr\xecnh con \u0111\u1ec3 t\u0103ng hi\u1ec7u su\u1ea5t x\u1eed l\xfd v\xe0 kh\u1ea3 n\u0103ng ch\u1ecbu t\u1ea3i."),(0,h.kt)("li",{parentName:"ul"},"T\u0103ng Kh\u1ea3 N\u0103ng Ch\u1ecbu L\u1ed7i: Khi m\u1ed9t ti\u1ebfn tr\xecnh con g\u1eb7p s\u1ef1 c\u1ed1 v\xe0 c\u1ea7n kh\u1edfi \u0111\u1ed9ng l\u1ea1i, c\xe1c ti\u1ebfn tr\xecnh kh\xe1c trong cluster v\u1eabn c\xf3 th\u1ec3 ti\u1ebfp t\u1ee5c x\u1eed l\xfd y\xeau c\u1ea7u."),(0,h.kt)("li",{parentName:"ul"},"Ph\xe2n Ph\u1ed1i T\u1ea3i Trong \u1ee8ng D\u1ee5ng Web: S\u1eed d\u1ee5ng cluster trong m\u1ed9t \u1ee9ng d\u1ee5ng web c\xf3 l\u01b0u l\u01b0\u1ee3ng truy c\u1eadp cao \u0111\u1ec3 ph\xe2n ph\u1ed1i t\u1ea3i gi\u1eefa c\xe1c ti\u1ebfn tr\xecnh v\xe0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t.")),(0,h.kt)("h3",{id:"pm2"},"PM2"),(0,h.kt)("p",null,"(T\xe1c gi\u1ea3 l\u01b0\u1eddi...)"),(0,h.kt)("h2",{id:"t\xf3m-t\u1eaft"},"T\xf3m t\u1eaft"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},(0,h.kt)("strong",{parentName:"li"},"Child Process"),": T\u1ed1t cho vi\u1ec7c c\xf4 l\u1eadp v\xe0 ch\u1ea1y t\xe1c v\u1ee5 \u0111\u1ed9c l\u1eadp ho\u1eb7c t\u01b0\u01a1ng t\xe1c v\u1edbi c\xe1c ti\u1ebfn tr\xecnh kh\xe1c b\xean ngo\xe0i."),(0,h.kt)("li",{parentName:"ul"},(0,h.kt)("strong",{parentName:"li"},"Worker Threads"),": Ph\xf9 h\u1ee3p cho vi\u1ec7c x\u1eed l\xfd song song v\xe0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t tr\xean c\xe1c m\xe1y t\xednh c\xf3 CPU \u0111a l\xf5i."),(0,h.kt)("li",{parentName:"ul"},(0,h.kt)("strong",{parentName:"li"},"Cluster"),": L\xfd t\u01b0\u1edfng cho vi\u1ec7c x\u1eed l\xfd nhi\u1ec1u y\xeau c\u1ea7u m\u1ea1ng song song, t\u0103ng kh\u1ea3 n\u0103ng ch\u1ecbu t\u1ea3i v\xe0 kh\u1ea3 n\u0103ng ch\u1ecbu l\u1ed7i cho \u1ee9ng d\u1ee5ng.")),(0,h.kt)("h2",{id:"ngu\u1ed3n"},"Ngu\u1ed3n"),(0,h.kt)("ul",null,(0,h.kt)("li",{parentName:"ul"},"M\u1ed9t cu\u1ed1n s\xe1ch kh\xe1 hay n\xf3i v\u1ec1 vi\u1ec7c qu\u1ea3n l\xfd thread v\xe0 process l\xe0\n",(0,h.kt)("a",{parentName:"li",href:"https://zalopay-oss.github.io/go-advanced/ch1-basic/ch1-05-concurrency-parallelism.html"},"Go Advanced - ZaloPay"),", \u0111\xe2y l\xe0 cu\u1ed1n s\xe1ch v\u1ec1 Golang do team ZaloPay public, d\xf9 kh\xf4ng d\xednh v\u1ec1 Node.js nh\u01b0ng v\u1ec1 Process v\xe0 Thread th\xec r\u1ea5t \u0111\u1ea7y \u0111\u1ee7")))}u.isMDXComponent=!0}}]);