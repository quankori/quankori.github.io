"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2369],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>g});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=a.createContext({}),l=function(e){var n=a.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=t,g=u["".concat(c,".").concat(m)]||u[m]||f[m]||o;return r?a.createElement(g,s(s({ref:n},p),{},{components:r})):a.createElement(g,s({ref:n},p))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:t,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5599:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7462),t=(r(7294),r(3905));const o={title:"Publish & Subscribe in Kafka"},s=void 0,i={unversionedId:"examples/go/kafka",id:"examples/go/kafka",title:"Publish & Subscribe in Kafka",description:"Docker-compose example for Kafka",source:"@site/docs/examples/go/kafka.md",sourceDirName:"examples/go",slug:"/examples/go/kafka",permalink:"/docs/examples/go/kafka",draft:!1,tags:[],version:"current",frontMatter:{title:"Publish & Subscribe in Kafka"},sidebar:"examples",previous:{title:"Proof Of Work",permalink:"/docs/examples/go/pow"},next:{title:"MongoDB Read Replicate",permalink:"/docs/examples/docker/mongo_replicate"}},c={},l=[],p={toc:l},u="wrapper";function f(e){let{components:n,...r}=e;return(0,t.kt)(u,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Docker-compose example for Kafka"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yml"},'version: \'3\'\nservices:\n  zookeeper:\n    image: docker.io/bitnami/zookeeper:3.9\n    ports:\n      - "2181:2181"\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes\n\n  kafka:\n    image: docker.io/bitnami/kafka:3.4\n    ports:\n      - "9092:9092"\n    environment:\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n    depends_on:\n      - zookeeper\n')),(0,t.kt)("p",null,"Publish in Kafka"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "log"\n    "strconv"\n\n    "github.com/IBM/sarama"\n)\n\nfunc main() {\n    // Set up Kafka producer configuration\n    config := sarama.NewConfig()\n    config.Producer.Return.Successes = true\n\n    // Create a Kafka producer\n    brokerAddress := "127.0.0.1:9092"\n    producer, err := sarama.NewSyncProducer([]string{brokerAddress}, config)\n    if err != nil {\n        log.Fatalf("Error creating Kafka producer: %v", err)\n    }\n    defer producer.Close()\n    topic := "kori_test"\n\n    for i := 0; i < 10; i++ {\n        // Publish messages to a Kafka topic\n        message := "Hello, a!" + strconv.FormatInt(int64(i), 10)\n\n        // Create a Kafka message\n        kafkaMessage := &sarama.ProducerMessage{\n            Topic: topic,\n            Value: sarama.StringEncoder(message),\n        }\n\n        // Send the message to Kafka\n        _, _, err = producer.SendMessage(kafkaMessage)\n        if err != nil {\n            log.Fatalf("Error sending message: %v", err)\n        }\n\n        log.Printf("Message sent to Kafka: %s", message)\n    }\n}\n')),(0,t.kt)("p",null,"Subscribe in Kafka"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "log"\n    "os"\n    "os/signal"\n\n    "github.com/IBM/sarama"\n)\n\nfunc main() {\n    // Set up Kafka consumer configuration\n    config := sarama.NewConfig()\n    config.Consumer.Return.Errors = true\n\n    // Create a Kafka consumer\n    brokerAddress := "127.0.0.1:9092"\n    consumer, err := sarama.NewConsumer([]string{brokerAddress}, config)\n    if err != nil {\n        log.Fatalf("Error creating Kafka consumer: %v", err)\n    }\n    defer consumer.Close()\n\n    // Subscribe to Kafka topic(s)\n    topic := "kori_test"\n    partitionConsumer, err := consumer.ConsumePartition(topic, 0, sarama.OffsetOldest)\n    if err != nil {\n        log.Fatalf("Error subscribing to topic: %v", err)\n    }\n    defer partitionConsumer.Close()\n\n    // Set up a signal channel to gracefully stop the consumer\n    signals := make(chan os.Signal, 1)\n    signal.Notify(signals, os.Interrupt)\n\n    // Consume and process messages\n    for {\n        select {\n        case message := <-partitionConsumer.Messages():\n            log.Printf("Received message: %s", string(message.Value))\n        case err := <-partitionConsumer.Errors():\n            log.Printf("Error while consuming: %v", err)\n        case <-signals:\n            log.Println("Interrupt signal received, shutting down...")\n            return\n        }\n    }\n}\n')))}f.isMDXComponent=!0}}]);