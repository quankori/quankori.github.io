"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[614],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,g=c["".concat(s,".").concat(k)]||c[k]||u[k]||i;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},4089:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i={title:"Java"},l=void 0,o={unversionedId:"blog/programming/java",id:"blog/programming/java",title:"Java",description:"Core Architecture",source:"@site/docs/blog/programming/java.md",sourceDirName:"blog/programming",slug:"/blog/programming/java",permalink:"/blog/programming/java",draft:!1,tags:[],version:"current",frontMatter:{title:"Java"}},s={},m=[{value:"Core Architecture",id:"core-architecture",level:2},{value:"JVM Service",id:"jvm-service",level:3},{value:"Class Loader Service",id:"class-loader-service",level:3},{value:"Language Features Service",id:"language-features-service",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Service",id:"memory-service",level:3},{value:"Concurrency Service",id:"concurrency-service",level:3},{value:"Profiling Service",id:"profiling-service",level:3},{value:"JIT Optimization Service",id:"jit-optimization-service",level:3},{value:"Scaling",id:"scaling",level:2},{value:"Scope Details",id:"scope-details",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"core-architecture"},"Core Architecture"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM"),": Executes Java bytecode efficiently.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bytecode execution"),": Runs compiled .class files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT compiler"),": Optimizes bytecode to machine code at runtime (HotSpot)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Garbage collection"),": Manages memory (e.g., G1, ZGC)."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class loader"),": Loads classes into the JVM.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bootstrap"),": Loads core Java classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extension"),": Loads extension classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Application"),": Loads user-defined classes."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Language features"),": Core syntax and capabilities.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object-oriented"),": Uses classes and interfaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generics"),": Type-safe collections."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lambdas & streams"),": Functional programming features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modules"),": Modularizes code (Java 9+).")))),(0,r.kt)("h3",{id:"jvm-service"},"JVM Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/JVMService.java (**JVM**)\npackage com.example.core;\n\npublic class JVMService {\n    public String executeBytecode(String code) {\n        return "Executed: " + code;\n    }\n\n    public void triggerGarbageCollection() {\n        System.gc();\n        Runtime runtime = Runtime.getRuntime();\n        long totalMemory = runtime.totalMemory();\n        long freeMemory = runtime.freeMemory();\n        System.out.println("Total Memory: " + totalMemory + ", Free Memory: " + freeMemory);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JVM Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates JVM bytecode execution and garbage collection triggering."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": The ",(0,r.kt)("inlineCode",{parentName:"li"},"executeBytecode")," method mimics running a string as bytecode, while ",(0,r.kt)("inlineCode",{parentName:"li"},"triggerGarbageCollection")," suggests a GC run and reports memory usage. ",(0,r.kt)("inlineCode",{parentName:"li"},"System.gc()")," hints at garbage collection, though it\u2019s not guaranteed to execute immediately. Memory stats are fetched using ",(0,r.kt)("inlineCode",{parentName:"li"},"Runtime"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bytecode Execution"),": JVM interprets or compiles ",(0,r.kt)("inlineCode",{parentName:"li"},".class")," files generated by ",(0,r.kt)("inlineCode",{parentName:"li"},"javac"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT Compiler (HotSpot)"),': Optimizes bytecode to native code at runtime, using profiling to identify frequently executed ("hot") methods.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Garbage Collection"),": G1 (Garbage-First) prioritizes regions with most garbage for collection; ZGC offers low-pause times. Triggered by heap pressure or manual suggestion.")))),(0,r.kt)("h3",{id:"class-loader-service"},"Class Loader Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/ClassLoaderService.java (**Class loader**)\npackage com.example.core;\n\npublic class ClassLoaderService {\n    public String loadClass(String className) {\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        try {\n            Class<?> clazz = classLoader.loadClass(className);\n            return "Loaded: " + clazz.getName();\n        } catch (ClassNotFoundException e) {\n            return "Class not found: " + className;\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Class Loader Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates loading a class using the system class loader."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": The ",(0,r.kt)("inlineCode",{parentName:"li"},"loadClass")," method retrieves the system class loader (Application loader) and attempts to load a class by name, returning its name if successful or an error message if not found."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Loader Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bootstrap"),": Loads core JDK classes (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"java.lang.Object"),") from ",(0,r.kt)("inlineCode",{parentName:"li"},"rt.jar"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extension"),": Loads classes from ",(0,r.kt)("inlineCode",{parentName:"li"},"jre/lib/ext")," directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Application"),": Loads user-defined classes from the classpath.")))),(0,r.kt)("h3",{id:"language-features-service"},"Language Features Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/LanguageFeaturesService.java (**Language features**)\npackage com.example.core;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class LanguageFeaturesService {\n    public <T> List<T> createGenericList(T item) {\n        return Arrays.asList(item);\n    }\n\n    public String useLambdaAndStream(List<Integer> numbers) {\n        return numbers.stream()\n                      .filter(n -> n > 0)\n                      .map(String::valueOf)\n                      .reduce("", String::concat);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Language Features Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Showcases generics and lambdas/streams in Java."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"createGenericList")," uses generics to create a type-safe list, while ",(0,r.kt)("inlineCode",{parentName:"li"},"useLambdaAndStream")," filters positive numbers from a list, converts them to strings, and concatenates them using stream operations and lambda expressions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Language Features Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object-oriented"),": Classes and interfaces define structure and behavior."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generics"),": Ensures type safety for collections (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"List<String>"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lambdas & Streams"),": Adds functional programming capabilities (e.g., filtering, mapping)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modules"),": Java 9+ ",(0,r.kt)("inlineCode",{parentName:"li"},"module-info.java")," organizes code into modules (not shown here).")))),(0,r.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory management"),": Controls memory allocation.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap"),": Young/Old generation for objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack"),": Per-thread call stacks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tuning JVM"),": Adjusts memory with ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xmx"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency"),": Handles multi-threading.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Threads & thread pools"),": Manages concurrent tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Executors framework"),": Simplifies thread management."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fork/join framework"),": Parallelizes tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CompletableFuture"),": Async programming."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling"),": Analyzes performance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VisualVM"),": Monitors JVM metrics."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JProfiler"),": Detailed profiling tool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JMH"),": Microbenchmarking framework."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT optimization"),": Enhances runtime performance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inlining"),": Embeds method calls."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Loop unrolling"),": Reduces loop overhead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Escape analysis"),": Optimizes object allocation.")))),(0,r.kt)("h3",{id:"memory-service"},"Memory Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/MemoryService.java (**Memory management**)\npackage com.example.perf;\n\npublic class MemoryService {\n    public void allocateMemory() {\n        Object[] heapObjects = new Object[1000000];\n        for (int i = 0; i < heapObjects.length; i++) {\n            heapObjects[i] = new Object();\n        }\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemory = runtime.totalMemory() - runtime.freeMemory();\n        System.out.println("Used memory after allocation: " + usedMemory);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates heap allocation and memory inspection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Creates a large array on the heap, fills it with objects (Young generation initially), and uses ",(0,r.kt)("inlineCode",{parentName:"li"},"Runtime")," to report memory usage after allocation, showing heap consumption."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Management Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap"),": Split into Young (Eden, Survivor) and Old generations; objects age and move based on GC cycles."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack"),": Stores method frames and local variables per thread, separate from heap."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tuning JVM"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms")," sets initial heap size, ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xmx")," sets maximum (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms512m -Xmx1024m"),").")))),(0,r.kt)("h3",{id:"concurrency-service"},"Concurrency Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/ConcurrencyService.java (**Concurrency**)\npackage com.example.perf;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ExecutorService;\n\npublic class ConcurrencyService {\n    private ExecutorService executor = Executors.newFixedThreadPool(4);\n\n    public CompletableFuture<String> asyncTask(int id) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return "Task " + id;\n        }, executor);\n    }\n\n    public void shutdown() {\n        executor.shutdown();\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Concurrency Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Implements asynchronous task execution using a thread pool and CompletableFuture."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Uses ",(0,r.kt)("inlineCode",{parentName:"li"},"Executors")," to create a fixed thread pool of 4 threads, then ",(0,r.kt)("inlineCode",{parentName:"li"},"CompletableFuture.supplyAsync")," to run a task asynchronously, simulating work with a 1-second sleep, and cleans up with ",(0,r.kt)("inlineCode",{parentName:"li"},"shutdown"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Threads & Thread Pools"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Executors")," reuses threads for efficiency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Executors Framework"),": Simplifies thread management (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"newFixedThreadPool"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fork/Join"),": Not shown but used for recursive task division (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"ForkJoinPool"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CompletableFuture"),": Enables non-blocking async operations.")))),(0,r.kt)("h3",{id:"profiling-service"},"Profiling Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/ProfilingService.java (**Profiling**)\npackage com.example.perf;\n\npublic class ProfilingService {\n    public void profilePerformance() {\n        long startTime = System.nanoTime();\n        int sum = 0;\n        for (int i = 0; i < 1000000; i++) {\n            sum += i;\n        }\n        long endTime = System.nanoTime();\n        System.out.println("Execution time (ns): " + (endTime - startTime));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Profiling Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Measures execution time of a simple computation loop."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Records start and end times in nanoseconds using ",(0,r.kt)("inlineCode",{parentName:"li"},"System.nanoTime"),", performs a million iterations to sum numbers, and prints the elapsed time for basic profiling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VisualVM"),": Monitors JVM metrics like CPU and memory usage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JProfiler"),": Offers detailed call graphs and memory analysis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JMH"),": Provides precise microbenchmarking (e.g., via ",(0,r.kt)("inlineCode",{parentName:"li"},"java -jar benchmarks.jar"),").")))),(0,r.kt)("h3",{id:"jit-optimization-service"},"JIT Optimization Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// src/main/java/com/example/perf/JITOptimizationService.java (**JIT optimization**)\npackage com.example.perf;\n\npublic class JITOptimizationService {\n    public int optimizeLoop(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JIT Optimization Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates a loop that the JIT compiler can optimize."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": A simple loop adds numbers up to ",(0,r.kt)("inlineCode",{parentName:"li"},"n"),"; the JIT compiler (HotSpot) may inline this method, unroll the loop, or apply escape analysis to optimize object allocation during runtime."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT Optimization Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inlining"),": Replaces method calls with their bodies (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"sum += i")," directly)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Loop Unrolling"),": Reduces iterations by expanding loop body (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"sum += i; sum += i+1;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Escape Analysis"),": Determines if objects escape method scope; if not, allocates on stack.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scaling"},"Scaling"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Adds more instances.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Load balancer"),": Uses Spring Cloud for distribution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Microservices"),": Deploys with Spring Boot."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vertical scaling"),": Enhances single instance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM tuning"),": Adjusts memory and threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Thread pool optimization"),": Balances concurrency."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distributed systems"),": Scales across nodes.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Messaging"),": Integrates Kafka or RabbitMQ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Clustering"),": Uses Hazelcast for data sharing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Service discovery"),": Locates services dynamically.")))),(0,r.kt)("h2",{id:"scope-details"},"Scope Details"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Global Scope"),": Static fields or variables outside methods/classes (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"public static int x;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Closure Scope"),": Simulated with lambdas capturing variables (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"int x = 1; Runnable r = () -> System.out.println(x);"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Scope"),": Instance or static fields within a class (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"private int y;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method Scope"),": Local variables within a method (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"int z = 1;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Block Scope"),": Variables within ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," blocks (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"for (int i = 0; i < 10; i++) {}"),").")))}u.isMDXComponent=!0}}]);