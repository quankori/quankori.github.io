"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1468],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),g=i,f=m["".concat(u,".").concat(g)]||m[g]||p[g]||a;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={title:"Big O Notation"},o=void 0,l={unversionedId:"programming/fundamental/bigo",id:"programming/fundamental/bigo",title:"Big O Notation",description:"Concept",source:"@site/docs/programming/fundamental/bigo.md",sourceDirName:"programming/fundamental",slug:"/programming/fundamental/bigo",permalink:"/docs/programming/fundamental/bigo",draft:!1,tags:[],version:"current",frontMatter:{title:"Big O Notation"},sidebar:"programming",next:{title:"Bitwise",permalink:"/docs/programming/fundamental/bitwise"}},u={},c=[{value:"Concept",id:"concept",level:2}],s={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"concept"},"Concept"),(0,i.kt)("p",null,"Big O notation describes the performance or complexity of an algorithm. It provides a way to express the growth rate of the execution time or memory usage of an algorithm as the input size increases."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/5.png",alt:"Image"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(2^n) < O(n!)")),(0,i.kt)("p",null,"O(1): Constant time - the execution time does not change with the input size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func getFirstElement(arr []int) int {\n    return arr[0]\n}\n")),(0,i.kt)("p",null,"O(log n): Logarithmic time - the execution time grows logarithmically with the input size (e.g., binary search)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func binarySearch(arr []int, target int) bool {\n    left, right := 0, len(arr)-1\n    for left <= right {\n        mid := (left + right) / 2\n        if arr[mid] == target {\n            return true\n        } else if arr[mid] < target {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return false\n}\n")),(0,i.kt)("p",null,"O(n): Linear time - the execution time grows linearly with the input size (e.g., traversing an array)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func findMax(arr []int) int {\n    maxVal := arr[0]\n    for _, val := range arr {\n        if val > maxVal {\n            maxVal = val\n        }\n    }\n    return maxVal\n}\n")),(0,i.kt)("p",null,"O(n log n): Linearithmic time - the execution time grows in a combination of linear and logarithmic times (e.g., merge sort, quicksort)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func mergeSort(arr []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    mid := len(arr) / 2\n    left := mergeSort(arr[:mid])\n    right := mergeSort(arr[mid:])\n    return merge(left, right)\n}\n\nfunc merge(left, right []int) []int {\n    result := make([]int, 0)\n    i, j := 0, 0\n    for i < len(left) && j < len(right) {\n        if left[i] < right[j] {\n            result = append(result, left[i])\n            i++\n        } else {\n            result = append(result, right[j])\n            j++\n        }\n    }\n    result = append(result, left[i:]...)\n    result = append(result, right[j:]...)\n    return result\n}\n")),(0,i.kt)("p",null,"O(n^2): Quadratic time - the execution time grows quadratically with the input size (e.g., bubble sort, selection sort)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func bubbleSort(arr []int) {\n    n := len(arr)\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n}\n")),(0,i.kt)("p",null,"O(2^n): Exponential time - the execution time grows exponentially with the input size (e.g., some recursive algorithms)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func fibonacci(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)\n}\n")),(0,i.kt)("p",null,"O(n!): Factorial time - the execution time grows factorially with the input size (e.g., backtracking algorithms for permutations)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func permutations(str string) []string {\n    if len(str) == 0 {\n        return []string{""}\n    }\n    var result []string\n    for i := 0; i < len(str); i++ {\n        remaining := str[:i] + str[i+1:]\n        for _, perm := range permutations(remaining) {\n            result = append(result, string(str[i])+perm)\n        }\n    }\n    return result\n}\n')))}p.isMDXComponent=!0}}]);