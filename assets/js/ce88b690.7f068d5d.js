"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[897],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),k=a,m=p["".concat(i,".").concat(k)]||p[k]||d[k]||o;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=k;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},3583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={title:"Fundamental CheatSheet"},l=void 0,s={unversionedId:"cheatsheet/nodejs/core",id:"cheatsheet/nodejs/core",title:"Fundamental CheatSheet",description:"Fundamention",source:"@site/docs/cheatsheet/nodejs/core.md",sourceDirName:"cheatsheet/nodejs",slug:"/cheatsheet/nodejs/core",permalink:"/docs/cheatsheet/nodejs/core",draft:!1,tags:[],version:"current",frontMatter:{title:"Fundamental CheatSheet"},sidebar:"cheatsheet",previous:{title:"About Me",permalink:"/docs/home"},next:{title:"JavaScript CheatSheet",permalink:"/docs/cheatsheet/nodejs/javascript"}},i={},c=[{value:"Fundamention",id:"fundamention",level:3},{value:"Libuv",id:"libuv",level:4},{value:"Garbage Collection",id:"garbage-collection",level:4},{value:"Non-blocking I/O",id:"non-blocking-io",level:4},{value:"Single Thread",id:"single-thread",level:4},{value:"Event Loop",id:"event-loop",level:3},{value:"Workflow",id:"workflow",level:4},{value:"Phase",id:"phase",level:4},{value:"Callback",id:"callback",level:3},{value:"Callback Function",id:"callback-function",level:4},{value:"Callback Hell",id:"callback-hell",level:4},{value:"Aysnc/Await",id:"aysncawait",level:4},{value:"Generators Funciton",id:"generators-funciton",level:4},{value:"Scaling",id:"scaling",level:3},{value:"Cluster",id:"cluster",level:4},{value:"Child Process",id:"child-process",level:4},{value:"Worker Thread",id:"worker-thread",level:4}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"fundamention"},"Fundamention"),(0,a.kt)("h4",{id:"libuv"},"Libuv"),(0,a.kt)("p",null,"Libuv is a low-level library that handles asynchronous operations such as I/O, networking, and other system tasks, enabling Node.js to perform non-blocking I/O."),(0,a.kt)("h4",{id:"garbage-collection"},"Garbage Collection"),(0,a.kt)("p",null,"Automatic memory management that frees up memory no longer in use. Node.js uses the V8 engine to perform garbage collection."),(0,a.kt)("p",null,"Default Memory Size if Not Set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// checkHeapSize.js\nconst v8 = require("v8");\n\nconst heapStatistics = v8.getHeapStatistics();\nconst totalHeapSize = heapStatistics.total_available_size / (1024 * 1024); // Convert to MB\n\nconsole.log(`Default Total Heap Size: ${totalHeapSize.toFixed(2)} MB`);\n\n// Output:\n// Default Total Heap Size: 2097152.00 MB\n')),(0,a.kt)("p",null,"Memory Limits"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\napp.get("/", (req, res) => {\n  // Intentional memory leak\n  let bigArray = [];\n  for (let i = 0; i < 1e7; i++) {\n    bigArray.push(i);\n  }\n  res.send("Memory Leak!");\n});\n\napp.listen(3000, () => {\n  console.log("Server running on port 3000");\n});\n\n// Output:\n// Server running on port 3000\n// FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n')),(0,a.kt)("p",null,"Resolve"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"node --max-old-space-size=512 memoryLeak.js\n")),(0,a.kt)("h4",{id:"non-blocking-io"},"Non-blocking I/O"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n\nconsole.log("Start reading file...");\nfs.readFile("example.txt", "utf8", (err, data) => {\n  if (err) throw err;\n  console.log("File content:", data);\n});\nconsole.log("End of script.");\n\n// Output:\n// Start reading file...\n// End of script.\n// File content: Contents of example.txt\n')),(0,a.kt)("h4",{id:"single-thread"},"Single Thread"),(0,a.kt)("p",null,"Node.js operates on a single thread but uses asynchronous techniques to handle multiple tasks concurrently."),(0,a.kt)("h3",{id:"event-loop"},"Event Loop"),(0,a.kt)("h4",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,"The Event Loop manages the processing of asynchronous tasks, ensuring Node.js remains non-blocking and can handle new events continuously."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'console.log("Start");\n\nsetTimeout(() => {\n  console.log("Timeout callback");\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log("Promise callback");\n});\n\nconsole.log("End");\n\n// Output:\n// Start\n// End\n// Promise callback\n// Timeout callback\n')),(0,a.kt)("h4",{id:"phase"},"Phase"),(0,a.kt)("p",null,"The Event Loop consists of multiple phases such as timers, pending callbacks, idle/prepare, poll, check, and close callbacks. Each phase handles different types of callbacks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\n// Giai \u0111o\u1ea1n: Timers\nsetTimeout(() => {\n  console.log('setTimeout callback (Timers)');\n}, 0);\n\n// Giai \u0111o\u1ea1n: Check\nsetImmediate(() => {\n  console.log('setImmediate callback (Check)');\n});\n\n// Giai \u0111o\u1ea1n: Poll (I/O)\nfs.readFile(__filename, () => {\n  console.log('fs.readFile callback (Poll)');\n\n  // Giai \u0111o\u1ea1n: Check sau I/O\n  setImmediate(() => {\n    console.log('setImmediate inside fs.readFile (Check)');\n  });\n\n  // Giai \u0111o\u1ea1n: Timers sau I/O\n  setTimeout(() => {\n    console.log('setTimeout inside fs.readFile (Timers)');\n  }, 0);\n});\n\n// Giai \u0111o\u1ea1n: Pending Callbacks\n// \u0110\u1ec3 minh h\u1ecda, ch\xfang ta s\u1ebd t\u1ea1o m\u1ed9t l\u1ed7i trong I/O callback\nfs.readFile('nonexistentfile.txt', () => {\n  // Kh\xf4ng x\u1eed l\xfd l\u1ed7i \u0111\u1ec3 callback n\xe0y \u0111\u01b0\u1ee3c \u0111\u01b0a v\xe0o Pending Callbacks\n});\n\n// Giai \u0111o\u1ea1n: process.nextTick\nprocess.nextTick(() => {\n  console.log('process.nextTick callback');\n});\n\n// Giai \u0111o\u1ea1n: Promises (microtasks)\nPromise.resolve().then(() => {\n  console.log('Promise.then callback');\n});\n\n// \u0110\u1ec3 gi\u1eef ch\u01b0\u01a1ng tr\xecnh ch\u1ea1y m\u1ed9t th\u1eddi gian ng\u1eafn\nsetTimeout(() => {\n  console.log('Final setTimeout to end the program');\n}, 100);\n\n// Output:\n// process.nextTick callback\n// Promise.then callback\n// setTimeout callback (Timers)\n// fs.readFile callback (Poll)\n// setImmediate callback (Check)\n// setImmediate inside fs.readFile (Check)\n// setTimeout inside fs.readFile (Timers)\n// Final setTimeout to end the program\n")),(0,a.kt)("h3",{id:"callback"},"Callback"),(0,a.kt)("h4",{id:"callback-function"},"Callback Function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function fetchData(callback) {\n  setTimeout(() => {\n    callback("Data received");\n  }, 1000);\n}\n\nfetchData((data) => {\n  console.log(data);\n});\n')),(0,a.kt)("h4",{id:"callback-hell"},"Callback Hell"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"login(user, (err, user) => {\n  if (err) throw err;\n  getUserData(user, (err, data) => {\n    if (err) throw err;\n    processData(data, (err, result) => {\n      if (err) throw err;\n      console.log(result);\n    });\n  });\n});\n")),(0,a.kt)("h4",{id:"aysncawait"},"Aysnc/Await"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function fetchData() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve("Data received");\n    }, 1000);\n  });\n}\n\nasync function getData() {\n  const data = await fetchData();\n  console.log(data);\n}\n\ngetData();\n')),(0,a.kt)("h4",{id:"generators-funciton"},"Generators Funciton"),(0,a.kt)("p",null,"Generator functions can pause and resume execution, aiding in managing asynchronous flows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function* generator() {\n  const data = yield fetchData();\n  console.log(data);\n}\n\nfunction fetchData() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve("Data received");\n    }, 1000);\n  });\n}\n\nconst gen = generator();\nconst promise = gen.next().value;\npromise.then((data) => {\n  gen.next(data);\n});\n')),(0,a.kt)("h3",{id:"scaling"},"Scaling"),(0,a.kt)("h4",{id:"cluster"},"Cluster"),(0,a.kt)("p",null,"Creates child processes to take advantage of multi-core systems, improving the performance of Node.js applications."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const cluster = require("cluster");\nconst http = require("http");\nconst numCPUs = require("os").cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers for each CPU\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on("exit", (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share the same server\n  http\n    .createServer((req, res) => {\n      res.writeHead(200);\n      res.end("Hello from worker " + process.pid);\n    })\n    .listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n\n// Output:\n// Master 12345 is running\n// Worker 12346 started\n// Worker 12347 started\n')),(0,a.kt)("h4",{id:"child-process"},"Child Process"),(0,a.kt)("p",null,"Runs child processes to perform heavy or independent tasks without blocking the main event loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { exec } = require("child_process");\n\nexec("ls -la", (err, stdout, stderr) => {\n  if (err) {\n    console.error(`Error: ${err}`);\n    return;\n  }\n  console.log(`Output:\\n${stdout}`);\n});\n\n// Output:\n// total 64\n// drwxr-xr-x  8 user  staff   256 Apr 27 10:00 .\n// drwxr-xr-x  4 user  staff    128 Apr 27 09:50 ..\n// ...\n')),(0,a.kt)("h4",{id:"worker-thread"},"Worker Thread"),(0,a.kt)("p",null,"Allows performing CPU-intensive tasks in separate threads, preventing the event loop from being blocked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { Worker } = require("worker_threads");\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker("./worker.js", { workerData });\n    worker.on("message", resolve);\n    worker.on("error", reject);\n    worker.on("exit", (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nrunService("Hello, Worker!")\n  .then((result) => console.log(result))\n  .catch((err) => console.error(err));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { parentPort, workerData } = require("worker_threads");\n\nparentPort.postMessage(`Worker received: ${workerData}`);\n\n// Output:\n// Worker received: Hello, Worker!\n')))}d.isMDXComponent=!0}}]);