"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2670],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||p[h]||o;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"Blockchain Consensus"},l=void 0,i={unversionedId:"programming/blockchain/consensus",id:"programming/blockchain/consensus",title:"Blockchain Consensus",description:"Proof of Work.",source:"@site/docs/programming/blockchain/consensus.md",sourceDirName:"programming/blockchain",slug:"/programming/blockchain/consensus",permalink:"/docs/programming/blockchain/consensus",draft:!1,tags:[],version:"current",frontMatter:{title:"Blockchain Consensus"},sidebar:"programming",previous:{title:"Automated Market Maker (AMM)",permalink:"/docs/programming/blockchain/amm"},next:{title:"Ethereum Virtual Machine",permalink:"/docs/programming/blockchain/evm"}},s={},c=[{value:"Proof of Work.",id:"proof-of-work",level:2},{value:"Proof of Stake",id:"proof-of-stake",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"proof-of-work"},"Proof of Work."),(0,r.kt)("p",null,"Using the computational power to solve a problem."),(0,r.kt)("p",null,"Miners will find the exact nonce through iterations in such a way that the first character is smaller than the target number in hexadecimal."),(0,r.kt)("p",null,"The target number is independently generated by nodes in the network (following specific rules)."),(0,r.kt)("p",null,"The smaller the target number, the longer it takes to find it. For example, a target of 0x0001 will take more time than 0x010000."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On website ",(0,r.kt)("inlineCode",{parentName:"li"},"https://emn178.github.io/online-tools/sha256.html")),(0,r.kt)("li",{parentName:"ul"},"Target is node have is 32"),(0,r.kt)("li",{parentName:"ul"},"Old hash of old block is ",(0,r.kt)("inlineCode",{parentName:"li"},"0x1dcc4")),(0,r.kt)("li",{parentName:"ul"},"Data in new block is ",(0,r.kt)("inlineCode",{parentName:"li"},"[{a:2, b:3}]")),(0,r.kt)("li",{parentName:"ul"},"When we sum it will result is:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  nonce_number:old_hash_block:new_data\n  # Result will be\n  0:0x1dcc4:[{a:2, b:3}]\n  # 9b2265d45e26247d3db353afce35864b673e95c6d6c7194d856d57afedda0a27\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"At that time, the first 2 characters of the string are still smaller than the hash value, so it will not work, then we add 1 to the nonce.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  nonce_number:old_hash_block:new_data\n  # S\u1ebd ra l\xe0\n  1:0x1dcc4:[{a:2, b:3}]\n  # ad77af42297b05ee67d22bfd021ea7c2a249cc7797495a482aaa24d34d5d5015\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add nonce to 2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  nonce_number:old_hash_block:new_data\n  # S\u1ebd ra l\xe0\n  2:0x1dcc4:[{a:2, b:3}]\n  # 08fbf223a91dfb45f74b79789d564fd2244d65e96928b6d0b293d1a823dd6abb\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'At this point, the first two characters "08" are smaller than the target "32", so the mining is successful.')),(0,r.kt)("p",null,"Through this basic example, we can understand the mechanism of solving puzzles in a network, but the implementation of block mining algorithms can vary depending on the network and the participating nodes."),(0,r.kt)("h2",{id:"proof-of-stake"},"Proof of Stake"),(0,r.kt)("p",null,"Creating a block based on the amount of money in an account"),(0,r.kt)("p",null,"The algorithm will take the first two characters of the block multiplied by the target number, then compare it to the user's balance, and whoever has more will win."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User A has 52 tokens, User B has 15 tokens"),(0,r.kt)("li",{parentName:"ul"},"The node's target is set to 5"),(0,r.kt)("li",{parentName:"ul"},"We have a hash string, for example: 08fbf223a91dfb45f74b79789d564fd2244d65e96928b6d0b293d1a823dd6abb"),(0,r.kt)("li",{parentName:"ul"},"We will take the first two characters, which are 08, multiply it by the target of 5, and the result is 40."),(0,r.kt)("li",{parentName:"ul"},"We can see that user B only has 15 tokens, so they cannot mine the block, but user A has 52 tokens, so they can mine the block successfully.")),(0,r.kt)("p",null,"Through this basic example, we can understand the mechanism of mining algorithms in a network, but the implementation of mining algorithms can vary depending on the network and participating nodes."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/blockchain/6.PNG",alt:"Image"})))}p.isMDXComponent=!0}}]);