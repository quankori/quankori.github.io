"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8218],{3905:(n,t,e)=>{e.d(t,{Zo:()=>l,kt:()=>m});var r=e(7294);function c(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){c(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function h(n,t){if(null==n)return{};var e,r,c=function(n,t){if(null==n)return{};var e,r,c={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(c[e]=n[e]);return c}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(c[e]=n[e])}return c}var s=r.createContext({}),a=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},l=function(n){var t=a(n.components);return r.createElement(s.Provider,{value:t},n.children)},g="mdxType",p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(n,t){var e=n.components,c=n.mdxType,o=n.originalType,s=n.parentName,l=h(n,["components","mdxType","originalType","parentName"]),g=a(e),u=c,m=g["".concat(s,".").concat(u)]||g[u]||p[u]||o;return e?r.createElement(m,i(i({ref:t},l),{},{components:e})):r.createElement(m,i({ref:t},l))}));function m(n,t){var e=arguments,c=t&&t.mdxType;if("string"==typeof n||c){var o=e.length,i=new Array(o);i[0]=u;var h={};for(var s in t)hasOwnProperty.call(t,s)&&(h[s]=t[s]);h.originalType=n,h[g]="string"==typeof n?n:c,i[1]=h;for(var a=2;a<o;a++)i[a]=e[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}u.displayName="MDXCreateElement"},1976:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>h,toc:()=>a});var r=e(7462),c=(e(7294),e(3905));const o={title:"Process and Thread"},i=void 0,h={unversionedId:"programming/nodejs/process-thread",id:"programming/nodejs/process-thread",title:"Process and Thread",description:"Concept",source:"@site/docs/programming/nodejs/process-thread.md",sourceDirName:"programming/nodejs",slug:"/programming/nodejs/process-thread",permalink:"/docs/programming/nodejs/process-thread",draft:!1,tags:[],version:"current",frontMatter:{title:"Process and Thread"},sidebar:"programming",previous:{title:"Node.js Concept",permalink:"/docs/programming/nodejs/concept"},next:{title:"Callbacks in Node.js",permalink:"/docs/programming/nodejs/callback"}},s={},a=[{value:"Concept",id:"concept",level:2},{value:"Child Processes:",id:"child-processes",level:2},{value:"Worker Threads:",id:"worker-threads",level:2},{value:"Cluster mode",id:"cluster-mode",level:2}],l={toc:a},g="wrapper";function p(n){let{components:t,...e}=n;return(0,c.kt)(g,(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"concept"},"Concept"),(0,c.kt)("p",null,(0,c.kt)("strong",{parentName:"p"},"Process"),": M\u1ed9t ti\u1ebfn tr\xecnh (process) l\xe0 m\u1ed9t \u0111\u01a1n v\u1ecb \u0111\u1ed9c l\u1eadp ch\u1ee9a m\u1ed9t ch\u01b0\u01a1ng tr\xecnh \u0111ang \u0111\u01b0\u1ee3c th\u1ef1c thi v\xe0 c\xe1c t\xe0i nguy\xean c\u1ee7a n\xf3. M\u1ed7i ti\u1ebfn tr\xecnh c\xf3 kh\xf4ng gian \u0111\u1ecba ch\u1ec9 ri\xeang, v\xe0 m\u1ed9t ti\u1ebfn tr\xecnh kh\xf4ng th\u1ec3 truy c\u1eadp tr\u1ef1c ti\u1ebfp v\xe0o kh\xf4ng gian \u0111\u1ecba ch\u1ec9 c\u1ee7a m\u1ed9t ti\u1ebfn tr\xecnh kh\xe1c (tr\u1eeb khi s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf IPC)."),(0,c.kt)("p",null,"IPC vi\u1ebft t\u1eaft c\u1ee7a Inter-Process Communication (Giao ti\u1ebfp gi\u1eefa c\xe1c ti\u1ebfn tr\xecnh). \u0110\xe2y l\xe0 m\u1ed9t t\u1eadp h\u1ee3p c\xe1c ph\u01b0\u01a1ng ph\xe1p cho c\xe1c ti\u1ebfn tr\xecnh kh\xe1c nhau \u0111\u1ec3 giao ti\u1ebfp v\u1edbi nhau. IPC \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng c\u1ea3 trong m\xf4i tr\u01b0\u1eddng h\u1ec7 th\u1ed1ng \u0111\u01a1n v\xe0 \u0111a h\u1ec7 th\u1ed1ng, cho ph\xe9p c\xe1c ti\u1ebfn tr\xecnh chia s\u1ebb d\u1eef li\u1ec7u, t\xedn hi\u1ec7u ho\u1eb7c tin nh\u1eafn m\u1ed9t c\xe1ch c\xf9ng ph\u1ed1i h\u1ee3p v\xe0 an to\xe0n."),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/2.png",alt:"Image"})),(0,c.kt)("p",null,(0,c.kt)("strong",{parentName:"p"},"Thread"),": \u0110\xf3 l\xe0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a m\xe3 \u0111\u01b0\u1ee3c th\u1ef1c thi. M\u1ed9t ti\u1ebfn tr\xecnh c\xf3 th\u1ec3 ch\u1ee9a nhi\u1ec1u lu\u1ed3ng (threads). T\u1ea5t c\u1ea3 c\xe1c lu\u1ed3ng trong c\xf9ng m\u1ed9t ti\u1ebfn tr\xecnh chia s\u1ebb kh\xf4ng gian \u0111\u1ecba ch\u1ec9 c\u1ee7a ti\u1ebfn tr\xecnh \u0111\xf3, l\xe0m cho vi\u1ec7c chia s\u1ebb d\u1eef li\u1ec7u gi\u1eefa c\xe1c lu\u1ed3ng d\u1ec5 d\xe0ng h\u01a1n. Tuy nhi\xean, \u0111i\u1ec1u n\xe0y c\u0169ng mang \u0111\u1ebfn nh\u1eefng th\xe1ch th\u1ee9c v\u1ec1 \u0111\u1ed3ng b\u1ed9 h\xf3a."),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/6.png",alt:"Image"})),(0,c.kt)("h2",{id:"child-processes"},"Child Processes:"),(0,c.kt)("p",null,"Trong Node.js, khi b\u1ea1n mu\u1ed1n th\u1ef1c thi m\u1ed9t l\u1ec7nh h\u1ec7 th\u1ed1ng, b\u1ea1n c\xf3 th\u1ec3 s\u1eed d\u1ee5ng m\xf4-\u0111un ",(0,c.kt)("inlineCode",{parentName:"p"},"child_process"),". M\xf4-\u0111un n\xe0y cho ph\xe9p b\u1ea1n ch\u1ea1y c\xe1c l\u1ec7nh h\u1ec7 th\u1ed1ng, qu\u1ea3n l\xfd c\xe1c ti\u1ebfn tr\xecnh con v\xe0 giao ti\u1ebfp v\u1edbi ch\xfang, khi b\u1ea1n mu\u1ed1n th\u1ef1c thi m\u1ed9t l\u1ec7nh h\u1ec7 th\u1ed1ng ho\u1eb7c c\u1ea7n t\xe1ch logic trong m\u1ed9t ti\u1ebfn tr\xecnh ho\xe0n to\xe0n ri\xeang bi\u1ec7t."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { exec } = require("child_process");\n\nexec("ls -la", (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`Output: ${stdout}`);\n  console.error(`Errors: ${stderr}`);\n});\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { fork } = require("child_process");\n\nconst child = fork("./child-script.js");\n\nchild.on("message", (msg) => {\n  console.log("Message from child:", msg);\n});\n\nchild.send({ hello: "world" });\n')),(0,c.kt)("p",null,"In file ",(0,c.kt)("inlineCode",{parentName:"p"},"child-script.js")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'process.on("message", (msg) => {\n  console.log("Message from parent:", msg);\n  process.send({ msg: "Hello from child!" });\n});\n')),(0,c.kt)("p",null,"Khi b\u1ea1n t\u1ea1o m\u1ed9t ti\u1ebfn tr\xecnh con, b\u1ea1n \u0111ang kh\u1edfi ch\u1ea1y m\u1ed9t ti\u1ebfn tr\xecnh h\u1ec7 th\u1ed1ng ho\xe0n to\xe0n m\u1edbi. Trong m\xf4i tr\u01b0\u1eddng Unix, \u0111i\u1ec1u n\xe0y th\u01b0\u1eddng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng l\u1ec7nh fork()."),(0,c.kt)("p",null,"fork(): \u0110\xe2y l\xe0 m\u1ed9t l\u1ec7nh h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1o m\u1ed9t b\u1ea3n sao c\u1ee7a ti\u1ebfn tr\xecnh hi\u1ec7n t\u1ea1i. L\u1ec7nh n\xe0y tr\u1ea3 v\u1ec1 hai l\u1ea7n: m\u1ed9t l\u1ea7n cho ti\u1ebfn tr\xecnh g\u1ed1c (cha) v\xe0 m\u1ed9t l\u1ea7n cho ti\u1ebfn tr\xecnh con. Trong Node.js, fork() gi\xfap t\u1ea1o m\u1ed9t ti\u1ebfn tr\xecnh con m\u1edbi c\u1ee7a Node.js v\xe0 thi\u1ebft l\u1eadp m\u1ed9t k\xeanh giao ti\u1ebfp IPC gi\u1eefa ch\xfang."),(0,c.kt)("p",null,"spawn() v\xe0 exec(): C\u1ea3 hai ph\u01b0\u01a1ng th\u1ee9c n\xe0y \u0111\u1ec1u t\u1ea1o ra m\u1ed9t ti\u1ebfn tr\xecnh con, nh\u01b0ng ch\xfang kh\xe1c nhau v\u1ec1 giao ti\u1ebfp v\xe0 qu\u1ea3n l\xfd \u0111\u1ea7u ra. spawn() tr\u1ea3 v\u1ec1 m\u1ed9t lu\u1ed3ng (stream) v\xe0 ph\xf9 h\u1ee3p \u0111\u1ec3 x\u1eed l\xfd c\xe1c \u1ee9ng d\u1ee5ng c\xf3 l\u01b0\u1ee3ng d\u1eef li\u1ec7u l\u1edbn. exec() tr\u1ea3 v\u1ec1 to\xe0n b\u1ed9 \u0111\u1ea7u ra d\u01b0\u1edbi d\u1ea1ng m\u1ed9t chu\u1ed7i khi ti\u1ebfn tr\xecnh con k\u1ebft th\xfac."),(0,c.kt)("p",null,"IPC (Inter-Process Communication - Giao ti\u1ebfp gi\u1eefa c\xe1c ti\u1ebfn tr\xecnh) l\xe0 m\u1ed9t c\u01a1 ch\u1ebf cho ph\xe9p hai (ho\u1eb7c nhi\u1ec1u) ti\u1ebfn tr\xecnh giao ti\u1ebfp v\xe0 chia s\u1ebb d\u1eef li\u1ec7u v\u1edbi nhau."),(0,c.kt)("h2",{id:"worker-threads"},"Worker Threads:"),(0,c.kt)("p",null,"B\u1eaft \u0111\u1ea7u t\u1eeb phi\xean b\u1ea3n Node.js 10.5.0, m\u1ed9t m\xf4-\u0111un m\u1edbi \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u c\xf3 t\xean l\xe0 ",(0,c.kt)("inlineCode",{parentName:"p"},"worker_threads"),". N\xf3 cung c\u1ea5p m\u1ed9t c\xe1ch \u0111\u1ec3 t\u1ea1o ra c\xe1c lu\u1ed3ng (threads), gi\xfap th\u1ef1c hi\u1ec7n t\xednh to\xe1n song song d\u1ec5 d\xe0ng h\u01a1n trong m\xf4i tr\u01b0\u1eddng Node.js, khi b\u1ea1n c\u1ea7n t\u0103ng hi\u1ec7u su\u1ea5t t\xednh to\xe1n b\u1eb1ng c\xe1ch t\u1eadn d\u1ee5ng c\xe1c l\xf5i CPU kh\xf4ng s\u1eed d\u1ee5ng v\xe0 b\u1ea1n mu\u1ed1n gi\u1eef t\u1ea5t c\u1ea3 logic trong c\xf9ng m\u1ed9t ti\u1ebfn tr\xecnh."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { Worker, isMainThread, parentPort } = require("worker_threads");\n\nif (isMainThread) {\n  // This is the main thread\n\n  const worker = new Worker(__filename); // Start a new worker with this file\n\n  worker.on("message", (msg) => {\n    console.log("Message from worker:", msg);\n  });\n\n  worker.postMessage("Hello Worker!");\n} else {\n  // This is the worker thread\n\n  parentPort.on("message", (msg) => {\n    console.log("Message from main thread:", msg);\n    parentPort.postMessage("Hello Main Thread!");\n  });\n}\n')),(0,c.kt)("p",null,"Node.js m\u1eb7c \u0111\u1ecbnh ch\u1ea1y tr\xean m\u1ed9t lu\u1ed3ng duy nh\u1ea5t, s\u1eed d\u1ee5ng v\xf2ng l\u1eb7p s\u1ef1 ki\u1ec7n \u0111\u1ec3 x\u1eed l\xfd c\xe1c ho\u1ea1t \u0111\u1ed9ng b\u1ea5t \u0111\u1ed3ng b\u1ed9. Tuy nhi\xean, m\u1ed9t s\u1ed1 t\xe1c v\u1ee5, \u0111\u1eb7c bi\u1ec7t l\xe0 c\xe1c t\xe1c v\u1ee5 t\xednh to\xe1n, c\xf3 th\u1ec3 ch\u1eb7n v\xf2ng l\u1eb7p s\u1ef1 ki\u1ec7n, l\xe0m gi\u1ea3m hi\u1ec7u su\u1ea5t."),(0,c.kt)("p",null,"\u0110\xf3 l\xe0 l\xfac worker_threads xu\u1ea5t hi\u1ec7n:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"Khi b\u1ea1n t\u1ea1o m\u1ed9t Worker, m\u1ed9t lu\u1ed3ng m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o ra, ch\u1ea1y song song v\u1edbi lu\u1ed3ng ch\xednh."),(0,c.kt)("li",{parentName:"ul"},"M\u1ed7i worker c\xf3 v\xf2ng l\u1eb7p s\u1ef1 ki\u1ec7n v\xe0 ng\u1eef c\u1ea3nh ri\xeang c\u1ee7a n\xf3, c\xf3 ngh\u0129a l\xe0 ch\xfang ho\u1ea1t \u0111\u1ed9ng \u0111\u1ed9c l\u1eadp v\xe0 kh\xf4ng chia s\u1ebb tr\u1ea1ng th\xe1i."),(0,c.kt)("li",{parentName:"ul"},"Workers c\xf3 th\u1ec3 giao ti\u1ebfp v\u1edbi lu\u1ed3ng ch\xednh v\xe0 l\u1eabn nhau b\u1eb1ng c\u01a1 ch\u1ebf truy\u1ec1n th\xf4ng \u0111i\u1ec7p."),(0,c.kt)("li",{parentName:"ul"},"C\xe1c \u0111\u1ed1i t\u01b0\u1ee3ng nh\u01b0 ArrayBuffer c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c chia s\u1ebb gi\u1eefa c\xe1c lu\u1ed3ng, nh\u01b0ng vi\u1ec7c chia s\u1ebb d\u1eef li\u1ec7u gi\u1eefa c\xe1c lu\u1ed3ng y\xeau c\u1ea7u c\u1ea9n tr\u1ecdng \u0111\u1ec3 tr\xe1nh v\u1ea5n \u0111\u1ec1 nh\u01b0 t\xecnh tr\u1ea1ng c\u1ea1nh tranh (race conditions).")),(0,c.kt)("p",null,'N\xf3i chung, "child processes" th\xedch h\u1ee3p khi b\u1ea1n c\u1ea7n t\xe1ch bi\u1ec7t ho\xe0n to\xe0n ho\u1eb7c khi ch\u1ea1y c\xe1c t\xe1c v\u1ee5 \u0111\u1ed9c l\u1eadp v\u1edbi Node.js. Trong khi \u0111\xf3, "worker threads" h\u1eefu \xedch khi b\u1ea1n mu\u1ed1n t\u1eadn d\u1ee5ng t\u1ea5t c\u1ea3 c\xe1c l\xf5i tr\xean CPU m\xe0 kh\xf4ng c\u1ea7n ph\u1ea3i kh\u1edfi \u0111\u1ed9ng nhi\u1ec1u phi\xean b\u1ea3n c\u1ee7a Node.js.'),(0,c.kt)("h2",{id:"cluster-mode"},"Cluster mode"),(0,c.kt)("p",null,"Ch\u1ebf \u0111\u1ed9 c\u1ee5m (Cluster mode) l\xe0 m\u1ed9t t\xednh n\u0103ng trong Node.js cho ph\xe9p b\u1ea1n t\u1ea1o nhi\u1ec1u ti\u1ebfn tr\xecnh con \u0111\u1ec3 ch\u1ea1y c\xf9ng m\u1ed9t \u1ee9ng d\u1ee5ng Node.js tr\xean m\u1ed9t m\xe1y t\xednh ho\u1eb7c m\u1ea1ng. M\u1ed7i ti\u1ebfn tr\xecnh con c\xf3 th\u1ec3 ch\u1ea1y tr\xean m\u1ed9t CPU ho\u1eb7c l\xf5i ri\xeang bi\u1ec7t, t\u1eeb \u0111\xf3 t\u1eadn d\u1ee5ng \u0111\u01b0\u1ee3c s\u1ee9c m\u1ea1nh c\u1ee7a c\xe1c CPU ho\u1eb7c l\xf5i trong h\u1ec7 th\u1ed1ng."),(0,c.kt)("p",null,"Trong ch\u1ebf \u0111\u1ed9 c\u1ee5m, ti\u1ebfn tr\xecnh ch\xednh (master process) c\xf3 tr\xe1ch nhi\u1ec7m t\u1ea1o ra v\xe0 qu\u1ea3n l\xfd c\xe1c ti\u1ebfn tr\xecnh con (worker processes). Ti\u1ebfn tr\xecnh ch\xednh chia s\u1ebb c\xe1c k\u1ebft n\u1ed1i TCP v\xe0 UDP v\u1edbi c\xe1c ti\u1ebfn tr\xecnh con, cho ph\xe9p ch\xfang chia s\u1ebb k\u1ebft n\u1ed1i m\u1ea1ng v\xe0 x\u1eed l\xfd c\xe1c y\xeau c\u1ea7u \u0111\u1ed3ng th\u1eddi. Khi m\u1ed9t y\xeau c\u1ea7u \u0111\u01b0\u1ee3c nh\u1eadn, ti\u1ebfn tr\xecnh ch\xednh ph\xe2n ph\u1ed1i y\xeau c\u1ea7u \u0111\xf3 t\u1edbi m\u1ed9t trong c\xe1c ti\u1ebfn tr\xecnh con \u0111ang c\xf3 s\u1eb5n."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const cluster = require("cluster");\nconst http = require("http");\nconst numCPUs = require("os").cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on("exit", (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this example, it\'s an HTTP server\n  http\n    .createServer((req, res) => {\n      res.writeHead(200);\n      res.end("Hello from Node.js!");\n    })\n    .listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n')),(0,c.kt)("p",null,"Gi\u1ea3i th\xedch:"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},"\u0110\u1ea7u ti\xean, ch\xfang ta ki\u1ec3m tra xem ti\u1ebfn tr\xecnh hi\u1ec7n t\u1ea1i c\xf3 ph\u1ea3i l\xe0 ti\u1ebfn tr\xecnh ch\xednh (master process) b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng cluster.isMaster. Ti\u1ebfn tr\xecnh ch\xednh c\xf3 tr\xe1ch nhi\u1ec7m t\u1ea1o ra c\xe1c ti\u1ebfn tr\xecnh con (workers)."),(0,c.kt)("li",{parentName:"ol"},"N\u1ebfu \u0111\xf3 l\xe0 ti\u1ebfn tr\xecnh ch\xednh, ch\xfang ta t\u1ea1o ra bao nhi\xeau ti\u1ebfn tr\xecnh con (workers) t\u01b0\u01a1ng \u1ee9ng v\u1edbi s\u1ed1 l\xf5i CPU s\u1eed d\u1ee5ng cluster.fork()."),(0,c.kt)("li",{parentName:"ol"},"Ch\xfang ta thi\u1ebft l\u1eadp m\u1ed9t tr\xecnh l\u1eafng nghe s\u1ef1 ki\u1ec7n tr\xean ti\u1ebfn tr\xecnh ch\xednh \u0111\u1ec3 l\u1eafng nghe s\u1ef1 ki\u1ec7n exit. S\u1ef1 ki\u1ec7n n\xe0y \u0111\u01b0\u1ee3c k\xedch ho\u1ea1t khi m\u1ed9t ti\u1ebfn tr\xecnh con ch\u1ebft \u0111i."),(0,c.kt)("li",{parentName:"ol"},'N\u1ebfu \u0111\xf3 kh\xf4ng ph\u1ea3i l\xe0 ti\u1ebfn tr\xecnh ch\xednh (ngh\u0129a l\xe0 n\xf3 l\xe0 m\u1ed9t ti\u1ebfn tr\xecnh con), ch\xfang ta thi\u1ebft l\u1eadp m\u1ed9t m\xe1y ch\u1ee7 HTTP l\u1eafng nghe tr\xean c\u1ed5ng 8000 v\xe0 ph\u1ea3n h\u1ed3i v\u1edbi chu\u1ed7i "Hello from Node.js!".')),(0,c.kt)("p",null,"\u1ede \u0111\xe2y, ch\xfang ta s\u1eed d\u1ee5ng cluster \u0111\u1ec3 t\u1ea1o nhi\u1ec1u ti\u1ebfn tr\xecnh con ch\u1ea1y c\xf9ng m\u1ed9t \u1ee9ng d\u1ee5ng, t\u1eadn d\u1ee5ng s\u1ee9c m\u1ea1nh c\u1ee7a nhi\u1ec1u l\xf5i CPU. Khi m\u1ed9t ti\u1ebfn tr\xecnh con k\u1ebft th\xfac ho\u1eb7c b\u1ecb t\u1eaft, ti\u1ebfn tr\xecnh ch\xednh c\xf3 th\u1ec3 t\u1ea1o l\u1ea1i m\u1ed9t ti\u1ebfn tr\xecnh con m\u1edbi \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o s\u1ebd lu\xf4n c\xf3 c\xe1c ti\u1ebfn tr\xecnh con s\u1eb5n s\xe0ng \u0111\u1ec3 x\u1eed l\xfd c\xe1c y\xeau c\u1ea7u."))}p.isMDXComponent=!0}}]);