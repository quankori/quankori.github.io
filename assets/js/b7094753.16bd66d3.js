"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[407],{3905:(e,o,n)=>{n.d(o,{Zo:()=>u,kt:()=>f});var t=n(7294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function l(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?l(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function a(e,o){if(null==e)return{};var n,t,r=function(e,o){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),i=function(e){var o=t.useContext(s),n=o;return e&&(n="function"==typeof e?e(o):c(c({},o),e)),n},u=function(e){var o=i(e.components);return t.createElement(s.Provider,{value:o},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},m=t.forwardRef((function(e,o){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=i(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?t.createElement(f,c(c({ref:o},u),{},{components:n})):t.createElement(f,c({ref:o},u))}));function f(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var l=n.length,c=new Array(l);c[0]=m;var a={};for(var s in o)hasOwnProperty.call(o,s)&&(a[s]=o[s]);a.originalType=e,a[p]="string"==typeof e?e:r,c[1]=a;for(var i=2;i<l;i++)c[i]=n[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1943:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>i});var t=n(7462),r=(n(7294),n(3905));const l={title:"Scopes"},c=void 0,a={unversionedId:"programming/nodejs/scope",id:"programming/nodejs/scope",title:"Scopes",description:"Global Scope",source:"@site/docs/programming/nodejs/scope.md",sourceDirName:"programming/nodejs",slug:"/programming/nodejs/scope",permalink:"/docs/programming/nodejs/scope",draft:!1,tags:[],version:"current",frontMatter:{title:"Scopes"},sidebar:"programming",previous:{title:"Modules",permalink:"/docs/programming/nodejs/modules"},next:{title:"Generics",permalink:"/docs/programming/nodejs/generics"}},s={},i=[{value:"Global Scope",id:"global-scope",level:2},{value:"Local (or Function) Scope",id:"local-or-function-scope",level:2},{value:"Block Scope (Introduced with ES6)",id:"block-scope-introduced-with-es6",level:2},{value:"Module Scope (With ES6 Modules)",id:"module-scope-with-es6-modules",level:2},{value:"Lexical Scope (Closures)",id:"lexical-scope-closures",level:2}],u={toc:i},p="wrapper";function d(e){let{components:o,...n}=e;return(0,r.kt)(p,(0,t.Z)({},u,n,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"global-scope"},"Global Scope"),(0,r.kt)("p",null,"A variable declared outside any function or block belongs to the global scope. Every script and function can access it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let globalVar = "I\'m globally scoped";\n\nfunction showGlobalVar() {\n  console.log(globalVar); // Accessible here\n}\n\nshowGlobalVar(); // Outputs: "I\'m globally scoped"\n')),(0,r.kt)("h2",{id:"local-or-function-scope"},"Local (or Function) Scope"),(0,r.kt)("p",null,"Variables declared within a function have local scope. They can't be accessed outside that function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function localFunction() {\n  let localVar = "I\'m locally scoped";\n  console.log(localVar); // Accessible here\n}\n\nlocalFunction(); // Outputs: "I\'m locally scoped"\n// console.log(localVar); // Error: localVar is not defined\n')),(0,r.kt)("h2",{id:"block-scope-introduced-with-es6"},"Block Scope (Introduced with ES6)"),(0,r.kt)("p",null,"With the introduction of let and const in ES6, JavaScript gained block-level scoping. This means that variables declared with let or const inside a block (like inside an if statement or a for loop) are only accessible within that block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'if (true) {\n  let blockVar = "I\'m block-scoped";\n  console.log(blockVar); // Accessible here\n}\n\n// console.log(blockVar); // Error: blockVar is not defined\n')),(0,r.kt)("h2",{id:"module-scope-with-es6-modules"},"Module Scope (With ES6 Modules)"),(0,r.kt)("p",null,"When using ES6 modules, top-level variables (those not exported) have module scope. They're local to the module and aren't accessible in other modules unless explicitly exported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let moduleVar = "I\'m module-scoped";\nexport function showVar() {\n  console.log(moduleVar);\n}\n\n// Another file js\n\nimport { showVar } from "./moduleA";\nshowVar(); // Outputs: "I\'m module-scoped"\n// moduleVar isn\'t directly accessible here\n')),(0,r.kt)("h2",{id:"lexical-scope-closures"},"Lexical Scope (Closures)"),(0,r.kt)("p",null,"Functions in JavaScript form closures. A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). It gives you access to the outer function's scope from an inner function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function outerFunction() {\n  let outerVar = "I\'m in the outer function";\n  function innerFunction() {\n    console.log(outerVar); // Accessible due to lexical scoping\n  }\n  innerFunction();\n}\n\nouterFunction(); // Outputs: "I\'m in the outer function"\n')))}d.isMDXComponent=!0}}]);