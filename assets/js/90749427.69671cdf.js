"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8218],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return r?n.createElement(g,s(s({ref:t},c),{},{components:r})):n.createElement(g,s({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1976:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Process and Thread"},s=void 0,i={unversionedId:"programming/nodejs/process-thread",id:"programming/nodejs/process-thread",title:"Process and Thread",description:"Node.js Processes and Threads",source:"@site/docs/programming/nodejs/process-thread.md",sourceDirName:"programming/nodejs",slug:"/programming/nodejs/process-thread",permalink:"/docs/programming/nodejs/process-thread",draft:!1,tags:[],version:"current",frontMatter:{title:"Process and Thread"},sidebar:"programming",previous:{title:"Nest.js Testing",permalink:"/docs/programming/nodejs/nestjs-testing"},next:{title:"Scopes",permalink:"/docs/programming/nodejs/scope"}},l={},p=[{value:"Node.js Processes and Threads",id:"nodejs-processes-and-threads",level:2},{value:"Node.js: Single-Threaded Event Loop",id:"nodejs-single-threaded-event-loop",level:2},{value:"Key Characteristics",id:"key-characteristics",level:3},{value:"Processes in Node.js",id:"processes-in-nodejs",level:3},{value:"Summary",id:"summary",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"nodejs-processes-and-threads"},"Node.js Processes and Threads"),(0,a.kt)("p",null,"Node.js is built on a single-threaded, event-driven architecture, which is fundamentally different from traditional multi-threaded platforms like Java. Understanding the differences between processes and threads in Node.js and how they compare to Java's blocking model is essential for grasping Node.js's performance and scalability characteristics."),(0,a.kt)("h2",{id:"nodejs-single-threaded-event-loop"},"Node.js: Single-Threaded Event Loop"),(0,a.kt)("h3",{id:"key-characteristics"},"Key Characteristics"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Single Thread"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js runs JavaScript code in a single thread. This thread is responsible for executing code, handling asynchronous events, and performing I/O operations."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Event Loop"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js uses an event loop to handle asynchronous operations. The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript itself is single-threaded."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Non-Blocking I/O"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js offloads I/O operations (e.g., file system access, network requests) to the system's underlying infrastructure, allowing other tasks to proceed while waiting for I/O operations to complete."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Libuv"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js uses the ",(0,a.kt)("inlineCode",{parentName:"li"},"libuv")," library to handle asynchronous I/O operations and the event loop.")))),(0,a.kt)("h3",{id:"processes-in-nodejs"},"Processes in Node.js"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Child Processes"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js can create additional processes using the ",(0,a.kt)("inlineCode",{parentName:"li"},"child_process")," module. These child processes can run separate instances of the V8 engine, effectively allowing parallel execution of JavaScript code.")))),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/child-process.jpg",alt:"Image"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { spawn } = require("child_process");\n\nconst child = spawn("ls", ["-lh", "/usr"]);\n\nchild.stdout.on("data", (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nchild.stderr.on("data", (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nchild.on("close", (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Worker Threads"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js introduced worker threads in version 10.5.0 to allow parallel execution of JavaScript code within a single process.")))),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/worker-thread.jpg",alt:"Image"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { Worker, isMainThread, parentPort } = require("worker_threads");\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  worker.on("message", (message) => console.log(message));\n  worker.postMessage("Hello, worker");\n} else {\n  parentPort.on("message", (message) => {\n    parentPort.postMessage(`Received: ${message}`);\n  });\n}\n')),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Node.js"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Single-threaded"),": Runs JavaScript code in a single thread."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event Loop"),": Manages asynchronous operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Non-blocking I/O"),": Allows efficient handling of I/O operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Child Processes and Worker Threads"),": For parallel execution.")))))}m.isMDXComponent=!0}}]);