"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[664],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),c=n,g=m["".concat(s,".").concat(c)]||m[c]||k[c]||l;return a?r.createElement(g,o(o({ref:t},p),{},{components:a})):r.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},463:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const l={title:"Message Queue CheatSheet"},o=void 0,i={unversionedId:"cheatsheet/fundamental/message-queue",id:"cheatsheet/fundamental/message-queue",title:"Message Queue CheatSheet",description:"Apache Kafka",source:"@site/docs/cheatsheet/fundamental/message-queue.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/message-queue",permalink:"/docs/cheatsheet/fundamental/message-queue",draft:!1,tags:[],version:"current",frontMatter:{title:"Message Queue CheatSheet"}},s={},u=[{value:"<strong>Apache Kafka</strong>",id:"apache-kafka",level:3},{value:"<strong>Structure</strong>",id:"structure",level:4},{value:"<strong>Workflow Visualization</strong>",id:"workflow-visualization",level:4},{value:"<strong>RabbitMQ</strong>",id:"rabbitmq",level:3},{value:"<strong>Structure</strong>",id:"structure-1",level:4},{value:"<strong>Workflow Visualization</strong>",id:"workflow-visualization-1",level:4},{value:"<strong>Comparative Summary</strong>",id:"comparative-summary",level:4}],p={toc:u},m="wrapper";function k(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"apache-kafka"},(0,n.kt)("strong",{parentName:"h3"},"Apache Kafka")),(0,n.kt)("h4",{id:"structure"},(0,n.kt)("strong",{parentName:"h4"},"Structure")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Producer"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Applications that send (publish) messages to Kafka topics."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Topic"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A category or feed name to which records are published."),(0,n.kt)("li",{parentName:"ul"},"Topics are partitioned for scalability and fault tolerance."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Partition"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A single log within a topic."),(0,n.kt)("li",{parentName:"ul"},"Each partition is an ordered, immutable sequence of records."),(0,n.kt)("li",{parentName:"ul"},"Partitions allow Kafka to scale horizontally."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Broker"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A Kafka server that stores data and serves clients."),(0,n.kt)("li",{parentName:"ul"},"A Kafka cluster consists of multiple brokers."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Consumer"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Applications that read (subscribe to) messages from Kafka topics."),(0,n.kt)("li",{parentName:"ul"},"Consumers can be part of a consumer group for load balancing."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Consumer Group"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A group of consumers that share the workload of reading from a topic."),(0,n.kt)("li",{parentName:"ul"},"Each partition is consumed by only one consumer in the group."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"ZooKeeper")," (Note: As of Kafka 2.8+, ZooKeeper is being phased out in favor of the Kafka Raft Metadata mode):",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Manages and coordinates the Kafka brokers.")))),(0,n.kt)("h4",{id:"workflow-visualization"},(0,n.kt)("strong",{parentName:"h4"},"Workflow Visualization")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[Producer A]       [Producer B]\n     |                  |\n     v                  v\n   +-----------------------+\n   |        Kafka          |\n   |   +---------------+   |\n   |   |   Topic 1     |   |\n   |   | Partition 0   |   |\n   |   | Partition 1   |   |\n   |   +---------------+   |\n   +-----------------------+\n        /           \\\n       /             \\\n[vConsumer Group 1] [vConsumer Group 2]\n[Consumer A1, A2]    [Consumer B1, B2]\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Explanation:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Multiple producers send messages to a Kafka topic."),(0,n.kt)("li",{parentName:"ul"},"The topic is divided into partitions to allow parallel processing."),(0,n.kt)("li",{parentName:"ul"},"Each consumer group can have multiple consumers, with each consumer handling different partitions, ensuring scalability and fault tolerance.")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"rabbitmq"},(0,n.kt)("strong",{parentName:"h3"},"RabbitMQ")),(0,n.kt)("h4",{id:"structure-1"},(0,n.kt)("strong",{parentName:"h4"},"Structure")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Producer"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Applications that send (publish) messages to RabbitMQ."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Exchange"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Receives messages from producers and routes them to queues based on routing rules."),(0,n.kt)("li",{parentName:"ul"},"Types of exchanges:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Direct"),": Routes messages with a specific routing key to queues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Topic"),": Routes messages based on pattern matching of routing keys."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Fanout"),": Broadcasts messages to all bound queues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Headers"),": Routes based on message header attributes."))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Queue"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Buffers messages until they are consumed."),(0,n.kt)("li",{parentName:"ul"},"Consumers subscribe to queues to receive messages."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Binding"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Rules that define how messages are routed from exchanges to queues."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Consumer"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Applications that receive (consume) messages from queues."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Broker"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The RabbitMQ server that manages exchanges, queues, and bindings.")))),(0,n.kt)("h4",{id:"workflow-visualization-1"},(0,n.kt)("strong",{parentName:"h4"},"Workflow Visualization")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[Producer A]       [Producer B]\n     |                  |\n     v                  v\n   +-----------------------+\n   |       Exchange        |\n   |   (e.g., Direct)      |\n   +----+-------+-----+----+\n        |       |     |\n        |       |     |\n        v       v     v\n    [Queue 1] [Queue 2] [Queue 3]\n        |        |        |\n        v        v        v\n [Consumer A1] [Consumer B1] [Consumer C1]\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Explanation:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Producers send messages to an exchange."),(0,n.kt)("li",{parentName:"ul"},"The exchange routes messages to one or more queues based on bindings and routing keys."),(0,n.kt)("li",{parentName:"ul"},"Consumers subscribe to queues to receive messages."),(0,n.kt)("li",{parentName:"ul"},"Depending on the exchange type, messages can be routed in various patterns (e.g., direct routing, broadcasting).")),(0,n.kt)("h4",{id:"comparative-summary"},(0,n.kt)("strong",{parentName:"h4"},"Comparative Summary")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Feature"),(0,n.kt)("th",{parentName:"tr",align:null},"Apache Kafka"),(0,n.kt)("th",{parentName:"tr",align:null},"RabbitMQ"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Architecture")),(0,n.kt)("td",{parentName:"tr",align:null},"Distributed log with partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"Broker with exchanges and queues")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Use Cases")),(0,n.kt)("td",{parentName:"tr",align:null},"Real-time data streaming, event sourcing, log aggregation"),(0,n.kt)("td",{parentName:"tr",align:null},"Task queues, request/reply, pub/sub")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Message Ordering")),(0,n.kt)("td",{parentName:"tr",align:null},"Within partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"In queues")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Throughput")),(0,n.kt)("td",{parentName:"tr",align:null},"Very high"),(0,n.kt)("td",{parentName:"tr",align:null},"Moderate to high")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Durability")),(0,n.kt)("td",{parentName:"tr",align:null},"High (replication and persistence)"),(0,n.kt)("td",{parentName:"tr",align:null},"High (durable queues and messages)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Scalability")),(0,n.kt)("td",{parentName:"tr",align:null},"Easily scalable by adding brokers"),(0,n.kt)("td",{parentName:"tr",align:null},"Scalable but may require more configuration")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Complexity")),(0,n.kt)("td",{parentName:"tr",align:null},"Higher (requires understanding of partitions and consumer groups)"),(0,n.kt)("td",{parentName:"tr",align:null},"Generally simpler to set up and use")))))}k.isMDXComponent=!0}}]);