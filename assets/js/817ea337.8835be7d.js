"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[356],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||s;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={title:"Node.js"},i=void 0,o={unversionedId:"cheatsheet/programming/nodejs",id:"cheatsheet/programming/nodejs",title:"Node.js",description:"Overview",source:"@site/docs/cheatsheet/programming/nodejs.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/nodejs",permalink:"/docs/cheatsheet/programming/nodejs",draft:!1,tags:[],version:"current",frontMatter:{title:"Node.js"},sidebar:"cheatsheet",previous:{title:"Serverless Architecture",permalink:"/docs/cheatsheet/system-design/serverless"},next:{title:"Nest.js",permalink:"/docs/cheatsheet/programming/nestjs"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Differences",id:"key-differences",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"JavaScript Ecosystem (Node.js, JS, TS)")," combines ",(0,a.kt)("strong",{parentName:"p"},"JavaScript")," (a dynamic, event-driven language), ",(0,a.kt)("strong",{parentName:"p"},"Node.js")," (a server-side runtime built on V8), and ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," (a statically typed superset of JS) into a powerful, unified platform. It supports scalable, high-performance applications with a rich ecosystem, leveraging event-driven architecture, asynchronous processing, and type safety for web, server, and real-time use cases."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event-driven model"),": Manages tasks via an event loop and non-blocking I/O."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"V8 engine"),": Executes JS with JIT compilation and garbage collection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Type system"),": Adds static typing and advanced features with TypeScript."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Language features"),": Includes dynamic typing, prototypes, and ES6+ enhancements.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Asynchronous programming"),": Uses callbacks, promises, and async/await."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Concurrency"),": Employs worker threads, clustering, and streams in Node.js."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory management"),": Optimizes memory usage across JS, TS, and Node.js."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Build optimization"),": Enhances builds with minification and TypeScript compilation.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Scales Node.js apps with load balancers and microservices."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Vertical scaling"),": Tunes Node.js event loop and memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Caching"),": Leverages in-memory and distributed caching solutions.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ecosystem & tools"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Package management"),": Manages dependencies with npm, Yarn, or pnpm."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Frameworks/libraries"),": Includes React, NestJS, and Express.js."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing"),": Uses Jest, Mocha, and Supertest for quality assurance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Debugging & profiling"),": Offers DevTools, Node Inspector, and TS debugging."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Deployment"),": Supports static hosting, Docker, and serverless platforms.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Module pattern"),": Encapsulates code in JS/TS modules."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Middleware pattern"),": Chains handlers in Node.js frameworks."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Factory pattern"),": Creates objects dynamically in JS/TS."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event emitter pattern"),": Manages events in Node.js.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Web applications"),": Builds client-side apps with JS/TS."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Real-time apps"),": Uses Node.js for WebSocket-based solutions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Server-side APIs"),": Creates REST/GraphQL APIs with Node.js/TS."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cross-platform development"),": Extends to mobile with React Native.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 event.service.ts\n\u251c\u2500\u2500 perf/\n\u2502   \u251c\u2500\u2500 async.service.ts\n\u2502   \u251c\u2500\u2500 worker.service.ts\n\u2502   \u251c\u2500\u2500 stream.service.ts\n\u251c\u2500\u2500 scale/\n\u2502   \u2514\u2500\u2500 redis.service.ts\n\u251c\u2500\u2500 patterns/\n\u2502   \u2514\u2500\u2500 middleware.service.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bash Scripts & Commands"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Redis for Caching (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nredis-server --port 6379 --dir data/redis --daemonize yes\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Nginx for Load Balancing (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\nsudo apt-get install nginx\necho "upstream backend {\n  server 127.0.0.1:3000;\n  server 127.0.0.1:3001;\n}\nserver {\n  listen 80;\n  location / {\n    proxy_pass http://backend;\n  }\n}" > /etc/nginx/sites-available/myapp\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Node.js Commands"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Run with TypeScript\nts-node src/main.ts\n\n# Build TS to JS\ntsc\n\n# Run with Inspector\nnode --inspect dist/main.js\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/event.service.ts (**Event-driven model**)\nimport { Injectable } from "@nestjs/common";\nimport { EventEmitter } from "events";\n\n@Injectable()\nexport class EventService {\n  private emitter = new EventEmitter();\n\n  async triggerEvent(event: string, data: any) {\n    this.emitter.emit(event, data); // **Event loop**\n    console.log("Event triggered:", event, data);\n  }\n\n  listen(event: string, callback: (data: any) => void) {\n    this.emitter.on(event, callback); // **Event emitter pattern**\n  }\n}\n\n// src/perf/async.service.ts (**Asynchronous programming**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class AsyncService {\n  async fetchData(id: number): Promise<string> {\n    return new Promise((resolve) =>\n      setTimeout(() => resolve(`Data ${id}`), 1000)\n    ); // **Promises**\n  }\n\n  async getData(id: number): Promise<string> {\n    return await this.fetchData(id); // **Async/await**\n  }\n}\n\n// src/perf/worker.service.ts (**Worker threads**)\nimport { Injectable } from "@nestjs/common";\nimport { Worker } from "worker_threads";\n\n@Injectable()\nexport class WorkerService {\n  async computeHeavyTask(data: number): Promise<number> {\n    return new Promise((resolve) => {\n      const worker = new Worker(\n        `\n        const { parentPort } = require(\'worker_threads\');\n        parentPort.postMessage(${data} * 2);\n      `,\n        { eval: true }\n      );\n      worker.on("message", resolve);\n    });\n  }\n}\n\n// src/perf/stream.service.ts (**Streams**)\nimport { Injectable } from "@nestjs/common";\nimport { createReadStream } from "fs";\n\n@Injectable()\nexport class StreamService {\n  async streamFile(filePath: string) {\n    const stream = createReadStream(filePath); // **Readable**\n    stream.pipe(process.stdout); // **Piping**\n    stream.on("data", (chunk) => console.log("Chunk:", chunk.length));\n  }\n}\n\n// src/scale/redis.service.ts (**Caching**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class RedisService {\n  private redis = new Redis({ host: "localhost", port: 6379 });\n\n  async cacheData(key: string, value: string) {\n    await this.redis.set(key, value, "EX", 3600); // **In-memory caching**\n  }\n\n  async getCachedData(key: string) {\n    return this.redis.get(key);\n  }\n}\n\n// src/patterns/middleware.service.ts (**Middleware pattern**)\nimport { Injectable, NestMiddleware } from "@nestjs/common";\nimport { Request, Response, NextFunction } from "express";\n\n@Injectable()\nexport class MiddlewareService implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log("Middleware executed");\n    next();\n  }\n}\n\n// src/app.module.ts\nimport { Module, MiddlewareConsumer } from "@nestjs/common";\nimport { EventService } from "./core/event.service";\nimport { AsyncService } from "./perf/async.service";\nimport { WorkerService } from "./perf/worker.service";\nimport { StreamService } from "./perf/stream.service";\nimport { RedisService } from "./scale/redis.service";\nimport { MiddlewareService } from "./patterns/middleware.service";\n\n@Module({\n  providers: [\n    EventService,\n    AsyncService,\n    WorkerService,\n    StreamService,\n    RedisService,\n    MiddlewareService,\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(MiddlewareService).forRoutes("*");\n  }\n}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { EventService } from "./core/event.service";\nimport { AsyncService } from "./perf/async.service";\nimport { WorkerService } from "./perf/worker.service";\nimport { StreamService } from "./perf/stream.service";\nimport { RedisService } from "./scale/redis.service";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const eventService = app.get(EventService);\n  const asyncService = app.get(AsyncService);\n  const workerService = app.get(WorkerService);\n  const streamService = app.get(StreamService);\n  const redisService = app.get(RedisService);\n\n  // **Event-driven model**\n  eventService.listen("test", (data) => console.log("Received:", data));\n  await eventService.triggerEvent("test", { id: 1 });\n\n  // **Asynchronous programming**\n  console.log(await asyncService.getData(1));\n\n  // **Worker threads**\n  console.log(await workerService.computeHeavyTask(10));\n\n  // **Streams**\n  await streamService.streamFile("example.txt");\n\n  // **Caching**\n  await redisService.cacheData("key", "value");\n  console.log(await redisService.getCachedData("key"));\n\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Architecture"),": Combines JS\u2019s event-driven nature, Node.js\u2019s runtime, and TS\u2019s type safety."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance Optimization"),": Leverages async, concurrency, and build tools across all three."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling"),": Node.js drives horizontal scaling, enhanced by TS\u2019s structure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ecosystem & Tools"),": Unified package management and frameworks for JS/TS/Node.js."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Design Patterns"),": Shared patterns like middleware and modules, with TS adding type-safe variants."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use Cases"),": Spans web, server, real-time, and cross-platform with a cohesive stack.")))}d.isMDXComponent=!0}}]);