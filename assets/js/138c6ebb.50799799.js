"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(t),v=s,d=m["".concat(i,".").concat(v)]||m[v]||u[v]||a;return t?r.createElement(d,o(o({ref:n},l),{},{components:t})):r.createElement(d,o({ref:n},l))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=v;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[m]="string"==typeof e?e:s,o[1]=c;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},3229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=t(7462),s=(t(7294),t(3905));const a={title:"Event-Driven Architecture"},o=void 0,c={unversionedId:"cheatsheet/system-design/event-driven",id:"cheatsheet/system-design/event-driven",title:"Event-Driven Architecture",description:"Event-Driven Architecture",source:"@site/docs/cheatsheet/system-design/event-driven.md",sourceDirName:"cheatsheet/system-design",slug:"/cheatsheet/system-design/event-driven",permalink:"/docs/cheatsheet/system-design/event-driven",draft:!1,tags:[],version:"current",frontMatter:{title:"Event-Driven Architecture"},sidebar:"cheatsheet",previous:{title:"Domain-Centric Architectures",permalink:"/docs/cheatsheet/system-design/domain-centric"},next:{title:"Microservices Architecture",permalink:"/docs/cheatsheet/system-design/microservices"}},i={},p=[{value:"Event-Driven Architecture",id:"event-driven-architecture",level:2},{value:"Event Sourcing",id:"event-sourcing",level:2},{value:"Events Processing",id:"events-processing",level:2},{value:"Key Differences",id:"key-differences",level:2}],l={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,s.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"event-driven-architecture"},"Event-Driven Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Event-Driven Architecture designs systems to react to events\u2014discrete occurrences that trigger actions\u2014enabling asynchronous, decoupled communication between components, ideal for scalability and responsiveness."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Events"),": Occurrences that trigger actions or updates in the system."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Event handlers"),": Logic that processes events and performs tasks."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Event notification"),": Simple event broadcasting to notify components without state persistence."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 events/\n\u2502   \u2514\u2500\u2500 user.events.ts\n\u251c\u2500\u2500 handlers/\n\u2502   \u2514\u2500\u2500 user.handler.ts\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 kafka.service.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example (with Kafka)"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/events/user.events.ts (**Events**)\nexport class UserCreatedEvent {\n  constructor(public userId: number, public name: string) {}\n}\n\n// src/handlers/user.handler.ts (**Event handlers**)\nimport { Injectable } from "@nestjs/common";\nimport { UserCreatedEvent } from "../events/user.events";\n\n@Injectable()\nexport class UserHandler {\n  handleUserCreated(event: UserCreatedEvent) {\n    console.log(`User ${event.name} (ID: ${event.userId}) created`);\n  }\n}\n\n// src/services/kafka.service.ts (**Event notification**)\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { Kafka, Producer, Consumer } from "kafkajs";\nimport { UserCreatedEvent } from "../events/user.events";\nimport { UserHandler } from "../handlers/user.handler";\n\n@Injectable()\nexport class KafkaService implements OnModuleInit {\n  private kafka = new Kafka({\n    clientId: "my-app",\n    brokers: ["localhost:9092"],\n  });\n  private producer: Producer;\n  private consumer: Consumer;\n\n  constructor(private userHandler: UserHandler) {\n    this.producer = this.kafka.producer();\n    this.consumer = this.kafka.consumer({ groupId: "user-group" });\n  }\n\n  async onModuleInit() {\n    await this.producer.connect();\n    await this.consumer.connect();\n    await this.consumer.subscribe({\n      topic: "user-events",\n      fromBeginning: true,\n    });\n\n    await this.consumer.run({\n      eachMessage: async ({ message }) => {\n        const event = JSON.parse(message.value.toString()) as UserCreatedEvent;\n        this.userHandler.handleUserCreated(event);\n      },\n    });\n  }\n\n  async emitUserCreated(userId: number, name: string) {\n    const event = new UserCreatedEvent(userId, name);\n    await this.producer.send({\n      topic: "user-events",\n      messages: [{ value: JSON.stringify(event) }],\n    });\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { KafkaService } from "./services/kafka.service";\nimport { UserHandler } from "./handlers/user.handler";\n\n@Module({\n  providers: [KafkaService, UserHandler],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { KafkaService } from "./services/kafka.service";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const kafkaService = app.get(KafkaService);\n\n  // Emit event to Kafka\n  await kafkaService.emitUserCreated(1, "John");\n\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note"),": Requires Kafka running locally (",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:9092"),"). Install ",(0,s.kt)("inlineCode",{parentName:"p"},"kafkajs")," via ",(0,s.kt)("inlineCode",{parentName:"p"},"npm install kafkajs"),"."),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"event-sourcing"},"Event Sourcing"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Event Sourcing persists the state of an application as a sequence of events rather than a single snapshot, allowing reconstruction of state by replaying events, enhancing auditability and flexibility."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Event sourcing"),": Stores all changes as events to rebuild state."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Event store"),": Repository for persisting event sequences."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"State reconstruction"),": Rebuilds current state by replaying events."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 domain/\n\u2502   \u2514\u2500\u2500 user.entity.ts\n\u251c\u2500\u2500 events/\n\u2502   \u2514\u2500\u2500 user.events.ts\n\u251c\u2500\u2500 store/\n\u2502   \u2514\u2500\u2500 event.store.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/domain/user.entity.ts (**State reconstruction**)\nexport class User {\n  constructor(public id: number, public name: string = "") {}\n\n  applyEvent(event: UserCreatedEvent | UserUpdatedEvent) {\n    if (event instanceof UserCreatedEvent) this.name = event.name;\n    if (event instanceof UserUpdatedEvent) this.name = event.newName;\n  }\n}\n\n// src/events/user.events.ts (**Event sourcing**)\nexport class UserCreatedEvent {\n  constructor(public userId: number, public name: string) {}\n}\n\nexport class UserUpdatedEvent {\n  constructor(public userId: number, public newName: string) {}\n}\n\n// src/store/event.store.ts (**Event store**)\nimport { Injectable } from "@nestjs/common";\nimport { UserCreatedEvent, UserUpdatedEvent } from "../events/user.events";\n\n@Injectable()\nexport class EventStore {\n  private events: (UserCreatedEvent | UserUpdatedEvent)[] = [];\n\n  saveEvent(event: UserCreatedEvent | UserUpdatedEvent) {\n    this.events.push(event);\n  }\n\n  getEventsForUser(userId: number) {\n    return this.events.filter((e) => e.userId === userId);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { EventStore } from "./store/event.store";\n\n@Module({\n  providers: [EventStore],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { EventStore } from "./store/event.store";\nimport { UserCreatedEvent, UserUpdatedEvent } from "./events/user.events";\nimport { User } from "./domain/user.entity";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const eventStore = app.get(EventStore);\n\n  // Store events\n  eventStore.saveEvent(new UserCreatedEvent(1, "John"));\n  eventStore.saveEvent(new UserUpdatedEvent(1, "Jane"));\n\n  // Reconstruct state\n  const user = new User(1);\n  const events = eventStore.getEventsForUser(1);\n  events.forEach((event) => user.applyEvent(event));\n  console.log(user.name); // Outputs: Jane\n\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"events-processing"},"Events Processing"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Events Processing focuses on handling and transforming events in real-time or batches, enabling responsive systems through stream or batch processing techniques."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Events processing"),": Handles and transforms events as they occur."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Stream processing"),": Real-time event handling (e.g., Kafka, Flink)."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Batch processing"),": Processes events in groups periodically."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 events/\n\u2502   \u2514\u2500\u2500 user.events.ts\n\u251c\u2500\u2500 processors/\n\u2502   \u251c\u2500\u2500 stream.processor.ts\n\u2502   \u251c\u2500\u2500 batch.processor.ts\n\u2502   \u2514\u2500\u2500 kafka.service.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example (with Kafka)"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/events/user.events.ts (**Events processing**)\nexport class UserCreatedEvent {\n  constructor(\n    public userId: number,\n    public name: string,\n    public timestamp: number\n  ) {}\n}\n\n// src/processors/kafka.service.ts (Kafka Setup)\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { Kafka, Producer, Consumer } from "kafkajs";\nimport { UserCreatedEvent } from "../events/user.events";\nimport { StreamProcessor } from "./stream.processor";\nimport { BatchProcessor } from "./batch.processor";\n\n@Injectable()\nexport class KafkaService implements OnModuleInit {\n  private kafka = new Kafka({\n    clientId: "my-app",\n    brokers: ["localhost:9092"],\n  });\n  private producer: Producer;\n  private consumer: Consumer;\n\n  constructor(\n    private streamProcessor: StreamProcessor,\n    private batchProcessor: BatchProcessor\n  ) {\n    this.producer = this.kafka.producer();\n    this.consumer = this.kafka.consumer({ groupId: "user-group" });\n  }\n\n  async onModuleInit() {\n    await this.producer.connect();\n    await this.consumer.connect();\n    await this.consumer.subscribe({\n      topic: "user-events",\n      fromBeginning: true,\n    });\n\n    await this.consumer.run({\n      eachMessage: async ({ message }) => {\n        const event = JSON.parse(message.value.toString()) as UserCreatedEvent;\n        this.streamProcessor.processStream(event); // Stream processing\n      },\n    });\n  }\n\n  async emitEvent(event: UserCreatedEvent) {\n    await this.producer.send({\n      topic: "user-events",\n      messages: [{ value: JSON.stringify(event) }],\n    });\n  }\n}\n\n// src/processors/stream.processor.ts (**Stream processing**)\nimport { Injectable } from "@nestjs/common";\nimport { UserCreatedEvent } from "../events/user.events";\n\n@Injectable()\nexport class StreamProcessor {\n  processStream(event: UserCreatedEvent) {\n    console.log(\n      `[Stream] Real-time: User ${event.name} (ID: ${event.userId}) created at ${event.timestamp}`\n    );\n  }\n}\n\n// src/processors/batch.processor.ts (**Batch processing**)\nimport { Injectable } from "@nestjs/common";\nimport { UserCreatedEvent } from "../events/user.events";\n\n@Injectable()\nexport class BatchProcessor {\n  private eventBatch: UserCreatedEvent[] = [];\n\n  addToBatch(event: UserCreatedEvent) {\n    this.eventBatch.push(event);\n    if (this.eventBatch.length >= 3) {\n      // Batch size of 3\n      this.processBatch();\n    }\n  }\n\n  processBatch() {\n    console.log("[Batch] Processing batch:", this.eventBatch);\n    this.eventBatch = []; // Clear batch after processing\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { KafkaService } from "./processors/kafka.service";\nimport { StreamProcessor } from "./processors/stream.processor";\nimport { BatchProcessor } from "./processors/batch.processor";\n\n@Module({\n  providers: [KafkaService, StreamProcessor, BatchProcessor],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { KafkaService } from "./processors/kafka.service";\nimport { BatchProcessor } from "./processors/batch.processor";\nimport { UserCreatedEvent } from "./events/user.events";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const kafkaService = app.get(KafkaService);\n  const batchProcessor = app.get(BatchProcessor);\n\n  // Emit events to Kafka for stream processing\n  await kafkaService.emitEvent(new UserCreatedEvent(1, "John", Date.now()));\n  await kafkaService.emitEvent(new UserCreatedEvent(2, "Jane", Date.now()));\n\n  // Simulate batch processing\n  batchProcessor.addToBatch(new UserCreatedEvent(3, "Alice", Date.now()));\n  batchProcessor.addToBatch(new UserCreatedEvent(4, "Bob", Date.now()));\n  batchProcessor.addToBatch(new UserCreatedEvent(5, "Charlie", Date.now())); // Triggers batch\n\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note"),": Requires Kafka running locally (",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:9092"),"). Install ",(0,s.kt)("inlineCode",{parentName:"p"},"kafkajs")," via ",(0,s.kt)("inlineCode",{parentName:"p"},"npm install kafkajs"),"."),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"key-differences"},"Key Differences"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Event-Driven: Reacts to events with handlers or notifications, now using Kafka for realism."),(0,s.kt)("li",{parentName:"ul"},"Event Sourcing: Persists state as events for reconstruction."),(0,s.kt)("li",{parentName:"ul"},"Events Pro")))}u.isMDXComponent=!0}}]);