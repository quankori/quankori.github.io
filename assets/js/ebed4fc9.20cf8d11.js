"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[185],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},m="mdxType",s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,l=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),m=u(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||i;return t?r.createElement(f,a(a({ref:e},p),{},{components:t})):r.createElement(f,a({ref:e},p))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c[m]="string"==typeof n?n:o,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7895:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const i={title:"Go Advanced"},a=void 0,c={unversionedId:"programming/go/advanced",id:"programming/go/advanced",title:"Go Advanced",description:"Marshal",source:"@site/docs/programming/go/advanced.md",sourceDirName:"programming/go",slug:"/programming/go/advanced",permalink:"/docs/programming/go/advanced",draft:!1,tags:[],version:"current",frontMatter:{title:"Go Advanced"},sidebar:"programming",previous:{title:"SOLID Principle",permalink:"/docs/programming/concept/solid"},next:{title:"Go Concept",permalink:"/docs/programming/go/concept"}},l={},u=[{value:"Marshal",id:"marshal",level:2},{value:"Goroutines",id:"goroutines",level:2},{value:"Mutex",id:"mutex",level:2},{value:"Channel",id:"channel",level:2},{value:"Wait Group",id:"wait-group",level:2}],p={toc:u},m="wrapper";function s(n){let{components:e,...t}=n;return(0,o.kt)(m,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"marshal"},"Marshal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type person struct {\n    First string\n}\n\n// Marshal func\nfunc marshal() {\n    p1 := person{\n        First: "A",\n    }\n    p2 := person{\n        First: "B",\n    }\n\n    xp := []person{p1, p2}\n\n    bs, err := json.Marshal(xp) // d\u1ecbch struct th\xe0nh json\n    if err != nil {\n        log.Panic(err)\n    }\n    fmt.Println(string(bs)) // [{"First":"A"},{"First":"B"}]\n\n    xp2 := []person{}\n\n    err = json.Unmarshal(bs, &xp2) // d\u1ecbch json th\xe0nh struct\n    if err != nil {\n        log.Panic(err)\n    }\n    fmt.Println(xp2) // [{A} {B}]\n}\n')),(0,o.kt)("h2",{id:"goroutines"},"Goroutines"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func numbers() {\n    for i := 1; i <= 5; i++ {\n        time.Sleep(250 * time.Millisecond)\n        fmt.Printf("%d ", i)\n    }\n}\nfunc alphabets() {\n    for i := \'a\'; i <= \'e\'; i++ {\n        time.Sleep(400 * time.Millisecond)\n        fmt.Printf("%c ", i)\n    }\n}\n\n// Goroutines func\nfunc goroutines() {\n    go numbers()\n    go alphabets()\n    time.Sleep(3000 * time.Millisecond)\n    fmt.Println("main terminated")\n}\n')),(0,o.kt)("h2",{id:"mutex"},"Mutex"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'\n// Khai b\xe1o m\u1ed9t instance mutex\nvar mu sync.Mutex\n\n//Khai b\xe1o bi\u1ebfn count \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi t\u1ea5t c\u1ea3 c\xe1c routine\nvar count = 0\n\n// Sao ch\xe9p count v\xe0o temp, th\u1ef1c hi\u1ec7n m\u1ed9t v\xe0i x\u1eed l\xfd (t\u0103ng d\u1ea7n) v\xe0 l\u01b0u l\u1ea1i v\xe0o count\n// t\u1ea1m d\u1eebng m\u1ed9t kho\u1ea3ng ng\u1eabu nhi\xean \u0111\u01b0\u1ee3c th\xeam v\xe0o gi\u1eefa l\xfac \u0111\u1ecdc v\xe0 ghi count\nfunc process(n int) {\n    //V\xf2ng l\u1eb7p t\u0103ng count 10 l\u1ea7n\n    for i := 0; i < 10; i++ {\n        time.Sleep(time.Duration(rand.Int31n(2)) * time.Second)\n        //B\u1eaft \u0111\u1ea7u kho\xe1 \u1edf \u0111\xe2y\n        mu.Lock()\n        temp := count\n        temp++\n        time.Sleep(time.Duration(rand.Int31n(2)) * time.Second)\n        count = temp\n        // M\u1edf kho\xe1\n        mu.Unlock()\n    }\n    fmt.Println("Count after i="+strconv.Itoa(n)+" Count:", strconv.Itoa(count))\n}\n\n// Mutex func\nfunc mutex() {\n    //l\u1eb7p g\u1ecdi process() 3 l\u1ea7n\n    for i := 1; i < 4; i++ {\n        go process(i)\n    }\n\n    //T\u1ea1m d\u1eebng \u0111\u1ec3 \u0111\u1ee3i cho t\u1ea5t c\u1ea3 routine ho\xe0n th\xe0nh\n    time.Sleep(25 * time.Second)\n    fmt.Println("Final Count:", count)\n}\n')),(0,o.kt)("h2",{id:"channel"},"Channel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func send(c chan int) {\n    for i := 0; i < 5; i++ {\n        fmt.Printf("send %v to channel\\n", i)\n        c <- i // send i to channel\n    }\n}\n\nfunc receive(c chan int) {\n    for i := 0; i < 5; i++ {\n        time.Sleep(1 * time.Millisecond)\n        s := <-c // receive channel\n        fmt.Println(s)\n    }\n}\n\n// Channel func\nfunc channel() {\n    c := make(chan int)\n    go send(c)\n    go receive(c)\n    time.Sleep(100 * time.Millisecond)\n    fmt.Println("end")\n}\n')),(0,o.kt)("h2",{id:"wait-group"},"Wait Group"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func waitGroup() {\n    r := rand.New(rand.NewSource(time.Now().Unix()))\n    wc := new(sync.WaitGroup)\n    wc.Add(2)\n\n    go func() {\n        time.Sleep(time.Second * time.Duration(r.Intn(5)))\n        fmt.Println("Goroutine 1 done.")\n        wc.Done()\n    }()\n\n    go func() {\n        time.Sleep(time.Second * time.Duration(r.Intn(5)))\n        fmt.Println("Goroutine 2 done.")\n        wc.Done()\n    }()\n\n    wc.Wait()\n    fmt.Println("All Goroutines done")\n}\n')))}s.isMDXComponent=!0}}]);