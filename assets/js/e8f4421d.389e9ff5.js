"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[794],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,k=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5671:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={title:"Core CheatSheet"},l=void 0,s={unversionedId:"cheatsheet/fundamental/core",id:"cheatsheet/fundamental/core",title:"Core CheatSheet",description:"Object-Oriented Programming (OOP)",source:"@site/docs/cheatsheet/fundamental/core.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/core",permalink:"/docs/cheatsheet/fundamental/core",draft:!1,tags:[],version:"current",frontMatter:{title:"Core CheatSheet"},sidebar:"cheatsheet",previous:{title:"RxJS CheatSheet",permalink:"/docs/cheatsheet/nodejs/rxjs"},next:{title:"Design Pattern CheatSheet",permalink:"/docs/cheatsheet/fundamental/design-pattern"}},o={},c=[{value:"Object-Oriented Programming (OOP)",id:"object-oriented-programming-oop",level:3},{value:"Stateless / Stateful",id:"stateless--stateful",level:3},{value:"Process / Thread",id:"process--thread",level:3},{value:"SSH",id:"ssh",level:3},{value:"SSL",id:"ssl",level:3},{value:"BigO",id:"bigo",level:3},{value:"Heap vs. Stack",id:"heap-vs-stack",level:3},{value:"Heap",id:"heap",level:4},{value:"Stack",id:"stack",level:4},{value:"Concurrency vs. Parallelism",id:"concurrency-vs-parallelism",level:3},{value:"Concurrency",id:"concurrency",level:4},{value:"Parallelism",id:"parallelism",level:4}],m={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"object-oriented-programming-oop"},"Object-Oriented Programming (OOP)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Encapsulation: Bundling data with methods that operate on that data."),(0,r.kt)("li",{parentName:"ul"},"Inheritance: Creating new classes from existing ones to promote code reuse."),(0,r.kt)("li",{parentName:"ul"},"Polymorphism: Allowing objects to be treated as instances of their parent class, enabling flexibility."),(0,r.kt)("li",{parentName:"ul"},"Abstraction: Hiding complex implementation details and exposing only necessary parts.")),(0,r.kt)("h3",{id:"stateless--stateful"},"Stateless / Stateful"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stateless: The server does not retain any information about the client between requests. Each request is independent and contains all necessary information."),(0,r.kt)("li",{parentName:"ul"},"Stateful: The server maintains context or state about the client across multiple requests, allowing for persistent interactions.")),(0,r.kt)("h3",{id:"process--thread"},"Process / Thread"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Process: An independent program in execution with its own memory space. Processes are isolated from each other, providing stability and security."),(0,r.kt)("li",{parentName:"ul"},"Thread: The smallest unit of processing within a process, sharing the same memory space. Threads allow concurrent execution within a process, enabling parallelism.")),(0,r.kt)("h3",{id:"ssh"},"SSH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------+                        +----------+\n|  Client |                        |  Server  |\n+---------+                        +----------+\n     |                                   |\n     |       1. Initiate Connection      |\n     |-----------------------------------\x3e|\n     |                                   |\n     |       2. Server Sends Public Key  |\n     |<-----------------------------------|\n     |                                   |\n     | 3. Client Verifies Server's Identity|\n     |                                   |\n     |   4. Client Generates Session Key |\n     |-----------------------------------\x3e|\n     |                                   |\n     | 5. Server Acknowledges Session Key|\n     |<-----------------------------------|\n     |                                   |\n     |    6. Encrypted Communication Begins|\n     |-----------------------------------\x3e|\n     |                                   |\n     |          ... Data Transfer ...     |\n     |                                   |\n")),(0,r.kt)("h3",{id:"ssl"},"SSL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------+                        +----------+\n|  Client |                        |  Server  |\n+---------+                        +----------+\n     |                                   |\n     |      1. Client Hello               |\n     |-----------------------------------\x3e|\n     |                                   |\n     |      2. Server Hello               |\n     |      3. Server Certificate         |\n     |      4. Server Key Exchange        |\n     |      5. Server Hello Done          |\n     |<-----------------------------------|\n     |                                   |\n     |      6. Client Key Exchange        |\n     |      7. Change Cipher Spec         |\n     |      8. Client Finished            |\n     |-----------------------------------\x3e|\n     |                                   |\n     |      9. Change Cipher Spec         |\n     |     10. Server Finished            |\n     |<-----------------------------------|\n     |                                   |\n     |      11. Encrypted Data Transfer   |\n     |<-----------------------------------\x3e|\n     |                                   |\n")),(0,r.kt)("h3",{id:"bigo"},"BigO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O(1): Constant time"),(0,r.kt)("li",{parentName:"ul"},"O(log n): Logarithmic time"),(0,r.kt)("li",{parentName:"ul"},"O(n): Linear time"),(0,r.kt)("li",{parentName:"ul"},"O(n log n): Linearithmic time"),(0,r.kt)("li",{parentName:"ul"},"O(n\xb2): Quadratic time")),(0,r.kt)("h3",{id:"heap-vs-stack"},"Heap vs. Stack"),(0,r.kt)("h4",{id:"heap"},"Heap"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Definition"),": A memory region used for dynamic memory allocation where variables are allocated and freed in an arbitrary order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Characteristics"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Size"),": Typically larger than the stack."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lifetime"),": Variables persist until they are explicitly deallocated or garbage collected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access Speed"),": Slower access compared to the stack due to the need for dynamic allocation and deallocation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Usage"),": Suitable for objects whose size or lifetime cannot be determined at compile time."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Case"),": Managing large data structures like trees, graphs, or objects in languages with dynamic memory allocation (e.g., Java's ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," operator).")),(0,r.kt)("h4",{id:"stack"},"Stack"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Definition"),": A memory region that stores temporary variables created by functions. It operates in a last-in, first-out (LIFO) manner."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Characteristics"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Size"),": Limited size, typically smaller than the heap."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lifetime"),": Variables are automatically deallocated when the function call ends."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access Speed"),": Faster access due to predictable allocation and deallocation order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Usage"),": Suitable for function call management and small, temporary variables."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Case"),": Managing function call stacks, storing primitive data types, and local variables within functions.")),(0,r.kt)("h3",{id:"concurrency-vs-parallelism"},"Concurrency vs. Parallelism"),(0,r.kt)("h4",{id:"concurrency"},"Concurrency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Definition"),": The ability of a system to handle multiple tasks simultaneously by managing their execution over time, often through interleaving."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Characteristics"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Task Management"),": Multiple tasks make progress without necessarily executing at the same instant."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Resource Sharing"),": Tasks may share resources like CPU time, memory, and I/O."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Complexity"),": Requires careful handling of synchronization, race conditions, and deadlocks."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Cases"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Web Servers"),": Handling multiple client requests simultaneously by interleaving their processing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"User Interfaces"),": Allowing responsiveness by managing multiple input events and background tasks concurrently."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Real-Time Systems"),": Managing multiple real-time tasks that need to make progress within certain time constraints.")))),(0,r.kt)("h4",{id:"parallelism"},"Parallelism"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Definition"),": The ability to execute multiple tasks or parts of a task simultaneously, typically using multiple processors or cores."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Characteristics"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Simultaneous Execution"),": Tasks or task parts run at the same time on different processing units."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance"),": Can significantly reduce execution time for compute-intensive tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hardware Dependency"),": Requires hardware support for multiple processing units."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Cases"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scientific Computing"),": Performing large-scale simulations and computations by distributing tasks across multiple cores or machines."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Image and Video Processing"),": Processing multiple frames or pixels in parallel to speed up rendering and encoding."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Big Data Analytics"),": Distributing data processing tasks across a cluster of machines to handle large datasets efficiently.")))))}u.isMDXComponent=!0}}]);