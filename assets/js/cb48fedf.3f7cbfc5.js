"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[44],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),g=c,d=u["".concat(s,".").concat(g)]||u[g]||h[g]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=n.length,o=new Array(a);o[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:c,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),c=(n(7294),n(3905));const a={title:"Testing"},o=void 0,i={unversionedId:"programming/nestjs/testing",id:"programming/nestjs/testing",title:"Testing",description:"Concept",source:"@site/docs/programming/nestjs/testing.md",sourceDirName:"programming/nestjs",slug:"/programming/nestjs/testing",permalink:"/docs/programming/nestjs/testing",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing"},sidebar:"programming",previous:{title:"Decorators",permalink:"/docs/programming/nestjs/decorators"}},s={},l=[{value:"Concept",id:"concept",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"E2E Testing",id:"e2e-testing",level:3},{value:"Test Dobles",id:"test-dobles",level:2},{value:"Fakes",id:"fakes",level:3},{value:"Stub",id:"stub",level:3},{value:"Spy",id:"spy",level:3},{value:"Code",id:"code",level:2}],p={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,c.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"concept"},"Concept"),(0,c.kt)("h3",{id:"unit-testing"},"Unit Testing"),(0,c.kt)("p",null,"Ki\u1ec3m tra t\u1eebng ph\u1ea7n ri\xeang l\u1ebb c\u1ee7a m\xe3 ngu\u1ed3n m\xe0 kh\xf4ng c\u1ea7n li\xean quan \u0111\u1ebfn c\xe1c th\xe0nh ph\u1ea7n b\xean ngo\xe0i (v\xed d\u1ee5: c\u01a1 s\u1edf d\u1eef li\u1ec7u, m\u1ea1ng, API). Trong unit testing, b\u1ea1n t\u1eadp trung v\xe0o vi\u1ec7c ki\u1ec3m tra h\xe0m, l\u1edbp, ho\u1eb7c th\xe0nh ph\u1ea7n nh\u1ecf kh\xe1c c\u1ee7a m\xe3 ngu\u1ed3n."),(0,c.kt)("p",null,"Unit testing t\u1eadp trung v\xe0o vi\u1ebft tests cho c\xe1c ph\u1ea7n nh\u1ecf nh\u1ea5t (ph\u1ea7n l\u1edbn l\xe0 c\xe1c functions \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong classes). MethodA \u1edf classA c\xf3 th\u1ec3 g\u1ecdi \u0111\u01b0\u1ee3c MethodB \u1edf classB, ttuy nhi\xean, unit test c\u1ee7a MethodA ch\u1ec9 t\u1eadp trung v\xe0o logic c\u1ee7a MethodA, kh\xf4ng ph\u1ea3i MethodB"),(0,c.kt)("h3",{id:"e2e-testing"},"E2E Testing"),(0,c.kt)("p",null,"Ki\u1ec3m tra ho\u1ea1t \u0111\u1ed9ng c\u1ee7a to\xe0n b\u1ed9 \u1ee9ng d\u1ee5ng t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i, bao g\u1ed3m t\u01b0\u01a1ng t\xe1c gi\u1eefa c\xe1c th\xe0nh ph\u1ea7n v\xe0 ph\u1ea7n kh\xe1c nhau c\u1ee7a h\u1ec7 th\u1ed1ng nh\u01b0 c\u01a1 s\u1edf d\u1eef li\u1ec7u, API, v\xe0 giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng."),(0,c.kt)("h2",{id:"test-dobles"},"Test Dobles"),(0,c.kt)("p",null,"M\u1ed9t test double l\xe0 m\u1ed9t object hay system m\xe0 b\u1ea1n d\xf9ng trong test \u0111\u1ec3 thay th\u1ebf cho m\u1ed9t c\xe1i g\xec \u0111\xf3."),(0,c.kt)("h3",{id:"fakes"},"Fakes"),(0,c.kt)("p",null,"M\u1ed9t object v\u1edbi kh\u1ea3 n\u0103ng gi\u1edbi h\u1ea1n(cho m\u1ee5c \u0111\xedch testing), VD: fake web service. Fake c\xf3 ho\u1ea1t \u0111\u1ed9ng kinh doanh. B\u1ea1n c\xf3 th\u1ec3 khi\u1ebfn Fake ho\u1ea1t \u0111\u1ed9ng theo nh\u1eefng c\xe1ch kh\xe1c nhau b\u1eb1ng c\xe1ch cung c\u1ea5p cho n\xf3 nh\u1eefng data kh\xe1c nhau. Fakes c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi b\u1ea1n kh\xf4ng th\u1ec3 d\xf9ng tri\u1ec3n khai th\u1ef1c t\u1ebf trong test c\u1ee7a m\xecnh."),(0,c.kt)("h3",{id:"stub"},"Stub"),(0,c.kt)("p",null,"M\u1ed9t object cung c\u1ea5p c\xe1c c\xe2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c x\xe1c \u0111\u1ecbnh \u0111\u1ec3 method g\u1ecdi. Stub kh\xf4ng c\xf3 logic v\xe0 ch\u1ec9 tr\u1ea3 v\u1ec1 nh\u1eefng g\xec b\u1ea1n y\xeau c\u1ea7u tr\u1ea3 v\u1ec1"),(0,c.kt)("h3",{id:"spy"},"Spy"),(0,c.kt)("p",null,"Spy l\xe0 m\u1ed9t lo\u1ea1i Stub \u0111\u1eb7c bi\u1ec7t, n\u01a1i b\u1ea1n c\xf3 th\u1ec3 theo d\xf5i v\xe0 ki\u1ec3m tra c\xe1ch m\xe0 ph\u01b0\u01a1ng th\u1ee9c \u0111\xe3 \u0111\u01b0\u1ee3c g\u1ecdi v\xe0 v\u1edbi c\xe1c \u0111\u1ed1i s\u1ed1 n\xe0o. Spy cho ph\xe9p b\u1ea1n ghi l\u1ea1i th\xf4ng tin v\u1ec1 vi\u1ec7c g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 ki\u1ec3m tra xem ch\xfang c\xf3 \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 mong \u0111\u1ee3i hay kh\xf4ng."),(0,c.kt)("h2",{id:"code"},"Code"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},'class PaymentGateway {\n  processPayment(amount: number): Promise<boolean> {\n    // G\u1eedi y\xeau c\u1ea7u thanh to\xe1n v\xe0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3\n  }\n}\n\ndescribe("OrderService", () => {\n  it("should place order successfully with valid payment", async () => {\n    const paymentGatewayFake = {\n      processPayment: async (amount: number) => true,\n    };\n\n    const paymentGatewayStub = {\n      processPayment: jest.fn().mockResolvedValue(true),\n    };\n\n    const paymentGatewaySpy = {\n      processPayment: jest.spyOn(paymentGatewayStub, "processPayment"),\n    };\n\n    const orderServiceFake = new OrderService(paymentGatewayFake as any);\n    const orderServiceStub = new OrderService(paymentGatewayStub as any);\n    const orderServiceSpy = new OrderService(paymentGatewaySpy as any);\n\n    const resultFake = await orderServiceFake.placeOrder(100);\n    const resultStub = await orderServiceStub.placeOrder(100);\n    const resultSpy = await orderServiceSpy.placeOrder(100);\n\n    expect(resultFake).toBe("Order placed successfully");\n    expect(resultStub).toBe("Order placed successfully");\n    expect(resultSpy).toBe("Order placed successfully");\n\n    expect(paymentGatewaySpy.processPayment).toHaveBeenCalledWith(100);\n  });\n});\n')))}h.isMDXComponent=!0}}]);