"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[591],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),g=i,d=m["".concat(l,".").concat(g)]||m[g]||u[g]||a;return t?r.createElement(d,s(s({ref:n},c),{},{components:t})):r.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const a={title:"Design Principle"},s=void 0,o={unversionedId:"cheatsheet/fundamental/design-principle",id:"cheatsheet/fundamental/design-principle",title:"Design Principle",description:"Principle Design",source:"@site/docs/cheatsheet/fundamental/design-principle.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/design-principle",permalink:"/docs/cheatsheet/fundamental/design-principle",draft:!1,tags:[],version:"current",frontMatter:{title:"Design Principle"},sidebar:"cheatsheet",previous:{title:"Programming Design Pattern",permalink:"/docs/cheatsheet/fundamental/programming-design-pattern"},next:{title:"Message Queue",permalink:"/docs/cheatsheet/fundamental/message-queue"}},l={},p=[{value:"Principle Design",id:"principle-design",level:2},{value:"Key Differences",id:"key-differences",level:2}],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"principle-design"},"Principle Design"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview"),": Principle Design encompasses foundational strategies and guidelines for software architecture, emphasizing simplicity, flexibility, scalability, and maintainability, guiding developers in building robust systems."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Monolithic first strategy"),": Starts with a single, unified app before evolving to distributed systems."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Polyglot persistence"),": Uses multiple database types for different needs (e.g., SQL, NoSQL)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Core development principles"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SOLID"),": Five principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) for clean code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"DRY"),": Avoids code duplication (Don\u2019t Repeat Yourself)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"KISS"),": Keeps designs simple (Keep It Simple, Stupid)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"YAGNI"),": Avoids unnecessary features (You Aren\u2019t Gonna Need It)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"GRASP"),": Assigns responsibilities effectively (General Responsibility Assignment Software Patterns).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inversion of control (IoC)"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dependency injection"),": Passes dependencies to objects rather than creating them internally."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"IoC containers"),": Manages dependency injection automatically (e.g., NestJS DI)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Service locator"),": Retrieves dependencies from a central registry.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CAP theorem"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Consistency"),": Ensures all nodes see the same data at the same time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Availability"),": Guarantees a response even during failures."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Partition tolerance"),": Handles network partitions gracefully."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Trade-offs"),": Balances CAP properties (e.g., CA, CP, AP systems).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Scalability principles"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Horizontal vs vertical scaling"),": Adds servers (horizontal) or upgrades hardware (vertical)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Load balancing"),": Distributes traffic across servers (e.g., Nginx)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Caching strategies"),": Improves performance with in-memory storage (e.g., Redis).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 principles/\n\u2502   \u251c\u2500\u2500 user.service.ts       (SOLID, DI)\n\u2502   \u251c\u2500\u2500 polyglot.service.ts   (Polyglot Persistence)\n\u2502   \u251c\u2500\u2500 redis.service.ts      (Caching)\n\u2514\u2500\u2500 app.module.ts\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Bash Scripts & Commands"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Setup Redis for Caching (Bash Script)"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n# Start Redis\nredis-server --port 6379 --dir data/redis --daemonize yes\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Setup Nginx for Load Balancing (Bash Script)"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Install Nginx (Ubuntu example)\nsudo apt-get install nginx\necho "upstream backend {\n  server 127.0.0.1:3000;\n  server 127.0.0.1:3001;\n}\nserver {\n  listen 80;\n  location / {\n    proxy_pass http://backend;\n  }\n}" > /etc/nginx/sites-available/myapp\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"PostgreSQL Command (for Polyglot)"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR(50));\nINSERT INTO users (name) VALUES ('John');\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"MongoDB Command (for Polyglot)"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'db.users.insertOne({ id: 1, name: "John" });\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/principles/user.service.ts (**SOLID**, **Dependency injection**)\nimport { Injectable } from "@nestjs/common";\n\n// Interface for **Interface Segregation**\nexport interface UserRepository {\n  getUser(id: number): Promise<any>;\n}\n\n@Injectable()\nexport class UserService {\n  constructor(private repo: UserRepository) {} // **Dependency Injection**\n\n  // **Single Responsibility**: Only handles user logic\n  async getUser(id: number) {\n    return this.repo.getUser(id);\n  }\n}\n\n@Injectable()\nexport class MockUserRepository implements UserRepository {\n  async getUser(id: number) {\n    return { id, name: "John" }; // Mock data\n  }\n}\n\n// src/principles/polyglot.service.ts (**Polyglot persistence**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\nimport { MongoClient } from "mongodb";\n\n@Injectable()\nexport class PolyglotService {\n  private pgPool = new Pool({\n    user: "postgres",\n    database: "mydb",\n    password: "password",\n    port: 5432,\n  });\n  private mongoClient = new MongoClient("mongodb://localhost:27017");\n\n  async getFromPostgres(id: number) {\n    const result = await this.pgPool.query(\n      "SELECT * FROM users WHERE id = $1",\n      [id]\n    );\n    return result.rows[0]; // **Relational**\n  }\n\n  async getFromMongo(id: number) {\n    const db = this.mongoClient.db("mydb");\n    return db.collection("users").findOne({ id }); // **NoSQL Document**\n  }\n}\n\n// src/principles/redis.service.ts (**Caching strategies**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class RedisService {\n  private redis = new Redis({ host: "localhost", port: 6379 });\n\n  async cacheUser(id: number, data: string) {\n    await this.redis.set(`user:${id}`, data, "EX", 3600); // **Caching**\n  }\n\n  async getCachedUser(id: number) {\n    return this.redis.get(`user:${id}`);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService, MockUserRepository } from "./principles/user.service";\nimport { PolyglotService } from "./principles/polyglot.service";\nimport { RedisService } from "./principles/redis.service";\n\n@Module({\n  providers: [\n    UserService,\n    { provide: "UserRepository", useClass: MockUserRepository }, // **IoC Container**\n    PolyglotService,\n    RedisService,\n  ],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { UserService } from "./principles/user.service";\nimport { PolyglotService } from "./principles/polyglot.service";\nimport { RedisService } from "./principles/redis.service";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const userService = app.get(UserService);\n  const polyglotService = app.get(PolyglotService);\n  const redisService = app.get(RedisService);\n\n  // **Monolithic first strategy**: Simple app structure\n  console.log(await userService.getUser(1)); // **SOLID**, **DI**\n\n  // **Polyglot persistence**\n  console.log(await polyglotService.getFromPostgres(1));\n  console.log(await polyglotService.getFromMongo(1));\n\n  // **Caching strategies** & **Horizontal scaling** (with load balancing assumed)\n  await redisService.cacheUser(1, "John");\n  console.log(await redisService.getCachedUser(1));\n\n  await app.listen(3000);\n}\nbootstrap();\n')))),(0,i.kt)("h2",{id:"key-differences"},"Key Differences"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Monolithic First"),": Starts simple, evolves later."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Polyglot Persistence"),": Uses diverse DBs for specific needs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Core Principles"),": Guides clean, simple, and efficient code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"IoC"),": Inverts dependency control for flexibility."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CAP Theorem"),": Balances consistency, availability, and partition tolerance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Scalability Principles"),": Enhances system growth and performance.")))}u.isMDXComponent=!0}}]);