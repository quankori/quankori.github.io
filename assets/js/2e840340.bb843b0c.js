"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[395],{3905:(n,e,o)=>{o.d(e,{Zo:()=>u,kt:()=>g});var t=o(7294);function a(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function l(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function i(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?l(Object(o),!0).forEach((function(e){a(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function r(n,e){if(null==n)return{};var o,t,a=function(n,e){if(null==n)return{};var o,t,a={},l=Object.keys(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||(a[o]=n[o]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(a[o]=n[o])}return a}var c=t.createContext({}),s=function(n){var e=t.useContext(c),o=e;return n&&(o="function"==typeof n?n(e):i(i({},e),n)),o},u=function(n){var e=s(n.components);return t.createElement(c.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},f=t.forwardRef((function(n,e){var o=n.components,a=n.mdxType,l=n.originalType,c=n.parentName,u=r(n,["components","mdxType","originalType","parentName"]),p=s(o),f=a,g=p["".concat(c,".").concat(f)]||p[f]||d[f]||l;return o?t.createElement(g,i(i({ref:e},u),{},{components:o})):t.createElement(g,i({ref:e},u))}));function g(n,e){var o=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=o.length,i=new Array(l);i[0]=f;var r={};for(var c in e)hasOwnProperty.call(e,c)&&(r[c]=e[c]);r.originalType=n,r[p]="string"==typeof n?n:a,i[1]=r;for(var s=2;s<l;s++)i[s]=o[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}f.displayName="MDXCreateElement"},3955:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var t=o(7462),a=(o(7294),o(3905));const l={title:"JavaScript CheatSheet"},i=void 0,r={unversionedId:"cheatsheet/nodejs/javascript",id:"cheatsheet/nodejs/javascript",title:"JavaScript CheatSheet",description:"Scope",source:"@site/docs/cheatsheet/nodejs/javascript.md",sourceDirName:"cheatsheet/nodejs",slug:"/cheatsheet/nodejs/javascript",permalink:"/docs/cheatsheet/nodejs/javascript",draft:!1,tags:[],version:"current",frontMatter:{title:"JavaScript CheatSheet"},sidebar:"cheatsheet",previous:{title:"Fundamental CheatSheet",permalink:"/docs/cheatsheet/nodejs/core"},next:{title:"TypeScript CheatSheet",permalink:"/docs/cheatsheet/nodejs/typescript"}},c={},s=[{value:"Scope",id:"scope",level:3},{value:"Global Scope",id:"global-scope",level:4},{value:"Function Scope",id:"function-scope",level:4},{value:"Block Scope",id:"block-scope",level:4},{value:"Lexical Scope",id:"lexical-scope",level:4},{value:"Hoisting",id:"hoisting",level:4},{value:"Closures",id:"closures",level:4},{value:"Scope Chain",id:"scope-chain",level:4}],u={toc:s},p="wrapper";function d(n){let{components:e,...o}=n;return(0,a.kt)(p,(0,t.Z)({},u,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"scope"},"Scope"),(0,a.kt)("h4",{id:"global-scope"},"Global Scope"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Global variable\nvar globalVar = "I am global";\nlet globalLet = "I am also global";\nconst globalConst = "I am a global constant";\n\nfunction displayGlobal() {\n  console.log(globalVar);\n  console.log(globalLet);\n  console.log(globalConst);\n}\n\ndisplayGlobal();\nconsole.log(globalVar);\nconsole.log(globalLet);\nconsole.log(globalConst);\n\n// Output:\n// I am global\n// I am also global\n// I am a global constant\n// I am global\n// I am also global\n// I am a global constant\n\nvar globalVar = "var variable";\nlet globalLet = "let variable";\n\nconsole.log(window.globalVar); // Accessible\nconsole.log(window.globalLet); // Undefined\n')),(0,a.kt)("h4",{id:"function-scope"},"Function Scope"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function outerFunction() {\n  var functionVar = "I am inside a function";\n  let functionLet = "I am also inside a function";\n  const functionConst = "I am a function constant";\n\n  console.log(functionVar);\n  console.log(functionLet);\n  console.log(functionConst);\n}\n\nouterFunction();\n\n// Trying to access function-scoped variables outside the function\nconsole.log(functionVar); // ReferenceError\nconsole.log(functionLet); // ReferenceError\nconsole.log(functionConst); // ReferenceError\n\n// Output:\n// I am inside a function\n// I am also inside a function\n// I am a function constant\n// ReferenceError: functionVar is not defined\n')),(0,a.kt)("h4",{id:"block-scope"},"Block Scope"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(`var loop: ${i}`), 100);\n}\n\nfor (let j = 0; j < 3; j++) {\n  setTimeout(() => console.log(`let loop: ${j}`), 100);\n}\n\n// Output:\n// var loop: 3\n// var loop: 3\n// var loop: 3\n// let loop: 0\n// let loop: 1\n// let loop: 2\n")),(0,a.kt)("h4",{id:"lexical-scope"},"Lexical Scope"),(0,a.kt)("p",null,"JavaScript uses lexical scope (also known as static scope), meaning the accessibility of variables is determined by their physical location in the code during writing, not during execution."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let outer = "I am outside!";\n\nfunction outerFunction() {\n  let inner = "I am inside!";\n\n  function innerFunction() {\n    console.log(outer); // Accessible due to lexical scope\n    console.log(inner); // Accessible due to lexical scope\n  }\n\n  innerFunction();\n}\n\nouterFunction();\n\n// Output:\n// I am outside!\n// I am inside!\n')),(0,a.kt)("h4",{id:"hoisting"},"Hoisting"),(0,a.kt)("p",null,"Hoisting is JavaScript's default behavior of moving declarations to the top of their containing scope before code execution. This applies to var, let, const, and functions."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"var declarations are hoisted and initialized with undefined."),(0,a.kt)("li",{parentName:"ul"},"let and const are hoisted but not initialized, resulting in a Temporal Dead Zone (TDZ) until their declaration is evaluated."),(0,a.kt)("li",{parentName:"ul"},"Function declarations are hoisted, allowing them to be called before their definition."),(0,a.kt)("li",{parentName:"ul"},"Function expressions are not hoisted.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'console.log(hoistedVar); // Outputs: undefined\nvar hoistedVar = "I am hoisted!";\nconsole.log(hoistedVar); // Outputs: I am hoisted!\n\n// Output:\n// undefined\n// I am hoisted!\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'hoistedFunction(); // Outputs: I am a hoisted function!\n\nfunction hoistedFunction() {\n  console.log("I am a hoisted function!");\n}\n\n// Output:\n// I am a hoisted function!\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'hoistedFunctionExpr(); // TypeError: hoistedFunctionExpr is not a function\n\nvar hoistedFunctionExpr = function () {\n  console.log("I am a function expression!");\n};\n\n// Output:\n// TypeError: hoistedFunctionExpr is not a function\n')),(0,a.kt)("h4",{id:"closures"},"Closures"),(0,a.kt)("p",null,"A closure is a function that remembers and accesses variables from outside its own scope, even after the outer function has finished executing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function outer() {\n  let count = 0;\n\n  function inner() {\n    count++;\n    console.log(`Count: ${count}`);\n  }\n\n  return inner;\n}\n\nconst counter = outer();\ncounter(); // Count: 1\ncounter(); // Count: 2\n")),(0,a.kt)("h4",{id:"scope-chain"},"Scope Chain"),(0,a.kt)("p",null,"The scope chain determines the order in which variable lookups are performed. When a variable is not found in the current scope, JavaScript looks up in the outer scopes until it reaches the global scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let globalVar = 'Global';\n\nfunction firstFunction() {\n  let firstVar = 'First';\n\n  function secondFunction() {\n    let secondVar = 'Second';\n\n    console.log(globalVar); // Found in global scope\n    console.log(firstVar);  // Found in firstFunction scope\n    console.log(secondVar); // Found in secondFunction scope\n  }\n\n  secondFunction();\n}\n\nfirstFunction();\n\n// Output:\n// Global\n// First\n// Second\n")),(0,a.kt)("p",null,"Example: Chained Function Calls with Scope Chain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function a() {\n  const aVar = 'Variable in a';\n  \n  return {\n    b: function() {\n      const bVar = 'Variable in b';\n      \n      return {\n        c: function() {\n          const cVar = 'Variable in c';\n          console.log(aVar); // Accessible from a's scope\n          console.log(bVar); // Accessible from b's scope\n          console.log(cVar); // Accessible from c's own scope\n        }\n      }\n    }\n  }\n}\n\na().b().c();\n\n// Output:\n// Variable in a\n// Variable in b\n// Variable in c\n")))}d.isMDXComponent=!0}}]);