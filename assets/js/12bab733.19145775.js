"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[617],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const s={title:"Nest.js CheatSheet"},a=void 0,l={unversionedId:"cheatsheet/nodejs/nestjs",id:"cheatsheet/nodejs/nestjs",title:"Nest.js CheatSheet",description:"Lazy-loading Module",source:"@site/docs/cheatsheet/nodejs/nestjs.md",sourceDirName:"cheatsheet/nodejs",slug:"/cheatsheet/nodejs/nestjs",permalink:"/docs/cheatsheet/nodejs/nestjs",draft:!1,tags:[],version:"current",frontMatter:{title:"Nest.js CheatSheet"},sidebar:"cheatsheet",previous:{title:"TypeScript CheatSheet",permalink:"/docs/cheatsheet/nodejs/typescript"},next:{title:"RxJS CheatSheet",permalink:"/docs/cheatsheet/nodejs/rxjs"}},i={},c=[{value:"Lazy-loading Module",id:"lazy-loading-module",level:3},{value:"Accessing IoC container",id:"accessing-ioc-container",level:3},{value:"Reflector",id:"reflector",level:3},{value:"Composition with Mixins",id:"composition-with-mixins",level:3}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"lazy-loading-module"},"Lazy-loading Module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Controller()\nexport class AppController {\n  constructor(private readonly lazyModuleLoader: LazyModuleLoader) {}\n\n  @Get()\n  async getLazyReport(): Promise<string> {\n    console.time();\n    const moduleRef = await this.lazyModuleLoader.load(() => ReportsModule);\n    const reportsService = moduleRef.get(ReportsService);\n    console.timeEnd();\n    return reportsService.getReport();\n  }\n}\n")),(0,o.kt)("h3",{id:"accessing-ioc-container"},"Accessing IoC container"),(0,o.kt)("p",null,"Access the Inversion of Control (IoC) container to retrieve instances of providers dynamically using ModuleRef."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Injectable, OnModuleInit } from "@nestjs/common";\nimport { ModuleRef } from "@nestjs/core";\nimport { UsersService } from "./users/users.service";\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n  constructor(private moduleRef: ModuleRef) {}\n\n  onModuleInit() {\n    const usersService = this.moduleRef.get<UsersService>(UsersService, {\n      strict: false,\n    });\n    usersService.findAll();\n  }\n}\n')),(0,o.kt)("h3",{id:"reflector"},"Reflector"),(0,o.kt)("p",null,"Reflector is used to access metadata set by decorators, commonly utilized in guards, interceptors, and decorators."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// roles.decorator.ts\nimport { SetMetadata } from "@nestjs/common";\n\nexport const Roles = (...roles: string[]) => SetMetadata("roles", roles);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// roles.guard.ts\nimport { Injectable, CanActivate, ExecutionContext } from "@nestjs/common";\nimport { Reflector } from "@nestjs/core";\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get<string[]>("roles", context.getHandler());\n    console.log("RolesGuard:", roles);\n    return roles ? roles.includes("admin") : true;\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// users.controller.ts\nimport { Controller, Get, UseGuards } from "@nestjs/common";\nimport { Roles } from "./roles.decorator";\nimport { RolesGuard } from "./roles.guard";\n\n@Controller("users")\n@UseGuards(RolesGuard)\nexport class UsersController {\n  @Get()\n  @Roles("admin")\n  findAll() {\n    return "This action returns all users";\n  }\n}\n')),(0,o.kt)("h3",{id:"composition-with-mixins"},"Composition with Mixins"),(0,o.kt)("p",null,"Mixins allow for composing classes with reusable functionality, enhancing modularity and code reuse."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// logger.mixin.ts\nexport function LoggerMixin<T extends new (...args: any[]) => {}>(Base: T) {\n  return class extends Base {\n    log(message: string) {\n      console.log(`LoggerMixin: ${message}`);\n    }\n  };\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// users.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { LoggerMixin } from "./logger.mixin";\n\n@Injectable()\nexport class UsersServiceBase {\n  findAll() {\n    return ["User1", "User2"];\n  }\n}\n\n@Injectable()\nexport class UsersService extends LoggerMixin(UsersServiceBase) {\n  findAll() {\n    const users = super.findAll();\n    this.log(`Fetched ${users.length} users`);\n    return users;\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// users.controller.ts\nimport { Controller, Get } from "@nestjs/common";\nimport { UsersService } from "./users.service";\n\n@Controller("users")\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n}\n')),(0,o.kt)("h3",{id:""}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install opossum\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// src/common/interceptors/circuit-breaker.interceptor.ts\nimport {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  HttpException,\n  HttpStatus,\n} from "@nestjs/common";\nimport { Observable, from, throwError } from "rxjs";\nimport { catchError, switchMap } from "rxjs/operators";\nimport * as CircuitBreaker from "opossum";\nimport { ExternalService } from "../../external/external.service";\n\n@Injectable()\nexport class CircuitBreakerInterceptor implements NestInterceptor {\n  private breaker: CircuitBreaker;\n\n  constructor(private externalService: ExternalService) {\n    // Configure the circuit breaker\n    this.breaker = new CircuitBreaker(this.externalService.fetchData, {\n      timeout: 3000, // If function takes longer than 3 seconds, trigger a failure\n      errorThresholdPercentage: 50, // Percentage of failures before opening the circuit\n      resetTimeout: 5000, // Time to wait before trying again after the circuit is opened\n    });\n\n    // Event listeners for circuit breaker state changes\n    this.breaker.on("open", () => console.log("Circuit Breaker: OPEN"));\n    this.breaker.on("halfOpen", () =>\n      console.log("Circuit Breaker: HALF-OPEN")\n    );\n    this.breaker.on("close", () => console.log("Circuit Breaker: CLOSED"));\n    this.breaker.on("fallback", () => console.log("Circuit Breaker: FALLBACK"));\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return from(this.breaker.fire()).pipe(\n      switchMap((data) => {\n        // Attach external data to the request\n        const request = context.switchToHttp().getRequest();\n        request.externalData = data;\n        return next.handle();\n      }),\n      catchError((err) => {\n        // Handle fallback or throw an exception\n        console.log("CircuitBreakerInterceptor: Fallback triggered.");\n        return throwError(\n          new HttpException(\n            "Service unavailable. Please try again later.",\n            HttpStatus.SERVICE_UNAVAILABLE\n          )\n        );\n      })\n    );\n  }\n}\n')))}m.isMDXComponent=!0}}]);