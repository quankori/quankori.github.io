"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"PostgreSQL"},l=void 0,o={unversionedId:"blog/database/postgresql",id:"blog/database/postgresql",title:"PostgreSQL",description:"Core Features",source:"@site/docs/blog/database/postgresql.md",sourceDirName:"blog/database",slug:"/blog/database/postgresql",permalink:"/blog/database/postgresql",draft:!1,tags:[],version:"current",frontMatter:{title:"PostgreSQL"}},s={},p=[{value:"Core Features",id:"core-features",level:2},{value:"Core Features Service",id:"core-features-service",level:3},{value:"Scaling",id:"scaling",level:2},{value:"Scaling Service",id:"scaling-service",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Performance Service",id:"performance-service",level:3},{value:"Transactional Integrity",id:"transactional-integrity",level:2},{value:"Transactional Integrity Service",id:"transactional-integrity-service",level:3},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Design Patterns Service",id:"design-patterns-service",level:3}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"core-features"},"Core Features"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core features"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relational model"),": Organizes data into tables with rows and columns."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Advanced data types"),": Supports JSON, Arrays, HStore for flexible storage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensibility"),": Allows custom functions and extensions (e.g., PostGIS).")),(0,r.kt)("h3",{id:"core-features-service"},"Core Features Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/corefeatures.service.ts (**Core features**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class CoreFeaturesService {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432,\n    });\n  }\n\n  async saveRelationalData(id: number, name: string): Promise<void> {\n    await this.pool.query("INSERT INTO users (id, name) VALUES ($1, $2)", [\n      id,\n      name,\n    ]);\n    console.log(`Saved to relational table: ${id}, ${name}`);\n  }\n\n  async saveAdvancedData(\n    id: number,\n    name: string,\n    jsonData: any,\n    tags: string[]\n  ): Promise<void> {\n    await this.pool.query(\n      "INSERT INTO users_advanced (id, name, json_data, tags) VALUES ($1, $2, $3, $4)",\n      [id, name, JSON.stringify(jsonData), tags]\n    );\n    console.log(\n      `Saved with advanced types: ${id}, ${name}, ${JSON.stringify(\n        jsonData\n      )}, ${tags}`\n    );\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core Features Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates PostgreSQL\u2019s relational model and advanced data types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Initializes a PostgreSQL connection pool. ",(0,r.kt)("inlineCode",{parentName:"li"},"saveRelationalData")," inserts data into a simple ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," table (relational model), while ",(0,r.kt)("inlineCode",{parentName:"li"},"saveAdvancedData")," uses JSON and array types in a ",(0,r.kt)("inlineCode",{parentName:"li"},"users_advanced")," table, showcasing flexible storage options, with logging for visibility."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Core Features Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relational Model"),": Tables like ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," with structured rows/columns (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"name"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Advanced Data Types"),": JSON for unstructured data (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"json_data"),"), Arrays for lists (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"tags"),"), HStore possible but not shown."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensibility"),": Not coded; PostGIS or custom functions (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"CREATE FUNCTION"),") extend capabilities.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scaling"},"Scaling"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read replication"),": Master-Slave setup for read scaling.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Streaming replication"),": Physical, real-time data syncing to replicas."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Logical replication"),": Replicates specific data changes logically."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Partitioning"),": Splits large tables for horizontal scaling.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Range partitioning"),": Divides by range (e.g., dates)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"List partitioning"),": Divides by specific values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hash partitioning"),": Distributes via hash function.")))),(0,r.kt)("h3",{id:"scaling-service"},"Scaling Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/scaling/scaling.service.ts (**Scaling**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class ScalingService {\n  private masterPool: Pool;\n  private slavePool: Pool;\n\n  constructor() {\n    this.masterPool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432, // Master\n    });\n    this.slavePool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5433, // Slave (assumed)\n    });\n  }\n\n  async writeToMaster(id: number, name: string): Promise<void> {\n    await this.masterPool.query(\n      "INSERT INTO users (id, name) VALUES ($1, $2)",\n      [id, name]\n    );\n    console.log(`Wrote to master: ${id}, ${name}`);\n  }\n\n  async readFromSlave(id: number): Promise<any> {\n    const result = await this.slavePool.query(\n      "SELECT * FROM users WHERE id = $1",\n      [id]\n    );\n    console.log(`Read from slave: ${JSON.stringify(result.rows[0])}`);\n    return result.rows[0];\n  }\n\n  async partitionData(\n    id: number,\n    name: string,\n    created: string\n  ): Promise<void> {\n    await this.masterPool.query(\n      "INSERT INTO orders (id, name, created) VALUES ($1, $2, $3)", // Assumes partitioned table\n      [id, name, created]\n    );\n    console.log(`Partitioned data: ${id}, ${name}, ${created}`);\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates read replication and partitioning with PostgreSQL."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Initializes separate pools for master (port 5432) and slave (port 5433, assumed), ",(0,r.kt)("inlineCode",{parentName:"li"},"writeToMaster")," writes to the master, ",(0,r.kt)("inlineCode",{parentName:"li"},"readFromSlave")," reads from the slave (assuming replication), and ",(0,r.kt)("inlineCode",{parentName:"li"},"partitionData")," inserts into an ",(0,r.kt)("inlineCode",{parentName:"li"},"orders")," table (assumed partitioned externally), logging actions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scaling Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read Replication"),": Master writes, slaves sync (streaming/logical assumed setup)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Partitioning"),": Range (e.g., by ",(0,r.kt)("inlineCode",{parentName:"li"},"created")," date) possible with ",(0,r.kt)("inlineCode",{parentName:"li"},"PARTITION BY RANGE")," (not coded; requires table setup).")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Indexing"),": Speeds queries with B-Tree, GiST, GIN, or BRIN indexes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"EXPLAIN/ANALYZE"),": Analyzes query plans for optimization."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Avoid N+1 problem"),": Uses eager loading or joins to reduce queries."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vacuum & autovacuum"),": Manages dead rows for garbage collection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection pooling"),": Optimizes connections with tools like PgBouncer.")),(0,r.kt)("h3",{id:"performance-service"},"Performance Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/performance/performance.service.ts (**Performance optimization**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class PerformanceService {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432,\n      max: 10, // Connection pooling\n    });\n  }\n\n  async indexedQuery(id: number): Promise<any> {\n    const result = await this.pool.query("SELECT * FROM users WHERE id = $1", [\n      id,\n    ]);\n    console.log(`Indexed query result: ${JSON.stringify(result.rows[0])}`);\n    return result.rows[0];\n  }\n\n  async avoidNPlusOne(userId: number): Promise<any> {\n    const result = await this.pool.query(\n      "SELECT u.id, u.name, o.order_id FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE u.id = $1",\n      [userId]\n    );\n    console.log(`Eager loaded result: ${JSON.stringify(result.rows)}`);\n    return result.rows;\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates indexing and N+1 avoidance with PostgreSQL."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Initializes a connection pool with a max of 10 connections, ",(0,r.kt)("inlineCode",{parentName:"li"},"indexedQuery")," assumes an index on ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," for fast retrieval, and ",(0,r.kt)("inlineCode",{parentName:"li"},"avoidNPlusOne")," uses a join to fetch user and order data together, avoiding multiple queries, with logging for visibility."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Indexing"),": B-Tree on ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," (assumed) speeds queries."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"EXPLAIN/ANALYZE"),": Not coded; would analyze query plans (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"EXPLAIN SELECT ..."),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Avoid N+1"),": Join reduces query count vs. separate fetches."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vacuum & Autovacuum"),": Not coded; PostgreSQL manages dead tuples automatically."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection Pooling"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"max: 10")," reuses connections.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"transactional-integrity"},"Transactional Integrity"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Transactional integrity"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ACID transactions"),": Ensures reliable data operations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transaction isolation levels"),": Controls visibility of changes.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read uncommitted"),": Allows dirty reads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read committed"),": Sees committed data only."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Repeatable read"),": Prevents non-repeatable reads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Serializable"),": Highest isolation, prevents anomalies."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Locking mechanisms"),": Manages concurrency.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Row-level locks"),": Locks specific rows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Table-level locks"),": Locks entire tables."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Deadlock handling"),": Detects and resolves deadlocks.")))),(0,r.kt)("h3",{id:"transactional-integrity-service"},"Transactional Integrity Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/transactional/transactional.service.ts (**Transactional integrity**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class TransactionalService {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432,\n    });\n  }\n\n  async acidTransaction(id: number, name: string): Promise<void> {\n    const client = await this.pool.connect();\n    try {\n      await client.query("BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE");\n      await client.query("INSERT INTO users (id, name) VALUES ($1, $2)", [\n        id,\n        name,\n      ]);\n      await client.query("COMMIT");\n      console.log(`ACID transaction completed: ${id}, ${name}`);\n    } catch (e) {\n      await client.query("ROLLBACK");\n      throw e;\n    } finally {\n      client.release();\n    }\n  }\n\n  async rowLockQuery(id: number): Promise<any> {\n    const client = await this.pool.connect();\n    try {\n      await client.query("BEGIN");\n      const result = await client.query(\n        "SELECT * FROM users WHERE id = $1 FOR UPDATE",\n        [id]\n      );\n      console.log(`Row locked result: ${JSON.stringify(result.rows[0])}`);\n      await client.query("COMMIT");\n      return result.rows[0];\n    } catch (e) {\n      await client.query("ROLLBACK");\n      throw e;\n    } finally {\n      client.release();\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Transactional Integrity Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates ACID transactions and row-level locking."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"acidTransaction")," uses a serializable transaction to ensure full isolation, inserting data with ACID guarantees, while ",(0,r.kt)("inlineCode",{parentName:"li"},"rowLockQuery")," locks a row with ",(0,r.kt)("inlineCode",{parentName:"li"},"FOR UPDATE")," during a transaction, logging results, with rollback on errors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transactional Integrity Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ACID"),": Ensures Atomicity (all or nothing), Consistency (valid state), Isolation (Serializable here), Durability (committed data persists)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Isolation Levels"),": Serializable coded; others (e.g., Read Committed) adjustable via ",(0,r.kt)("inlineCode",{parentName:"li"},"SET TRANSACTION ISOLATION LEVEL"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Locking"),": Row-level (",(0,r.kt)("inlineCode",{parentName:"li"},"FOR UPDATE"),"); table-level and deadlocks handled by PostgreSQL internally.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Normalized design"),": Follows 1NF, 2NF, 3NF for data integrity."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Denormalization"),": Trades normalization for performance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Materialized views"),": Pre-computes query results for speed.")),(0,r.kt)("h3",{id:"design-patterns-service"},"Design Patterns Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/designpatterns/designpatterns.service.ts (**Design patterns**)\nimport { Injectable } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class DesignPatternsService {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432,\n    });\n  }\n\n  async normalizedInsert(\n    id: number,\n    name: string,\n    orderId: number\n  ): Promise<void> {\n    await this.pool.query("INSERT INTO users (id, name) VALUES ($1, $2)", [\n      id,\n      name,\n    ]);\n    await this.pool.query(\n      "INSERT INTO orders (order_id, user_id) VALUES ($1, $2)",\n      [orderId, id]\n    );\n    console.log(`Normalized insert: user ${id}, order ${orderId}`);\n  }\n\n  async materializedViewQuery(): Promise<any[]> {\n    const result = await this.pool.query("SELECT * FROM user_orders_mv");\n    console.log(`Materialized view result: ${JSON.stringify(result.rows)}`);\n    return result.rows;\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Design Patterns Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates normalized design and materialized views."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"normalizedInsert")," inserts into separate ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"orders")," tables (normalized), ",(0,r.kt)("inlineCode",{parentName:"li"},"materializedViewQuery")," queries a precomputed ",(0,r.kt)("inlineCode",{parentName:"li"},"user_orders_mv")," view (assumed created externally), logging actions. Denormalization not coded but implied as a performance trade-off."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Design Patterns Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Normalized Design"),": 1NF/2NF/3NF splits data (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"users"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"orders"),") for integrity."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Denormalization"),": Not shown; combines tables for speed (e.g., single table with redundant data)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Materialized Views"),": Precomputed results (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"CREATE MATERIALIZED VIEW user_orders_mv AS ..."),") for fast queries.")))))}u.isMDXComponent=!0}}]);