"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=s,g=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:s,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const i={title:"Redis"},r=void 0,l={unversionedId:"cheatsheet/database/redis",id:"cheatsheet/database/redis",title:"Redis",description:"Core Features",source:"@site/docs/cheatsheet/database/redis.md",sourceDirName:"cheatsheet/database",slug:"/cheatsheet/database/redis",permalink:"/docs/cheatsheet/database/redis",draft:!1,tags:[],version:"current",frontMatter:{title:"Redis"},sidebar:"cheatsheet",previous:{title:"MongoDB",permalink:"/docs/cheatsheet/database/mongodb"},next:{title:"English CheatSheet",permalink:"/docs/cheatsheet/english/cheatsheet"}},o={},c=[{value:"Core Features",id:"core-features",level:2},{value:"In-Memory Storage Service",id:"in-memory-storage-service",level:3},{value:"Data Structures Service",id:"data-structures-service",level:3},{value:"Pub/Sub Service",id:"pubsub-service",level:3},{value:"Performance",id:"performance",level:2},{value:"Performance Service",id:"performance-service",level:3},{value:"Scaling",id:"scaling",level:2},{value:"Replication Service",id:"replication-service",level:3},{value:"Sharding Service (Conceptual - No Direct NestJS Code)",id:"sharding-service-conceptual---no-direct-nestjs-code",level:3},{value:"Consistency",id:"consistency",level:2},{value:"Consistency Service",id:"consistency-service",level:3},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Design Patterns Service",id:"design-patterns-service",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"core-features"},"Core Features"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Core features"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"In-memory storage"),": Stores data in RAM for ultra-fast access."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Data structures"),": Supports Strings, Lists, Sets, Hashes, and more."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Pub/sub messaging"),": Enables real-time publish-subscribe communication.")),(0,s.kt)("h3",{id:"in-memory-storage-service"},"In-Memory Storage Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/inmemory.service.ts (**In-memory storage**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class InMemoryService {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis({ host: "localhost", port: 6379 });\n  }\n\n  async setData(key: string, value: string): Promise<void> {\n    await this.redis.set(key, value);\n    console.log(`Stored in-memory: ${key} -> ${value}`);\n  }\n\n  async getData(key: string): Promise<string | null> {\n    const value = await this.redis.get(key);\n    console.log(`Retrieved from memory: ${key} -> ${value}`);\n    return value;\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"In-Memory Storage Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates Redis as an in-memory store for fast key-value access."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": Initializes a Redis client connected to ",(0,s.kt)("inlineCode",{parentName:"li"},"localhost:6379"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"setData")," stores a string value in RAM, and ",(0,s.kt)("inlineCode",{parentName:"li"},"getData")," retrieves it, showcasing ultra-fast access due to in-memory storage."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"In-Memory Storage Details"),": Data resides in RAM, providing sub-millisecond access times, ideal for caching or transient data.")),(0,s.kt)("h3",{id:"data-structures-service"},"Data Structures Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/datastructures.service.ts (**Data structures**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class DataStructuresService {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis({ host: "localhost", port: 6379 });\n  }\n\n  async useList(key: string, value: string): Promise<void> {\n    await this.redis.lpush(key, value);\n    console.log(`Added to list ${key}: ${value}`);\n  }\n\n  async useSet(key: string, value: string): Promise<void> {\n    await this.redis.sadd(key, value);\n    console.log(`Added to set ${key}: ${value}`);\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data Structures Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Shows Redis\u2019s support for advanced data structures like Lists and Sets."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": Initializes a Redis client, ",(0,s.kt)("inlineCode",{parentName:"li"},"useList")," adds an item to a list using ",(0,s.kt)("inlineCode",{parentName:"li"},"lpush"),", and ",(0,s.kt)("inlineCode",{parentName:"li"},"useSet")," adds an item to a set using ",(0,s.kt)("inlineCode",{parentName:"li"},"sadd"),", demonstrating Redis\u2019s versatility beyond simple key-value pairs."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Data Structures Details"),": Supports Strings, Lists (e.g., queues), Sets (e.g., unique items), Hashes (e.g., key-value maps), and more, enabling complex data manipulation.")),(0,s.kt)("h3",{id:"pubsub-service"},"Pub/Sub Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/pubsub.service.ts (**Pub/sub messaging**)\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class PubSubService implements OnModuleInit {\n  private publisher: Redis;\n  private subscriber: Redis;\n\n  constructor() {\n    this.publisher = new Redis({ host: "localhost", port: 6379 });\n    this.subscriber = new Redis({ host: "localhost", port: 6379 });\n  }\n\n  async onModuleInit() {\n    this.subscriber.subscribe("channel");\n    this.subscriber.on("message", (channel, message) => {\n      console.log(`Received on ${channel}: ${message}`);\n    });\n  }\n\n  async publish(channel: string, message: string): Promise<void> {\n    await this.publisher.publish(channel, message);\n    console.log(`Published to ${channel}: ${message}`);\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Pub/Sub Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Implements real-time publish-subscribe messaging with Redis."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": Initializes separate Redis clients for publishing and subscribing, subscribes to a channel on init, logs received messages, and ",(0,s.kt)("inlineCode",{parentName:"li"},"publish")," sends messages to the channel, enabling real-time communication."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Pub/Sub Details"),": Allows publishers to send messages to channels, with subscribers receiving them instantly, useful for notifications or live updates.")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"performance"},"Performance"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Performance"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Read/write performance"),": Delivers sub-millisecond latency due to in-memory nature."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Persistence options"),": RDB (snapshot) and AOF (log) for data durability."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Pipelining"),": Sends multiple commands in one go to reduce latency.")),(0,s.kt)("h3",{id:"performance-service"},"Performance Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/performance/performance.service.ts (**Read/write performance, Pipelining**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class PerformanceService {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis({ host: "localhost", port: 6379 });\n  }\n\n  async fastReadWrite(key: string, value: string): Promise<string> {\n    await this.redis.set(key, value);\n    const result = await this.redis.get(key);\n    console.log(`Fast read/write: ${key} -> ${result}`);\n    return result;\n  }\n\n  async pipelineOperations(keys: string[]): Promise<string[]> {\n    const pipeline = this.redis.pipeline();\n    keys.forEach((key) => pipeline.set(key, `Value-${key}`));\n    keys.forEach((key) => pipeline.get(key));\n    const results = await pipeline.exec();\n    console.log(\n      "Pipelined results:",\n      results.map((r) => r[1])\n    );\n    return results.map((r) => r[1] as string);\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Performance Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates Redis\u2019s sub-millisecond latency and pipelining for performance."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"fastReadWrite")," performs a quick set and get operation, leveraging in-memory speed, while ",(0,s.kt)("inlineCode",{parentName:"li"},"pipelineOperations")," batches multiple set/get commands into a single pipeline, reducing network round-trips and logging results."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Performance Details"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Read/Write Performance"),": Sub-millisecond latency due to RAM storage."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Persistence Options"),": RDB snapshots or AOF logs (not coded; configured in Redis settings)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Pipelining"),": Groups commands for efficiency (e.g., multiple ops in one trip).")))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"scaling"},"Scaling"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Replication"),": Master-Slave setup for read scaling and failover.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Asynchronous replication"),": Replicates data to slaves asynchronously."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"High availability with sentinel"),": Uses Sentinel for automatic failover."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Sharding"),": Distributes data across nodes via Redis Cluster.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Consistent hashing"),": Maps keys to nodes consistently."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Slot distribution"),": Divides key space into 16,384 slots.")))),(0,s.kt)("h3",{id:"replication-service"},"Replication Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/scaling/replication.service.ts (**Replication**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class ReplicationService {\n  private master: Redis;\n  private slave: Redis;\n\n  constructor() {\n    this.master = new Redis({ host: "localhost", port: 6379 }); // Master\n    this.slave = new Redis({ host: "localhost", port: 6380 }); // Slave (assumed)\n  }\n\n  async writeToMaster(key: string, value: string): Promise<void> {\n    await this.master.set(key, value);\n    console.log(`Wrote to master: ${key} -> ${value}`);\n  }\n\n  async readFromSlave(key: string): Promise<string | null> {\n    const value = await this.slave.get(key);\n    console.log(`Read from slave: ${key} -> ${value}`);\n    return value;\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Replication Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Simulates a Master-Slave replication setup for scaling reads."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": Initializes Redis clients for master (port 6379) and slave (port 6380, assumed), ",(0,s.kt)("inlineCode",{parentName:"li"},"writeToMaster")," sets data on the master, and ",(0,s.kt)("inlineCode",{parentName:"li"},"readFromSlave")," retrieves it from the slave, demonstrating read scaling (assuming replication is configured externally)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Replication Details"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Master-Slave"),": Master writes, slaves replicate for read scaling."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Asynchronous Replication"),": Slaves sync asynchronously (Redis default)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Sentinel"),": Not coded but manages failover (e.g., ",(0,s.kt)("inlineCode",{parentName:"li"},"redis-sentinel"),").")))),(0,s.kt)("h3",{id:"sharding-service-conceptual---no-direct-nestjs-code"},"Sharding Service (Conceptual - No Direct NestJS Code)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Distributes data across Redis Cluster nodes."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": Redis Cluster shards data using consistent hashing and 16,384 slots, managed by Redis itself (not directly coded in NestJS; requires cluster setup). A client like ",(0,s.kt)("inlineCode",{parentName:"li"},"ioredis")," with cluster support would connect to multiple nodes (e.g., ",(0,s.kt)("inlineCode",{parentName:"li"},"new Redis.Cluster([{ host: 'localhost', port: 7000 }])"),")."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Sharding Details"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Consistent Hashing"),": Maps keys to nodes consistently (e.g., CRC16 hash)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Slot Distribution"),": Key space split into 16,384 slots across nodes."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"No Code Needed"),": Requires Redis Cluster configuration, not NestJS-specific.")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"consistency"},"Consistency"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Consistency"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Eventual consistency"),": Achieved with replication across nodes."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Strong consistency"),": Guaranteed in a single-node setup.")),(0,s.kt)("h3",{id:"consistency-service"},"Consistency Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/consistency/consistency.service.ts (**Consistency**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class ConsistencyService {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis({ host: "localhost", port: 6379 });\n  }\n\n  async setWithStrongConsistency(key: string, value: string): Promise<void> {\n    await this.redis.set(key, value);\n    const result = await this.redis.get(key);\n    console.log(`Strong consistency: ${key} -> ${result}`);\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Consistency Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates strong consistency in a single-node setup."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"setWithStrongConsistency")," sets a value and immediately retrieves it, ensuring the read reflects the write due to single-node operation, logging the result."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Consistency Details"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Eventual Consistency"),": With replication, slaves may lag (not shown here)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Strong Consistency"),": Single node ensures immediate consistency.")))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Write-through/write-behind"),": Updates cache and DB simultaneously or lazily."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Cache aside"),": Application manages cache, fetching from DB on miss."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Rate limiting"),": Controls request rates using Redis counters.")),(0,s.kt)("h3",{id:"design-patterns-service"},"Design Patterns Service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/patterns/designpatterns.service.ts (**Design patterns**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class DesignPatternsService {\n  private redis: Redis;\n  private db: Pool;\n\n  constructor() {\n    this.redis = new Redis({ host: "localhost", port: 6379 });\n    this.db = new Pool({\n      user: "postgres",\n      host: "localhost",\n      database: "mydb",\n      password: "password",\n      port: 5432,\n    });\n  }\n\n  async writeThrough(key: string, value: string): Promise<void> {\n    await this.redis.set(key, value);\n    await this.db.query(\n      "INSERT INTO cache (key, value) VALUES ($1, $2) ON CONFLICT (key) DO UPDATE SET value = $2",\n      [key, value]\n    );\n    console.log(`Write-through: ${key} -> ${value}`);\n  }\n\n  async cacheAside(key: string): Promise<string> {\n    let value = await this.redis.get(key);\n    if (!value) {\n      const result = await this.db.query(\n        "SELECT value FROM cache WHERE key = $1",\n        [key]\n      );\n      value = result.rows.length > 0 ? result.rows[0].value : "default";\n      await this.redis.set(key, value);\n    }\n    console.log(`Cache aside: ${key} -> ${value}`);\n    return value;\n  }\n\n  async rateLimit(ip: string, limit: number, window: number): Promise<boolean> {\n    const key = `rate:${ip}`;\n    const count = await this.redis.incr(key);\n    if (count === 1) await this.redis.expire(key, window);\n    const allowed = count <= limit;\n    console.log(`Rate limit check for ${ip}: ${allowed} (count: ${count})`);\n    return allowed;\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Design Patterns Service Details"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Purpose"),": Implements write-through, cache aside, and rate limiting patterns with Redis and PostgreSQL."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"writeThrough")," updates both Redis and PostgreSQL simultaneously, ",(0,s.kt)("inlineCode",{parentName:"li"},"cacheAside")," checks Redis first and falls back to PostgreSQL if missed (updating cache), and ",(0,s.kt)("inlineCode",{parentName:"li"},"rateLimit")," uses Redis counters to limit requests within a time window, logging actions for visibility."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Design Patterns Details"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Write-through"),": Syncs cache (Redis) and DB (PostgreSQL) immediately."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Cache Aside"),": App manages cache, fetching from DB on miss."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Rate Limiting"),": Uses Redis ",(0,s.kt)("inlineCode",{parentName:"li"},"INCR")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"EXPIRE")," for request control.")))))}m.isMDXComponent=!0}}]);