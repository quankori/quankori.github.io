"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[942],{3905:(n,t,e)=>{e.d(t,{Zo:()=>u,kt:()=>d});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function c(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?c(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function a(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},c=Object.keys(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=r.createContext({}),p=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},u=function(n){var t=p(n.components);return r.createElement(s.Provider,{value:t},n.children)},l="mdxType",h={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,c=n.originalType,s=n.parentName,u=a(n,["components","mdxType","originalType","parentName"]),l=p(e),g=i,d=l["".concat(s,".").concat(g)]||l[g]||h[g]||c;return e?r.createElement(d,o(o({ref:t},u),{},{components:e})):r.createElement(d,o({ref:t},u))}));function d(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var c=e.length,o=new Array(c);o[0]=g;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=n,a[l]="string"==typeof n?n:i,o[1]=a;for(var p=2;p<c;p++)o[p]=e[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}g.displayName="MDXCreateElement"},8863:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>p});var r=e(7462),i=(e(7294),e(3905));const c={title:"Domain-Centric Architectures"},o=void 0,a={unversionedId:"blog/system-design/domain-centric",id:"blog/system-design/domain-centric",title:"Domain-Centric Architectures",description:"C\xe1c ki\u1ebfn tr\xfac ph\u1ea7n m\u1ec1m hi\u1ec7n \u0111\u1ea1i nh\u01b0 Onion, Clean, EBI, v\xe0 Hexagonal (Ports and Adapters) ng\xe0y c\xe0ng tr\u1edf n\xean ph\u1ed5 bi\u1ebfn nh\u1edd kh\u1ea3 n\u0103ng gi\u1ea3i quy\u1ebft c\xe1c v\u1ea5n \u0111\u1ec1 c\u1ed1 h\u1eefu trong c\xe1c ki\u1ebfn tr\xfac ph\xe2n l\u1edbp truy\u1ec1n th\u1ed1ng. Ch\xfang t\u1eadp trung v\xe0o vi\u1ec7c \u0111\u1eb7t mi\u1ec1n nghi\u1ec7p v\u1ee5 (domain) l\xe0m trung t\xe2m (domain-centric) v\xe0 qu\u1ea3n l\xfd s\u1ef1 ph\u1ee5 thu\u1ed9c m\u1ed9t c\xe1ch ch\u1eb7t ch\u1ebd th\xf4ng qua nguy\xean t\u1eafc \u0110\u1ea3o ng\u01b0\u1ee3c Ph\u1ee5 thu\u1ed9c (Dependency Inversion). \u0110i\u1ec1u n\xe0y gi\xfap x\xe2y d\u1ef1ng c\xe1c \u1ee9ng d\u1ee5ng linh ho\u1ea1t, d\u1ec5 b\u1ea3o tr\xec, d\u1ec5 ki\u1ec3m th\u1eed v\xe0 \xedt b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nh\u1eefng thay \u0111\u1ed5i trong c\xe1c th\xe0nh ph\u1ea7n c\u01a1 s\u1edf h\u1ea1 t\u1ea7ng (nh\u01b0 UI, database).",source:"@site/docs/blog/system-design/domain-centric.md",sourceDirName:"blog/system-design",slug:"/blog/system-design/domain-centric",permalink:"/blog/system-design/domain-centric",draft:!1,tags:[],version:"current",frontMatter:{title:"Domain-Centric Architectures"},sidebar:"blog",previous:{title:"Monolithic Architecture",permalink:"/blog/system-design/monolithic"},next:{title:"Event-Driven Architecture",permalink:"/blog/system-design/event-driven"}},s={},p=[{value:"Onion Architecture",id:"onion-architecture",level:2},{value:"Clean Architecture",id:"clean-architecture",level:2},{value:"EBI Architecture (Entity-Boundary-Interactor)",id:"ebi-architecture-entity-boundary-interactor",level:2},{value:"Hexagonal Architecture",id:"hexagonal-architecture",level:2}],u={toc:p},l="wrapper";function h(n){let{components:t,...e}=n;return(0,i.kt)(l,(0,r.Z)({},u,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"C\xe1c ki\u1ebfn tr\xfac ph\u1ea7n m\u1ec1m hi\u1ec7n \u0111\u1ea1i nh\u01b0 Onion, Clean, EBI, v\xe0 Hexagonal (Ports and Adapters) ng\xe0y c\xe0ng tr\u1edf n\xean ph\u1ed5 bi\u1ebfn nh\u1edd kh\u1ea3 n\u0103ng gi\u1ea3i quy\u1ebft c\xe1c v\u1ea5n \u0111\u1ec1 c\u1ed1 h\u1eefu trong c\xe1c ki\u1ebfn tr\xfac ph\xe2n l\u1edbp truy\u1ec1n th\u1ed1ng. Ch\xfang t\u1eadp trung v\xe0o vi\u1ec7c \u0111\u1eb7t mi\u1ec1n nghi\u1ec7p v\u1ee5 (domain) l\xe0m trung t\xe2m (domain-centric) v\xe0 qu\u1ea3n l\xfd s\u1ef1 ph\u1ee5 thu\u1ed9c m\u1ed9t c\xe1ch ch\u1eb7t ch\u1ebd th\xf4ng qua nguy\xean t\u1eafc \u0110\u1ea3o ng\u01b0\u1ee3c Ph\u1ee5 thu\u1ed9c (Dependency Inversion). \u0110i\u1ec1u n\xe0y gi\xfap x\xe2y d\u1ef1ng c\xe1c \u1ee9ng d\u1ee5ng linh ho\u1ea1t, d\u1ec5 b\u1ea3o tr\xec, d\u1ec5 ki\u1ec3m th\u1eed v\xe0 \xedt b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nh\u1eefng thay \u0111\u1ed5i trong c\xe1c th\xe0nh ph\u1ea7n c\u01a1 s\u1edf h\u1ea1 t\u1ea7ng (nh\u01b0 UI, database)."),(0,i.kt)("h2",{id:"onion-architecture"},"Onion Architecture"),(0,i.kt)("p",null,"\u0110\u01b0\u1ee3c gi\u1edbi thi\u1ec7u b\u1edfi Jeffrey Palermo, Onion Architecture gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 ph\u1ee5 thu\u1ed9c c\u1ee7a Layered Architecture b\u1eb1ng c\xe1ch \u0111\u1eb7t Domain Model v\xe0 Domain Services (l\xf5i nghi\u1ec7p v\u1ee5) v\xe0o trung t\xe2m. C\xe1c l\u1edbp b\xean ngo\xe0i ph\u1ee5 thu\u1ed9c v\xe0o c\xe1c l\u1edbp b\xean trong, nh\u01b0ng kh\xf4ng ng\u01b0\u1ee3c l\u1ea1i. Quy t\u1eafc ph\u1ee5 thu\u1ed9c (Dependency Rule) l\xe0 m\u1ea5u ch\u1ed1t: m\u1ecdi ph\u1ee5 thu\u1ed9c ch\u1ec9 h\u01b0\u1edbng v\xe0o trong."),(0,i.kt)("p",null,"C\xe1c l\u1edbp ch\xednh (t\u1eeb trong ra ngo\xe0i):"),(0,i.kt)("p",null,"Domain Model: C\xe1c th\u1ef1c th\u1ec3 (entities) c\u1ed1t l\xf5i c\u1ee7a mi\u1ec1n nghi\u1ec7p v\u1ee5. Kh\xf4ng ph\u1ee5 thu\u1ed9c v\xe0o b\u1ea5t c\u1ee9 th\u1ee9 g\xec kh\xe1c."),(0,i.kt)("p",null,"Domain Services: Logic nghi\u1ec7p v\u1ee5 li\xean quan \u0111\u1ebfn nhi\u1ec1u entities ho\u1eb7c c\xe1c quy t\u1eafc ph\u1ee9c t\u1ea1p. Ch\u1ec9 ph\u1ee5 thu\u1ed9c v\xe0o Domain Model."),(0,i.kt)("p",null,"Application Services: \u0110i\u1ec1u ph\u1ed1i c\xe1c tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng (use cases) c\u1ee7a \u1ee9ng d\u1ee5ng. Ph\u1ee5 thu\u1ed9c v\xe0o Domain Services v\xe0 c\xe1c interface \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a \u1edf l\u1edbp n\xe0y (nh\u01b0ng tri\u1ec3n khai \u1edf l\u1edbp ngo\xe0i)."),(0,i.kt)("p",null,"Infrastructure / Outer Layers: C\xe1c chi ti\u1ebft k\u1ef9 thu\u1eadt nh\u01b0 UI, Database, Frameworks, API b\xean ngo\xe0i. L\u1edbp n\xe0y ph\u1ee5 thu\u1ed9c v\xe0o Application Services (th\xf4ng qua interfaces) v\xe0 tri\u1ec3n khai c\xe1c interface \u0111\xf3 (v\xed d\u1ee5: UserRepository tri\u1ec3n khai IUserRepository)."),(0,i.kt)("p",null,"Nguy\xean t\u1eafc \u0110\u1ea3o ng\u01b0\u1ee3c Ph\u1ee5 thu\u1ed9c (Dependency Inversion Principle) \u0111\u01b0\u1ee3c \xe1p d\u1ee5ng tri\u1ec7t \u0111\u1ec3: c\xe1c l\u1edbp b\xean trong \u0111\u1ecbnh ngh\u0129a interfaces, v\xe0 c\xe1c l\u1edbp b\xean ngo\xe0i cung c\u1ea5p implementations. \u0110i\u1ec1u n\xe0y gi\xfap t\xe1ch bi\u1ec7t ho\xe0n to\xe0n l\xf5i nghi\u1ec7p v\u1ee5 kh\u1ecfi c\xe1c chi ti\u1ebft k\u1ef9 thu\u1eadt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my-onion-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 domain/                 # Innermost core\n\u2502   \u2502   \u251c\u2500\u2500 models/             # Entities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.model.ts\n\u2502   \u2502   \u2514\u2500\u2500 services/           # Domain services (optional)\n\u2502   \u2502       \u2514\u2500\u2500 user.logic.ts\n\u2502   \u251c\u2500\u2500 application/            # Application layer\n\u2502   \u2502   \u251c\u2500\u2500 services/           # Application services / Use cases\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.service.ts\n\u2502   \u2502   \u2514\u2500\u2500 interfaces/         # Interfaces for outer layers to implement\n\u2502   \u2502       \u2514\u2500\u2500 user.repository.interface.ts\n\u2502   \u251c\u2500\u2500 infrastructure/         # Outermost layer\n\u2502   \u2502   \u251c\u2500\u2500 persistence/        # Data access implementation\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.repository.ts\n\u2502   \u2502   \u251c\u2500\u2500 web/                # Controllers, API endpoints\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.controller.ts\n\u2502   \u2502   \u2514\u2500\u2500 external/           # Clients for external APIs\n\u2502   \u251c\u2500\u2500 core/                   # Shared utilities (few dependencies)\n\u2502   \u2514\u2500\u2500 main.ts                 # Entry point, dependency injection setup\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")),(0,i.kt)("h2",{id:"clean-architecture"},"Clean Architecture"),(0,i.kt)("p",null,"Clean Architecture, \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t b\u1edfi Robert C. Martin (Uncle Bob), r\u1ea5t t\u01b0\u01a1ng \u0111\u1ed3ng v\u1edbi Onion v\xe0 Hexagonal Architecture. N\xf3 c\u0169ng nh\u1ea5n m\u1ea1nh vi\u1ec7c t\xe1ch bi\u1ec7t c\xe1c m\u1ed1i quan t\xe2m th\xe0nh c\xe1c v\xf2ng tr\xf2n \u0111\u1ed3ng t\xe2m v\xe0 tu\xe2n th\u1ee7 nghi\xeam ng\u1eb7t Quy t\u1eafc Ph\u1ee5 thu\u1ed9c (Dependency Rule): ph\u1ee5 thu\u1ed9c ch\u1ec9 h\u01b0\u1edbng v\xe0o trong."),(0,i.kt)("p",null,"C\xe1c v\xf2ng tr\xf2n ch\xednh (t\u1eeb trong ra ngo\xe0i):"),(0,i.kt)("p",null,"Entities: C\xe1c \u0111\u1ed1i t\u01b0\u1ee3ng nghi\u1ec7p v\u1ee5 c\u1ed1t l\xf5i c\u1ee7a \u1ee9ng d\u1ee5ng, ch\u1ee9a c\xe1c quy t\u1eafc nghi\u1ec7p v\u1ee5 quan tr\u1ecdng nh\u1ea5t v\xe0 \xedt thay \u0111\u1ed5i nh\u1ea5t."),(0,i.kt)("p",null,"Use Cases (Interactors): Logic nghi\u1ec7p v\u1ee5 c\u1ee5 th\u1ec3 c\u1ee7a \u1ee9ng d\u1ee5ng, \u0111i\u1ec1u ph\u1ed1i lu\u1ed3ng d\u1eef li\u1ec7u \u0111\u1ebfn v\xe0 \u0111i t\u1eeb Entities. Ch\xfang \u0111\u1ecbnh ngh\u0129a c\xe1c interfaces cho l\u1edbp ngo\xe0i (Presenters, Gateways)."),(0,i.kt)("p",null,"Interface Adapters: Chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa \u0111\u1ecbnh d\u1ea1ng ph\xf9 h\u1ee3p cho Use Cases/Entities v\xe0 \u0111\u1ecbnh d\u1ea1ng ph\xf9 h\u1ee3p cho c\xe1c th\xe0nh ph\u1ea7n b\xean ngo\xe0i (Database, Web, UI). Bao g\u1ed3m Controllers, Presenters, Gateways (Repositories)."),(0,i.kt)("p",null,"Frameworks & Drivers: L\u1edbp ngo\xe0i c\xf9ng ch\u1ee9a c\xe1c chi ti\u1ebft c\u1ee5 th\u1ec3 nh\u01b0 Frameworks (web framework), Database, UI, thi\u1ebft b\u1ecb."),(0,i.kt)("p",null,"Gi\u1ed1ng nh\u01b0 Onion, Clean Architecture s\u1eed d\u1ee5ng Dependency Inversion \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o l\xf5i nghi\u1ec7p v\u1ee5 (Entities, Use Cases) kh\xf4ng ph\u1ee5 thu\u1ed9c v\xe0o c\xe1c chi ti\u1ebft b\xean ngo\xe0i."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my-clean-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 domain/                 # Entities + Use Case Interfaces (sometimes separate)\n\u2502   \u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 product.entity.ts\n\u2502   \u2502   \u2514\u2500\u2500 usecases/\n\u2502   \u2502       \u251c\u2500\u2500 interfaces/     # Input/Output ports, Gateway interfaces\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 product.repository.interface.ts\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 product.presenter.interface.ts\n\u2502   \u2502       \u2514\u2500\u2500 get_product.usecase.ts # Interactor\n\u2502   \u251c\u2500\u2500 application/            # Use Case implementations (sometimes merged into domain)\n\u2502   \u251c\u2500\u2500 infrastructure/         # Outermost layer\n\u2502   \u2502   \u251c\u2500\u2500 adapters/           # Interface Adapters\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/    # Web controllers\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 product.controller.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 presenters/     # Data formatters for UI/API\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 product.api.presenter.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 gateways/       # Repository implementations\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 product.mongo.repository.ts\n\u2502   \u2502   \u2514\u2500\u2500 frameworks/         # Web framework, DB driver setup\n\u2502   \u2502       \u2514\u2500\u2500 express.setup.ts\n\u2502   \u2514\u2500\u2500 main.ts                 # Entry point, DI container setup\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")),(0,i.kt)("h2",{id:"ebi-architecture-entity-boundary-interactor"},"EBI Architecture (Entity-Boundary-Interactor)"),(0,i.kt)("p",null,"EBI l\xe0 m\u1ed9t bi\u1ebfn th\u1ec3 ho\u1eb7c c\xe1ch nh\xecn kh\xe1c c\u1ee7a Clean Architecture, t\u1eadp trung v\xe0o vi\u1ec7c m\xf4 h\xecnh h\xf3a c\xe1c Use Cases. N\xf3 chia c\xe1c th\xe0nh ph\u1ea7n x\u1eed l\xfd m\u1ed9t y\xeau c\u1ea7u th\xe0nh ba lo\u1ea1i:"),(0,i.kt)("p",null,"Interactor (Use Case): \u0110\u1ed1i t\u01b0\u1ee3ng \u0111i\u1ec1u ph\u1ed1i ch\xednh cho m\u1ed9t use case c\u1ee5 th\u1ec3. N\xf3 ch\u1ee9a logic \u1ee9ng d\u1ee5ng, g\u1ecdi \u0111\u1ebfn Entities v\xe0 Boundaries. T\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi Use Case/Interactor trong Clean Architecture."),(0,i.kt)("p",null,"Entity: C\xe1c \u0111\u1ed1i t\u01b0\u1ee3ng nghi\u1ec7p v\u1ee5 c\u1ed1t l\xf5i. T\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi Entities trong Clean Architecture."),(0,i.kt)("p",null,"Boundary: Interfaces \u0111\u1ecbnh ngh\u0129a c\xe1ch Interactor giao ti\u1ebfp v\u1edbi th\u1ebf gi\u1edbi b\xean ngo\xe0i (c\u1ea3 input v\xe0 output)."),(0,i.kt)("p",null,"Input Boundary: Interface m\xe0 l\u1edbp ngo\xe0i (v\xed d\u1ee5: Controller) g\u1ecdi \u0111\u1ec3 k\xedch ho\u1ea1t Interactor."),(0,i.kt)("p",null,"Output Boundary: Interface m\xe0 Interactor g\u1ecdi \u0111\u1ec3 g\u1eedi k\u1ebft qu\u1ea3 ra l\u1edbp ngo\xe0i (v\xed d\u1ee5: Presenter)."),(0,i.kt)("p",null,"Gateway/Repository Boundary: Interface m\xe0 Interactor d\xf9ng \u0111\u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi d\u1eef li\u1ec7u (do l\u1edbp ngo\xe0i tri\u1ec3n khai)."),(0,i.kt)("p",null,"Quy t\u1eafc ph\u1ee5 thu\u1ed9c v\u1eabn l\xe0 h\u01b0\u1edbng v\xe0o trong: Interactor ph\u1ee5 thu\u1ed9c v\xe0o Entity v\xe0 Boundary interfaces, nh\u01b0ng kh\xf4ng ph\u1ee5 thu\u1ed9c v\xe0o c\xe1c l\u1edbp tri\u1ec3n khai Boundary \u1edf b\xean ngo\xe0i."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my-ebi-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 usecases/               # Group by use case\n\u2502   \u2502   \u2514\u2500\u2500 register_user/\n\u2502   \u2502       \u251c\u2500\u2500 register_user.interactor.ts # Interactor\n\u2502   \u2502       \u251c\u2500\u2500 register_user.request.model.ts # Input data structure\n\u2502   \u2502       \u251c\u2500\u2500 register_user.response.model.ts # Output data structure\n\u2502   \u2502       \u251c\u2500\u2500 user.entity.ts              # Entity (can be shared)\n\u2502   \u2502       \u251c\u2500\u2500 user.repository.boundary.ts # Gateway Boundary Interface\n\u2502   \u2502       \u2514\u2500\u2500 user.presenter.boundary.ts  # Output Boundary Interface\n\u2502   \u251c\u2500\u2500 domain_entities/        # Or separate Entities if shared across many use cases\n\u2502   \u2502   \u2514\u2500\u2500 user.ts\n\u2502   \u251c\u2500\u2500 infrastructure/         # Boundary Implementations\n\u2502   \u2502   \u251c\u2500\u2500 controllers/        # Calls Input Boundary\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.api.controller.ts\n\u2502   \u2502   \u251c\u2500\u2500 presenters/         # Implements Output Boundary\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user.json.presenter.ts\n\u2502   \u2502   \u2514\u2500\u2500 persistence/        # Implements Gateway Boundary\n\u2502   \u2502       \u2514\u2500\u2500 user.db.repository.ts\n\u2502   \u2514\u2500\u2500 main.ts                 # Entry point, DI setup\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.js\n")),(0,i.kt)("h2",{id:"hexagonal-architecture"},"Hexagonal Architecture"),(0,i.kt)("p",null,"\u0110\u01b0\u1ee3c \u0111\u1eb7t t\xean b\u1edfi Alistair Cockburn, Hexagonal Architecture (c\xf2n g\u1ecdi l\xe0 Ports and Adapters) c\u0169ng nh\u1eb1m m\u1ee5c \u0111\xedch t\xe1ch bi\u1ec7t l\xf5i \u1ee9ng d\u1ee5ng (logic nghi\u1ec7p v\u1ee5) kh\u1ecfi c\xe1c y\u1ebfu t\u1ed1 b\xean ngo\xe0i (UI, DB, API kh\xe1c...)."),(0,i.kt)("p",null,"Application Core (Hexagon): Ch\u1ee9a Entities v\xe0 Use Cases (logic nghi\u1ec7p v\u1ee5 thu\u1ea7n t\xfay), kh\xf4ng bi\u1ebft g\xec v\u1ec1 th\u1ebf gi\u1edbi b\xean ngo\xe0i."),(0,i.kt)("p",null,"Ports: L\xe0 c\xe1c c\u1ed5ng giao ti\u1ebfp c\u1ee7a l\xf5i \u1ee9ng d\u1ee5ng, \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u01b0\u1edbi d\u1ea1ng interfaces. C\xf3 hai lo\u1ea1i port:"),(0,i.kt)("p",null,"Driving Ports (Input Ports): API c\u1ee7a l\xf5i \u1ee9ng d\u1ee5ng, \u0111\u1ecbnh ngh\u0129a c\xe1ch th\u1ebf gi\u1edbi b\xean ngo\xe0i c\xf3 th\u1ec3 l\xe1i (g\u1ecdi) \u1ee9ng d\u1ee5ng (v\xed d\u1ee5: UserServicePort v\u1edbi ph\u01b0\u01a1ng th\u1ee9c createUser). Th\u01b0\u1eddng \u0111\u01b0\u1ee3c tri\u1ec3n khai b\u1edfi Use Cases/Application Services."),(0,i.kt)("p",null,"Driven Ports (Output Ports): Interfaces \u0111\u1ecbnh ngh\u0129a nh\u1eefng g\xec l\xf5i \u1ee9ng d\u1ee5ng c\u1ea7n t\u1eeb b\xean ngo\xe0i (v\xed d\u1ee5: UserRepositoryPort \u0111\u1ec3 l\u01b0u/t\u1ea3i d\u1eef li\u1ec7u, NotificationServicePort \u0111\u1ec3 g\u1eedi email). L\xf5i \u1ee9ng d\u1ee5ng g\u1ecdi c\xe1c port n\xe0y."),(0,i.kt)("p",null,"Adapters: L\xe0 c\u1ea7u n\u1ed1i gi\u1eefa th\u1ebf gi\u1edbi b\xean ngo\xe0i v\xe0 c\xe1c Port."),(0,i.kt)("p",null,"Driving Adapters: Chuy\u1ec3n \u0111\u1ed5i input t\u1eeb b\xean ngo\xe0i (HTTP request, CLI command) th\xe0nh l\u1eddi g\u1ecdi \u0111\u1ebfn Driving Port (v\xed d\u1ee5: UserController g\u1ecdi UserServicePort)."),(0,i.kt)("p",null,"Driven Adapters: Tri\u1ec3n khai c\xe1c Driven Port interfaces, t\u01b0\u01a1ng t\xe1c v\u1edbi c\xe1c c\xf4ng c\u1ee5 c\u1ee5 th\u1ec3 (v\xed d\u1ee5: DatabaseUserRepository tri\u1ec3n khai UserRepositoryPort, SmtpNotificationService tri\u1ec3n khai NotificationServicePort)."),(0,i.kt)("p",null,"Quy t\u1eafc ph\u1ee5 thu\u1ed9c: M\u1ecdi ph\u1ee5 thu\u1ed9c \u0111\u1ec1u h\u01b0\u1edbng t\u1eeb Adapters v\xe0o Ports (v\xe0 v\xe0o Application Core). L\xf5i \u1ee9ng d\u1ee5ng kh\xf4ng ph\u1ee5 thu\u1ed9c v\xe0o Adapters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my-hexagonal-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 application/            # Application core (Hexagon)\n\u2502   \u2502   \u251c\u2500\u2500 domain/             # Entities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 order.model.ts\n\u2502   \u2502   \u251c\u2500\u2500 ports/              # Port definitions\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 input/          # Driving Ports\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 place_order.usecase.port.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 output/         # Driven Ports\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 order.repository.port.ts\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 payment.gateway.port.ts\n\u2502   \u2502   \u2514\u2500\u2500 services/           # Use Cases / Application Services (implement Input Ports)\n\u2502   \u2502       \u2514\u2500\u2500 order.service.ts\n\u2502   \u251c\u2500\u2500 infrastructure/         # Adapters and external details\n\u2502   \u2502   \u251c\u2500\u2500 adapters/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 input/          # Driving Adapters\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 web/        # REST Controller\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 order.controller.ts\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 cli/        # Command Line Interface\n\u2502   \u2502   \u2502   \u2502       \u2514\u2500\u2500 order.command.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 output/         # Driven Adapters\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 persistence/ # Database implementation\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 order.dynamodb.repository.ts\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 payment/     # Payment gateway implementation\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 stripe.adapter.ts\n\u2502   \u2502   \u2514\u2500\u2500 config/             # DI, framework setup\n\u2502   \u2514\u2500\u2500 main.ts                 # Entry point\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")))}h.isMDXComponent=!0}}]);