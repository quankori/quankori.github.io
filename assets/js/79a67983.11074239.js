"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6354],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={title:"Callbacks in Node.js"},i=void 0,s={unversionedId:"programming/nodejs/callback",id:"programming/nodejs/callback",title:"Callbacks in Node.js",description:"Concept",source:"@site/docs/programming/nodejs/callback.md",sourceDirName:"programming/nodejs",slug:"/programming/nodejs/callback",permalink:"/docs/programming/nodejs/callback",draft:!1,tags:[],version:"current",frontMatter:{title:"Callbacks in Node.js"},sidebar:"programming",previous:{title:"Process and Thread",permalink:"/docs/programming/nodejs/process-thread"},next:{title:"Copy in JavaScript",permalink:"/docs/programming/nodejs/copy"}},l={},c=[{value:"Concept",id:"concept",level:2},{value:"Promise",id:"promise",level:2},{value:"Async/Await",id:"asyncawait",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"concept"},"Concept"),(0,a.kt)("p",null,"Callbacks are fundamental to asynchronous programming in Node.js. They allow for non-blocking operations, which can greatly improve performance for I/O-bound tasks. However, due to potential callback nesting, it's essential to be aware of and manage callback hell, using patterns or newer language features to ensure maintainable and readable code."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/quankori/quankori.github.io/master/src/images/programming/7.png",alt:"Image"})),(0,a.kt)("h2",{id:"promise"},"Promise"),(0,a.kt)("p",null,"A Promise in JavaScript represents a value which might be available now, or in the future, or never. It allows you to write asynchronous code in a more synchronous fashion. It has three states:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pending"),": The initial state; the promise is neither fulfilled nor rejected."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Fulfilled"),": The operation completed successfully."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Rejected"),": The operation failed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve("Promise resolved");\n  }, 2000);\n});\n\nmyPromise.then((result) => {\n  console.log(result); // "Promise resolved"\n});\n')),(0,a.kt)("h2",{id:"asyncawait"},"Async/Await"),(0,a.kt)("p",null,"async/await is built on top of promises and provides a more readable and clean syntax for dealing with asynchronous operations. A function declared with the async keyword will always return a promise."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"async"),": This keyword is used to declare an asynchronous function."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"await"),": This keyword can only be used inside an async function and is used to pause the execution of the async function until the promise is resolved or rejected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'async function fetchData() {\n  let response = await fetch("https://api.example.com/data");\n  let data = await response.json();\n  console.log(data);\n}\nfetchData();\n')))}m.isMDXComponent=!0}}]);