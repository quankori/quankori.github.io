"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[780],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4388:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={title:"Nest.js"},s=void 0,o={unversionedId:"blog/programming/nestjs",id:"blog/programming/nestjs",title:"Nest.js",description:"Core Architecture",source:"@site/docs/blog/programming/nestjs.md",sourceDirName:"blog/programming",slug:"/blog/programming/nestjs",permalink:"/blog/programming/nestjs",draft:!1,tags:[],version:"current",frontMatter:{title:"Nest.js"}},l={},c=[{value:"Core Architecture",id:"core-architecture",level:2},{value:"Module Service",id:"module-service",level:3},{value:"Middleware Pipeline Service",id:"middleware-pipeline-service",level:3},{value:"TypeScript Integration Service",id:"typescript-integration-service",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Async Processing Service",id:"async-processing-service",level:3},{value:"Dependency Injection Service",id:"dependency-injection-service",level:3},{value:"Cache Service",id:"cache-service",level:3},{value:"Request Optimization Service",id:"request-optimization-service",level:3},{value:"Scaling",id:"scaling",level:2},{value:"Microservice",id:"microservice",level:3}],p={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"core-architecture"},"Core Architecture"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Module system"),": Organizes code into reusable, encapsulated units.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Modules"),": Groups related functionality."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Controllers"),": Handles HTTP requests and routing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Providers"),": Supplies injectable services and logic."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Middleware pipeline"),": Processes requests and responses.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Request/response handling"),": Manages HTTP lifecycle."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Guards & interceptors"),": Controls access and transforms data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pipes"),": Validates and transforms input data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TypeScript integration"),": Enhances development with type safety.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Decorators"),": Simplifies configuration and metadata."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static typing"),": Ensures robust code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Interfaces"),": Defines contracts for services.")))),(0,i.kt)("h3",{id:"module-service"},"Module Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/module.service.ts (**Module system**)\nimport { Injectable, Scope } from "@nestjs/common";\n\n// Define an interface for type safety (**Interfaces**)\ninterface DataProvider {\n  getData(): string;\n}\n\n@Injectable({ scope: Scope.DEFAULT }) // Singleton scope: one instance app-wide\nexport class ModuleService implements DataProvider {\n  // Line 1: Define a private property for internal state\n  private message: string;\n\n  constructor() {\n    // Line 2: Initialize the message property\n    this.message = "Module Service Initialized";\n    // Line 3: Log initialization for debugging\n    console.log(this.message);\n  }\n\n  // Line 4: Implement the getData method from the interface\n  getData(): string {\n    // Line 5: Return a simple string response\n    return "Hello from Module Service";\n  }\n}\n\n// **Module System Details**:\n// - **Modules**: Encapsulate related controllers, providers, and imports (e.g., `@Module` decorator).\n// - **Controllers**: Define routes using decorators like `@Get`, `@Post` (e.g., `@Controller(\'users\')`).\n// - **Providers**: Injectable services or utilities, registered with `@Injectable()`, supporting dependency injection.\n')),(0,i.kt)("h3",{id:"middleware-pipeline-service"},"Middleware Pipeline Service"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Request/Response Handling"),": Executes middleware, guards, interceptors, and pipes in sequence."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Guards"),": Restrict access (e.g., authentication via ",(0,i.kt)("inlineCode",{parentName:"li"},"@UseGuards(AuthGuard)"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Interceptors"),": Modify requests/responses (e.g., logging with ",(0,i.kt)("inlineCode",{parentName:"li"},"@UseInterceptors"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pipes"),": Validate/transform data (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"@UsePipes(ValidationPipe)")," ensures type safety).")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/middleware-pipeline.service.ts (**Middleware pipeline**)\nimport {\n  Injectable,\n  NestMiddleware,\n  Scope,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  Body,\n} from "@nestjs/common";\nimport { Request, Response, NextFunction } from "express";\nimport { AuthGuard } from "@nestjs/passport";\nimport { LoggingInterceptor } from "@nestjs/common";\nimport { ValidationPipe } from "@nestjs/common";\n\n@Injectable({ scope: Scope.REQUEST }) // Request scope: new instance per HTTP request\n@UseGuards(AuthGuard("jwt")) // **Guards**: Controls access (e.g., JWT authentication)\n@UseInterceptors(LoggingInterceptor) // **Interceptors**: Transforms requests/responses\nexport class MiddlewarePipelineService implements NestMiddleware {\n  // Line 1: Define middleware method\n  use(req: Request, res: Response, next: NextFunction): void {\n    // Line 2: Log request details\n    console.log(`Request to ${req.path} received`);\n    // Line 3: Proceed to next middleware or handler\n    next();\n  }\n\n  // Example method with pipe validation\n  @UsePipes(new ValidationPipe({ transform: true })) // **Pipes**: Validates/transforms input\n  processInput(@Body() data: { id: number }): string {\n    // Line 1: Access validated/transformed data\n    console.log("Processed input:", data.id);\n    // Line 2: Return response\n    return `Data ID: ${data.id}`;\n  }\n}\n')),(0,i.kt)("h3",{id:"typescript-integration-service"},"TypeScript Integration Service"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Decorators"),": Metadata annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"@Injectable()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@Get()"),") simplify configuration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static Typing"),": Ensures type safety (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," interface prevents runtime errors)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Interfaces"),": Define contracts for objects, enhancing code predictability.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/typescript.service.ts (**TypeScript integration**)\nimport { Injectable, Scope } from "@nestjs/common";\n\n// Define a TypeScript interface (**Interfaces**)\ninterface User {\n  id: number;\n  name: string;\n}\n\n@Injectable({ scope: Scope.DEFAULT }) // Singleton scope\nexport class TypeScriptService {\n  // Line 1: Define a method with static typing (**Static typing**)\n  getUser(user: User): string {\n    // Line 2: Access typed properties\n    const result = `User: ${user.name} (ID: ${user.id})`;\n    // Line 3: Log result\n    console.log(result);\n    // Line 4: Return the result\n    return result;\n  }\n\n  // Line 5: Example with decorator (**Decorators**)\n  @Log("User fetched") // Custom decorator (simulated)\n  fetchUser(id: number): User {\n    // Line 6: Return a typed object\n    return { id, name: "John Doe" };\n  }\n}\n\n// Simulated decorator for logging\nfunction Log(message: string) {\n  return function (target: any, key: string, descriptor: PropertyDescriptor) {\n    const original = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n      console.log(`${message} at ${key}`);\n      return original.apply(this, args);\n    };\n  };\n}\n')),(0,i.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asynchronous processing"),": Leverages Node.js async capabilities.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Async/await"),": Simplifies asynchronous code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Promises"),": Manages async operations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RxJS observables"),": Handles reactive streams."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dependency injection"),": Optimizes service resolution.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Scoped providers"),": Controls instance lifecycles (singleton, transient, request)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Lazy loading"),": Delays module initialization."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Caching"),": Improves response times.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"In-memory cache"),": Stores data locally."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Redis integration"),": Scales caching externally."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Request optimization"),": Enhances API performance.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Compression"),": Reduces response size."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Rate limiting"),": Prevents overload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response caching"),": Reuses frequent responses.")))),(0,i.kt)("h3",{id:"async-processing-service"},"Async Processing Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/async.service.ts (**Asynchronous processing**)\nimport { Injectable, Scope } from "@nestjs/common";\nimport { Observable, of } from "rxjs";\n\n@Injectable({ scope: Scope.TRANSIENT }) // Transient scope: new instance per injection\nexport class AsyncService {\n  // Promise-based async method\n  fetchWithPromise(id: number): Promise<string> {\n    // Line 1: Return a new Promise\n    return new Promise((resolve) => {\n      // Line 2: Simulate async delay with setTimeout\n      setTimeout(() => {\n        // Line 3: Resolve with data\n        resolve(`Promise Data ${id}`);\n        // Line 4: Log resolution\n        console.log("Promise resolved:", `Promise Data ${id}`);\n      }, 1000);\n    });\n  }\n\n  // Async/await wrapper\n  async fetchData(id: number): Promise<string> {\n    // Line 1: Await the Promise-based method\n    const data = await this.fetchWithPromise(id);\n    // Line 2: Log result\n    console.log("Async/await completed:", data);\n    // Line 3: Return data\n    return data;\n  }\n\n  // RxJS Observable method\n  fetchWithObservable(id: number): Observable<string> {\n    // Line 1: Create an Observable from a value\n    const observable = of(`Observable Data ${id}`);\n    // Line 2: Log Observable creation\n    console.log("Observable created for ID:", id);\n    // Line 3: Return the Observable\n    return observable;\n  }\n}\n')),(0,i.kt)("h3",{id:"dependency-injection-service"},"Dependency Injection Service"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Scoped Providers"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"DEFAULT"),": Singleton, one instance app-wide."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TRANSIENT"),": New instance per injection."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"REQUEST"),": New instance per request.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/di.service.ts (**Dependency injection**)\nimport { Injectable, Scope, Module } from "@nestjs/common";\n\n@Injectable({ scope: Scope.REQUEST }) // Request scope: new instance per HTTP request\nexport class DIService {\n  // Line 1: Define a counter to track instance lifecycle\n  private requestCount: number;\n\n  constructor() {\n    // Line 2: Initialize counter\n    this.requestCount = 0;\n    // Line 3: Log instance creation\n    console.log("DIService instance created");\n  }\n\n  // Line 4: Method to increment and return counter\n  getRequestCount(): number {\n    // Line 5: Increment counter\n    this.requestCount++;\n    // Line 6: Log current count\n    console.log("Request count:", this.requestCount);\n    // Line 7: Return count\n    return this.requestCount;\n  }\n}\n')),(0,i.kt)("h3",{id:"cache-service"},"Cache Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/cache.service.ts (**Caching**)\nimport { Injectable, Scope } from "@nestjs/common";\nimport { Cache } from "cache-manager";\nimport * as redisStore from "cache-manager-redis-store";\n\n@Injectable({ scope: Scope.DEFAULT }) // Singleton scope\nexport class CacheService {\n  private cache: Cache;\n\n  constructor() {\n    // Line 1: Initialize Redis-based cache\n    this.cache = redisStore.create({\n      host: "localhost",\n      port: 6379,\n      ttl: 3600,\n    });\n    // Line 2: Log cache initialization\n    console.log("CacheService initialized with Redis");\n  }\n\n  // Line 3: Cache data with key\n  async cacheData(key: string, value: string): Promise<void> {\n    // Line 4: Set value in cache\n    await this.cache.set(key, value);\n    // Line 5: Log caching action\n    console.log(`Cached ${key}: ${value}`);\n  }\n\n  // Line 6: Retrieve cached data\n  async getCachedData(key: string): Promise<string | undefined> {\n    // Line 7: Get value from cache\n    const value = await this.cache.get<string>(key);\n    // Line 8: Log retrieval result\n    console.log(`Retrieved ${key}: ${value || "not found"}`);\n    // Line 9: Return value\n    return value;\n  }\n}\n')),(0,i.kt)("h3",{id:"request-optimization-service"},"Request Optimization Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/perf/request.service.ts (**Request optimization**)\nimport { Injectable, Scope, UseInterceptors, CacheInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport * as compression from 'compression';\n\n@Injectable({ scope: Scope.DEFAULT }) // Singleton scope\n@UseInterceptors(CacheInterceptor) // **Response caching**\nexport class RequestService {\n  // Line 1: Simulate a compressed response\n  compressResponse(res: Response, data: string): void {\n    // Line 2: Apply compression middleware (simulated)\n    compression()(req: any, res, () => {\n      // Line 3: Write compressed response\n      res.write(data);\n      // Line 4: End response\n      res.end();\n      // Line 5: Log compression action\n      console.log('Response compressed:', data);\n    });\n  }\n\n  // Line 6: Rate-limited method (conceptual)\n  rateLimitedMethod(): string {\n    // Line 7: Return a simple response (rate limiting handled by middleware in practice)\n    const result = 'Rate-limited response';\n    // Line 8: Log response\n    console.log(result);\n    // Line 9: Return result\n    return result;\n  }\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"scaling"},"Scaling"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Expands across instances.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Microservices"),": Supports TCP, Kafka, RabbitMQ."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Load balancers"),": Distributes traffic (e.g., Nginx)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Vertical scaling"),": Boosts single-instance performance.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Optimize DI resolution"),": Reduces overhead."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Thread pool tuning"),": Leverages Node.js under the hood."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Distributed systems"),": Integrates with distributed tools.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Message brokers"),": Uses Kafka, RabbitMQ for communication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Redis for state"),": Manages shared state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Service discovery"),": Locates services (e.g., Consul).")))),(0,i.kt)("h3",{id:"microservice"},"Microservice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/scale/micro.service.ts (**Microservices**)\nimport { Injectable, Scope } from "@nestjs/common";\nimport { ClientKafka } from "@nestjs/microservices";\n\n@Injectable({ scope: Scope.DEFAULT }) // Singleton scope\nexport class MicroService {\n  private kafkaClient: ClientKafka;\n\n  constructor() {\n    // Line 1: Initialize Kafka client\n    this.kafkaClient = new ClientKafka({\n      client: { brokers: ["localhost:9092"] },\n      consumer: { groupId: "micro-group" },\n    });\n    // Line 2: Log initialization\n    console.log("Kafka client initialized");\n  }\n\n  // Line 3: Connect to Kafka on module init\n  async onModuleInit(): Promise<void> {\n    // Line 4: Establish connection\n    await this.kafkaClient.connect();\n    // Line 5: Log connection success\n    console.log("Kafka client connected");\n  }\n\n  // Line 6: Send event to Kafka topic\n  async sendEvent(topic: string, data: any): Promise<void> {\n    // Line 7: Emit event to Kafka\n    await this.kafkaClient\n      .emit(topic, { key: String(data.id), value: data })\n      .toPromise();\n    // Line 8: Log event sending\n    console.log(`Event sent to ${topic}:`, data);\n  }\n}\n')))}u.isMDXComponent=!0}}]);