"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6018],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>g});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=a.createContext({}),c=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(s.Provider,{value:e},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=c(t),d=o,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return t?a.createElement(g,i(i({ref:e},u),{},{components:t})):a.createElement(g,i({ref:e},u))}));function g(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[p]="string"==typeof n?n:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3642:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={title:"Functions"},i=void 0,l={unversionedId:"programming/nodejs/functions",id:"programming/nodejs/functions",title:"Functions",description:"Regular Functions",source:"@site/docs/programming/nodejs/functions.md",sourceDirName:"programming/nodejs",slug:"/programming/nodejs/functions",permalink:"/docs/programming/nodejs/functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Functions"},sidebar:"programming",previous:{title:"Copy in JavaScript",permalink:"/docs/programming/nodejs/copy"},next:{title:"Modules",permalink:"/docs/programming/nodejs/modules"}},s={},c=[{value:"Regular Functions",id:"regular-functions",level:2},{value:"Function Expressions",id:"function-expressions",level:2},{value:"Arrow Functions",id:"arrow-functions",level:2},{value:"Immediately Invoked Function Expression (IIFE)",id:"immediately-invoked-function-expression-iife",level:2},{value:"Generator Functions",id:"generator-functions",level:2},{value:"Async Functions",id:"async-functions",level:2},{value:"Named vs. Anonymous Functions",id:"named-vs-anonymous-functions",level:2},{value:"Pure Functions",id:"pure-functions",level:2},{value:"First-Class Functions",id:"first-class-functions",level:2},{value:"Callback functions",id:"callback-functions",level:2},{value:"Constructor Functions",id:"constructor-functions",level:2},{value:"Function Overloading",id:"function-overloading",level:2},{value:"High Order Functions",id:"high-order-functions",level:2},{value:"this, call, apply and bind",id:"this-call-apply-and-bind",level:2},{value:"Class",id:"class",level:2}],u={toc:c},p="wrapper";function m(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"regular-functions"},"Regular Functions"),(0,o.kt)("p",null,"Basic operations in any application. For instance, calculating the total price of items in a shopping cart."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function calculateTotal(items) {\n  let total = 0;\n  for (let item of items) {\n    total += item.price;\n  }\n  return total;\n}\n")),(0,o.kt)("h2",{id:"function-expressions"},"Function Expressions"),(0,o.kt)("p",null,"Event handlers in web applications."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const handleClick = function (event) {\n  console.log("Button clicked:", event.target);\n};\nbutton.addEventListener("click", handleClick);\n')),(0,o.kt)("h2",{id:"arrow-functions"},"Arrow Functions"),(0,o.kt)("p",null,"Short callback functions, especially in array methods like map, filter, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map((num) => num * 2);\n")),(0,o.kt)("h2",{id:"immediately-invoked-function-expression-iife"},"Immediately Invoked Function Expression (IIFE)"),(0,o.kt)("p",null,"Module encapsulation in older JavaScript codes to prevent polluting the global scope."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'(function () {\n  let privateVariable = "I\'m private";\n  console.log(privateVariable);\n})();\n')),(0,o.kt)("h2",{id:"generator-functions"},"Generator Functions"),(0,o.kt)("p",null,"Producing values on the fly without storing the entire sequence in memory. For example, generating an infinite Fibonacci sequence."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function* fibonacci() {\n  let [prev, curr] = [0, 1];\n  while (true) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n")),(0,o.kt)("h2",{id:"async-functions"},"Async Functions"),(0,o.kt)("p",null,"Fetching data from an API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"async function fetchUserData(userId) {\n  const response = await fetch(`https://api.example.com/users/${userId}`);\n  const data = await response.json();\n  return data;\n}\n")),(0,o.kt)("h2",{id:"named-vs-anonymous-functions"},"Named vs. Anonymous Functions"),(0,o.kt)("p",null,"One-time operations like setTimeout."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'setTimeout(function () {\n  console.log("Executed after 2 seconds");\n}, 2000);\n')),(0,o.kt)("h2",{id:"pure-functions"},"Pure Functions"),(0,o.kt)("p",null,"Predictable operations in functional programming. Like, getting a user's full name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function getFullName(firstName, lastName) {\n  return `${firstName} ${lastName}`;\n}\n")),(0,o.kt)("h2",{id:"first-class-functions"},"First-Class Functions"),(0,o.kt)("p",null,"A programming language is said to have First-Class Functions when functions in that language are treated like any other variable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const users = [\n  { id: 1, name: "Alice" },\n  { id: 2, name: "Bob" },\n];\nconst names = users.map(function (user) {\n  return user.name;\n});\n')),(0,o.kt)("h2",{id:"callback-functions"},"Callback functions"),(0,o.kt)("p",null,"Handling asynchronous operations. For example, reading a file in Node.js."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nfs.readFile("file.txt", "utf8", function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n')),(0,o.kt)("h2",{id:"constructor-functions"},"Constructor Functions"),(0,o.kt)("p",null,"Creating object instances for Object-Oriented Programming (OOP) in older JS patterns."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function Car(make, model) {\n  this.make = make;\n  this.model = model;\n}\nconst myCar = new Car("Toyota", "Corolla");\n')),(0,o.kt)("h2",{id:"function-overloading"},"Function Overloading"),(0,o.kt)("p",null,"TypeScript supports function overloading, where multiple function types are declared for the same function. The implementation must be compatible with all overloads."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function combine(a: string, b: string): string;\nfunction combine(a: number, b: number): number;\nfunction combine(a: any, b: any): any {\n  if (typeof a === "string" && typeof b === "string") {\n    return a.concat(b);\n  }\n  return a + b;\n}\n')),(0,o.kt)("h2",{id:"high-order-functions"},"High Order Functions"),(0,o.kt)("p",null,"High Order Functions (HOF) are a fundamental concept in functional programming. A High Order Function is any function which takes one or more functions as arguments, returns a function, or both."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function greet(whom) {\n  return function (greeting) {\n    console.log(`${greeting}, ${whom}!`);\n  };\n}\n\nconst greetJohn = greet("John");\ngreetJohn("Hello"); // Outputs: Hello, John!\n')),(0,o.kt)("h2",{id:"this-call-apply-and-bind"},"this, call, apply and bind"),(0,o.kt)("p",null,"In JavaScript, the value of this is determined by how a function is called, not where the function is defined. It can be a source of confusion, especially for those coming from other programming languages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const person = {\n  name: "Alice",\n  greet: function () {\n    console.log("Hello, " + this.name);\n  },\n};\n\nperson.greet(); // Hello, Alice\n')),(0,o.kt)("p",null,"The call method allows you to call a function with a given this value and arguments provided individually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function greet(arg1, arg2) {\n  console.log(arg1 + " " + this.name + " " + arg2);\n}\n\nconst person = { name: "Alice" };\n\ngreet.call(person, "Hello,", "How are you?"); // Hello, Alice How are you?\n')),(0,o.kt)("p",null,"The apply method is similar to call, but you pass the arguments as an array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function greet(arg1, arg2) {\n  console.log(arg1 + " " + this.name + " " + arg2);\n}\n\nconst person = { name: "Alice" };\n\ngreet.apply(person, ["Hello,", "How are you?"]); // Hello, Alice How are you?\n')),(0,o.kt)("p",null,"The bind method creates a new function that, when called, has its this keyword set to the provided value. It essentially binds a function to an object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function greet() {\n  console.log("Hello, " + this.name);\n}\n\nconst person = { name: "Alice" };\nconst boundGreet = greet.bind(person);\n\nboundGreet(); // Hello, Alice\n')),(0,o.kt)("h2",{id:"class"},"Class"),(0,o.kt)("p",null,"In both JavaScript and TypeScript, a class is a blueprint for creating objects with shared properties and methods. Classes encapsulate data for an object and provide a means to manipulate that data. They support inheritance, one of the fundamental aspects of object-oriented programming."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'class Person {\n  private name: string;\n  public age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public greet(): void {\n    console.log(\n      `Hello, my name is ${this.name} and I am ${this.age} years old.`\n    );\n  }\n\n  private somePrivateMethod(): void {\n    // This method can\'t be called from outside the class.\n  }\n}\n\nconst john = new Person("John", 25);\njohn.g;\n')))}m.isMDXComponent=!0}}]);