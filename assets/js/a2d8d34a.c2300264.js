"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,u=c["".concat(l,".").concat(g)]||c[g]||d[g]||o;return n?r.createElement(u,i(i({ref:t},m),{},{components:n})):r.createElement(u,i({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Programming Design Pattern"},i=void 0,s={unversionedId:"cheatsheet/fundamental/programming-design-pattern",id:"cheatsheet/fundamental/programming-design-pattern",title:"Programming Design Pattern",description:"1. Creational Patterns: Deal with object creation mechanisms.",source:"@site/docs/cheatsheet/fundamental/programming-design-pattern.md",sourceDirName:"cheatsheet/fundamental",slug:"/cheatsheet/fundamental/programming-design-pattern",permalink:"/docs/cheatsheet/fundamental/programming-design-pattern",draft:!1,tags:[],version:"current",frontMatter:{title:"Programming Design Pattern"},sidebar:"cheatsheet",previous:{title:"Design Pattern",permalink:"/docs/cheatsheet/fundamental/design-pattern"},next:{title:"Design Principle",permalink:"/docs/cheatsheet/fundamental/design-principle"}},l={},p=[{value:"<strong>1. Creational Design Patterns</strong>",id:"1-creational-design-patterns",level:2},{value:"<strong>a. Singleton Pattern</strong>",id:"a-singleton-pattern",level:3},{value:"<strong>b. Factory Method Pattern</strong>",id:"b-factory-method-pattern",level:3},{value:"<strong>c. Abstract Factory Pattern</strong>",id:"c-abstract-factory-pattern",level:3},{value:"<strong>d. Builder Pattern</strong>",id:"d-builder-pattern",level:3},{value:"<strong>e. Prototype Pattern</strong>",id:"e-prototype-pattern",level:3},{value:"<strong>f. Object Pool Pattern</strong>",id:"f-object-pool-pattern",level:3},{value:"<strong>2. Structural Design Patterns</strong>",id:"2-structural-design-patterns",level:2},{value:"<strong>a. Adapter Pattern</strong>",id:"a-adapter-pattern",level:3},{value:"<strong>b. Bridge Pattern</strong>",id:"b-bridge-pattern",level:3},{value:"<strong>c. Composite Pattern</strong>",id:"c-composite-pattern",level:3},{value:"<strong>d. Decorator Pattern</strong>",id:"d-decorator-pattern",level:3},{value:"<strong>e. Facade Pattern</strong>",id:"e-facade-pattern",level:3},{value:"<strong>f. Flyweight Pattern</strong>",id:"f-flyweight-pattern",level:3},{value:"<strong>g. Proxy Pattern</strong>",id:"g-proxy-pattern",level:3},{value:"<strong>3. Behavioral Design Patterns</strong>",id:"3-behavioral-design-patterns",level:2},{value:"<strong>a. Chain of Responsibility Pattern</strong>",id:"a-chain-of-responsibility-pattern",level:3},{value:"<strong>b. Command Pattern</strong>",id:"b-command-pattern",level:3},{value:"<strong>c. Interpreter Pattern</strong>",id:"c-interpreter-pattern",level:3},{value:"<strong>d. Iterator Pattern</strong>",id:"d-iterator-pattern",level:3},{value:"<strong>e. Mediator Pattern</strong>",id:"e-mediator-pattern",level:3},{value:"<strong>f. Memento Pattern</strong>",id:"f-memento-pattern",level:3},{value:"<strong>g. Observer Pattern</strong>",id:"g-observer-pattern",level:3},{value:"<strong>h. State Pattern</strong>",id:"h-state-pattern",level:3},{value:"<strong>i. Strategy Pattern</strong>",id:"i-strategy-pattern",level:3},{value:"<strong>j. Template Method Pattern</strong>",id:"j-template-method-pattern",level:3},{value:"<strong>k. Visitor Pattern</strong>",id:"k-visitor-pattern",level:3},{value:"<strong>4. Summary of All Design Patterns</strong>",id:"4-summary-of-all-design-patterns",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Creational Patterns:")," Deal with object creation mechanisms."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Structural Patterns:")," Concerned with object composition and relationships."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Behavioral Patterns:")," Focus on communication and responsibility between objects.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"1-creational-design-patterns"},(0,a.kt)("strong",{parentName:"h2"},"1. Creational Design Patterns")),(0,a.kt)("h3",{id:"a-singleton-pattern"},(0,a.kt)("strong",{parentName:"h3"},"a. Singleton Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Ensure a class has only one instance and provide a global point of access to it.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing a single database connection throughout the application.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Creating a singleton service for database connection."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// database.service.ts\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class DatabaseService {\n  private static instance: DatabaseService;\n\n  private constructor() {\n    // Initialize database connection\n    console.log("Database connection established.");\n  }\n\n  static getInstance(): DatabaseService {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n\n  query(sql: string) {\n    // Execute SQL query\n    console.log(`Executing query: ${sql}`);\n  }\n}\n\n// app.module.ts\nimport { Module } from "@nestjs/common";\nimport { DatabaseService } from "./database.service";\n\n@Module({\n  providers: [\n    {\n      provide: DatabaseService,\n      useFactory: () => DatabaseService.getInstance(),\n    },\n  ],\n  exports: [DatabaseService],\n})\nexport class DatabaseModule {}\n')))),(0,a.kt)("h3",{id:"b-factory-method-pattern"},(0,a.kt)("strong",{parentName:"h3"},"b. Factory Method Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Define an interface for creating an object but let subclasses alter the type of objects that will be created.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Creating different types of notifications (Email, SMS) based on user preference.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a notification factory."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// notifications/notification.interface.ts\nexport interface Notification {\n  send(message: string): void;\n}\n\n// notifications/email.notification.ts\nimport { Notification } from "./notification.interface";\n\nexport class EmailNotification implements Notification {\n  send(message: string): void {\n    console.log(`Sending Email: ${message}`);\n  }\n}\n\n// notifications/sms.notification.ts\nimport { Notification } from "./notification.interface";\n\nexport class SmsNotification implements Notification {\n  send(message: string): void {\n    console.log(`Sending SMS: ${message}`);\n  }\n}\n\n// notifications/notification.factory.ts\nimport { Injectable } from "@nestjs/common";\nimport { Notification } from "./notification.interface";\nimport { EmailNotification } from "./email.notification";\nimport { SmsNotification } from "./sms.notification";\n\n@Injectable()\nexport class NotificationFactory {\n  createNotification(type: string): Notification {\n    switch (type) {\n      case "email":\n        return new EmailNotification();\n      case "sms":\n        return new SmsNotification();\n      default:\n        throw new Error("Invalid notification type");\n    }\n  }\n}\n\n// notifications/notification.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { NotificationFactory } from "./notification.factory";\n\n@Injectable()\nexport class NotificationService {\n  constructor(private readonly factory: NotificationFactory) {}\n\n  notify(type: string, message: string) {\n    const notification = this.factory.createNotification(type);\n    notification.send(message);\n  }\n}\n\n// notifications/notifications.module.ts\nimport { Module } from "@nestjs/common";\nimport { NotificationFactory } from "./notification.factory";\nimport { NotificationService } from "./notification.service";\n\n@Module({\n  providers: [NotificationFactory, NotificationService],\n  exports: [NotificationService],\n})\nexport class NotificationsModule {}\n')))),(0,a.kt)("h3",{id:"c-abstract-factory-pattern"},(0,a.kt)("strong",{parentName:"h3"},"c. Abstract Factory Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Provide an interface for creating families of related or dependent objects without specifying their concrete classes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Creating UI components for different themes (Light, Dark).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a UI component factory."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// ui/components/button.interface.ts\nexport interface Button {\n  render(): void;\n}\n\n// ui/components/light.button.ts\nimport { Button } from "./button.interface";\n\nexport class LightButton implements Button {\n  render(): void {\n    console.log("Rendering Light Button");\n  }\n}\n\n// ui/components/dark.button.ts\nimport { Button } from "./button.interface";\n\nexport class DarkButton implements Button {\n  render(): void {\n    console.log("Rendering Dark Button");\n  }\n}\n\n// ui/components/textbox.interface.ts\nexport interface TextBox {\n  render(): void;\n}\n\n// ui/components/light.textbox.ts\nimport { TextBox } from "./textbox.interface";\n\nexport class LightTextBox implements TextBox {\n  render(): void {\n    console.log("Rendering Light TextBox");\n  }\n}\n\n// ui/components/dark.textbox.ts\nimport { TextBox } from "./textbox.interface";\n\nexport class DarkTextBox implements TextBox {\n  render(): void {\n    console.log("Rendering Dark TextBox");\n  }\n}\n\n// ui/factories/ui.factory.interface.ts\nimport { Button } from "../components/button.interface";\nimport { TextBox } from "../components/textbox.interface";\n\nexport interface UIFactory {\n  createButton(): Button;\n  createTextBox(): TextBox;\n}\n\n// ui/factories/light.factory.ts\nimport { Injectable } from "@nestjs/common";\nimport { UIFactory } from "./ui.factory.interface";\nimport { LightButton } from "../components/light.button";\nimport { LightTextBox } from "../components/light.textbox";\n\n@Injectable()\nexport class LightFactory implements UIFactory {\n  createButton(): Button {\n    return new LightButton();\n  }\n\n  createTextBox(): TextBox {\n    return new LightTextBox();\n  }\n}\n\n// ui/factories/dark.factory.ts\nimport { Injectable } from "@nestjs/common";\nimport { UIFactory } from "./ui.factory.interface";\nimport { DarkButton } from "../components/dark.button";\nimport { DarkTextBox } from "../components/dark.textbox";\n\n@Injectable()\nexport class DarkFactory implements UIFactory {\n  createButton(): Button {\n    return new DarkButton();\n  }\n\n  createTextBox(): TextBox {\n    return new DarkTextBox();\n  }\n}\n\n// ui/ui.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { UIFactory } from "./factories/ui.factory.interface";\n\n@Injectable()\nexport class UIService {\n  constructor(private readonly factory: UIFactory) {}\n\n  renderUI() {\n    const button = this.factory.createButton();\n    const textbox = this.factory.createTextBox();\n    button.render();\n    textbox.render();\n  }\n}\n\n// ui/ui.module.ts\nimport { Module } from "@nestjs/common";\nimport { UIService } from "./ui.service";\nimport { LightFactory } from "./factories/light.factory";\nimport { DarkFactory } from "./factories/dark.factory";\n\n@Module({\n  providers: [\n    UIService,\n    {\n      provide: "UIFactory",\n      useClass: LightFactory, // Switch to DarkFactory for dark theme\n    },\n    LightFactory,\n    DarkFactory,\n  ],\n  exports: [UIService],\n})\nexport class UIModule {}\n')))),(0,a.kt)("h3",{id:"d-builder-pattern"},(0,a.kt)("strong",{parentName:"h3"},"d. Builder Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Separate the construction of a complex object from its representation, allowing the same construction process to create different representations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Building complex objects like user profiles with optional fields.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a user profile builder."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// builder/user.builder.ts\nexport class User {\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string;\n}\n\nexport interface UserBuilder {\n  setName(name: string): UserBuilder;\n  setEmail(email: string): UserBuilder;\n  setPhone(phone: string): UserBuilder;\n  setAddress(address: string): UserBuilder;\n  build(): User;\n}\n\nexport class ConcreteUserBuilder implements UserBuilder {\n  private user: User = new User();\n\n  setName(name: string): UserBuilder {\n    this.user.name = name;\n    return this;\n  }\n\n  setEmail(email: string): UserBuilder {\n    this.user.email = email;\n    return this;\n  }\n\n  setPhone(phone: string): UserBuilder {\n    this.user.phone = phone;\n    return this;\n  }\n\n  setAddress(address: string): UserBuilder {\n    this.user.address = address;\n    return this;\n  }\n\n  build(): User {\n    return this.user;\n  }\n}\n\n// builder/user.director.ts\nimport { Injectable } from "@nestjs/common";\nimport { UserBuilder } from "./user.builder";\n\n@Injectable()\nexport class UserDirector {\n  constructor(private readonly builder: UserBuilder) {}\n\n  constructBasicUser(name: string, email: string): User {\n    return this.builder.setName(name).setEmail(email).build();\n  }\n\n  constructFullUser(\n    name: string,\n    email: string,\n    phone: string,\n    address: string\n  ): User {\n    return this.builder\n      .setName(name)\n      .setEmail(email)\n      .setPhone(phone)\n      .setAddress(address)\n      .build();\n  }\n}\n\n// user.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { ConcreteUserBuilder, UserDirector } from "./builder/user.director";\n\n@Injectable()\nexport class UserService {\n  private director: UserDirector;\n\n  constructor() {\n    const builder = new ConcreteUserBuilder();\n    this.director = new UserDirector(builder);\n  }\n\n  createBasicUser(name: string, email: string) {\n    return this.director.constructBasicUser(name, email);\n  }\n\n  createFullUser(\n    name: string,\n    email: string,\n    phone: string,\n    address: string\n  ) {\n    return this.director.constructFullUser(name, email, phone, address);\n  }\n}\n\n// user.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { UserService } from "./user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post("basic")\n  createBasicUser(@Body() body: { name: string; email: string }) {\n    const user = this.userService.createBasicUser(body.name, body.email);\n    return user;\n  }\n\n  @Post("full")\n  createFullUser(\n    @Body()\n    body: {\n      name: string;\n      email: string;\n      phone: string;\n      address: string;\n    }\n  ) {\n    const user = this.userService.createFullUser(\n      body.name,\n      body.email,\n      body.phone,\n      body.address\n    );\n    return user;\n  }\n}\n\n// user.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\n\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')))),(0,a.kt)("h3",{id:"e-prototype-pattern"},(0,a.kt)("strong",{parentName:"h3"},"e. Prototype Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Cloning objects such as user settings or templates to create new instances with similar configurations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a prototype for user settings."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// prototype/user-settings.interface.ts\nexport interface UserSettings {\n  theme: string;\n  notifications: boolean;\n  layout: string;\n  clone(): UserSettings;\n}\n\n// prototype/standard-settings.ts\nimport { UserSettings } from "./user-settings.interface";\n\nexport class StandardSettings implements UserSettings {\n  theme = "light";\n  notifications = true;\n  layout = "grid";\n\n  clone(): UserSettings {\n    return new StandardSettings();\n  }\n}\n\n// prototype/custom-settings.ts\nimport { UserSettings } from "./user-settings.interface";\n\nexport class CustomSettings implements UserSettings {\n  theme: string;\n  notifications: boolean;\n  layout: string;\n\n  constructor(theme: string, notifications: boolean, layout: string) {\n    this.theme = theme;\n    this.notifications = notifications;\n    this.layout = layout;\n  }\n\n  clone(): UserSettings {\n    return new CustomSettings(this.theme, this.notifications, this.layout);\n  }\n}\n\n// prototype/settings.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { UserSettings } from "./user-settings.interface";\nimport { StandardSettings } from "./standard-settings";\nimport { CustomSettings } from "./custom-settings";\n\n@Injectable()\nexport class SettingsService {\n  private standardSettings: UserSettings = new StandardSettings();\n\n  getStandardSettings(): UserSettings {\n    return this.standardSettings.clone();\n  }\n\n  createCustomSettings(\n    theme: string,\n    notifications: boolean,\n    layout: string\n  ): UserSettings {\n    const custom = new CustomSettings(theme, notifications, layout);\n    return custom.clone();\n  }\n}\n\n// settings.controller.ts\nimport { Controller, Get, Post, Body } from "@nestjs/common";\nimport { SettingsService } from "./settings.service";\n\n@Controller("settings")\nexport class SettingsController {\n  constructor(private readonly settingsService: SettingsService) {}\n\n  @Get("standard")\n  getStandardSettings() {\n    return this.settingsService.getStandardSettings();\n  }\n\n  @Post("custom")\n  createCustomSettings(\n    @Body() body: { theme: string; notifications: boolean; layout: string }\n  ) {\n    const settings = this.settingsService.createCustomSettings(\n      body.theme,\n      body.notifications,\n      body.layout\n    );\n    return settings;\n  }\n}\n\n// settings.module.ts\nimport { Module } from "@nestjs/common";\nimport { SettingsService } from "./settings.service";\nimport { SettingsController } from "./settings.controller";\n\n@Module({\n  providers: [SettingsService],\n  controllers: [SettingsController],\n})\nexport class SettingsModule {}\n')))),(0,a.kt)("h3",{id:"f-object-pool-pattern"},(0,a.kt)("strong",{parentName:"h3"},"f. Object Pool Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Manage the reuse of expensive-to-create objects by keeping a pool of ready-to-use objects.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing database connections or thread pools to optimize resource usage.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a simple object pool for database connections."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// pool/connection.ts\nexport class Connection {\n  constructor(public id: number) {}\n\n  execute(query: string) {\n    console.log(`Connection ${this.id}: Executing query "${query}"`);\n  }\n}\n\n// pool/connection.pool.ts\nimport { Injectable } from "@nestjs/common";\nimport { Connection } from "./connection";\n\n@Injectable()\nexport class ConnectionPool {\n  private pool: Connection[] = [];\n  private maxConnections = 5;\n  private currentId = 1;\n\n  constructor() {\n    for (let i = 0; i < this.maxConnections; i++) {\n      this.pool.push(new Connection(this.currentId++));\n    }\n  }\n\n  acquire(): Connection {\n    if (this.pool.length === 0) {\n      throw new Error("No available connections");\n    }\n    return this.pool.pop();\n  }\n\n  release(connection: Connection) {\n    this.pool.push(connection);\n  }\n}\n\n// pool/database.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { ConnectionPool } from "./connection.pool";\nimport { Connection } from "./connection";\n\n@Injectable()\nexport class DatabaseService {\n  constructor(private readonly pool: ConnectionPool) {}\n\n  executeQuery(query: string) {\n    const connection: Connection = this.pool.acquire();\n    try {\n      connection.execute(query);\n    } finally {\n      this.pool.release(connection);\n    }\n  }\n}\n\n// pool/database.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { DatabaseService } from "./database.service";\n\n@Controller("database")\nexport class DatabaseController {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  @Post("query")\n  executeQuery(@Body() body: { query: string }) {\n    this.databaseService.executeQuery(body.query);\n    return { message: "Query executed" };\n  }\n}\n\n// pool/pool.module.ts\nimport { Module } from "@nestjs/common";\nimport { ConnectionPool } from "./connection.pool";\nimport { DatabaseService } from "./database.service";\nimport { DatabaseController } from "./database.controller";\n\n@Module({\n  providers: [ConnectionPool, DatabaseService],\n  controllers: [DatabaseController],\n})\nexport class PoolModule {}\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"2-structural-design-patterns"},(0,a.kt)("strong",{parentName:"h2"},"2. Structural Design Patterns")),(0,a.kt)("h3",{id:"a-adapter-pattern"},(0,a.kt)("strong",{parentName:"h3"},"a. Adapter Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Convert the interface of a class into another interface clients expect, allowing incompatible interfaces to work together.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Integrating a third-party library with a different interface into your application.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Adapting a legacy logging service to a new logging interface."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// legacy/legacy-logger.ts\nexport class LegacyLogger {\n  logMessage(msg: string) {\n    console.log(`LegacyLogger: ${msg}`);\n  }\n}\n\n// adapters/logger.adapter.ts\nimport { Injectable } from "@nestjs/common";\nimport { LegacyLogger } from "../legacy/legacy-logger";\nimport { LoggerService } from "./logger.service.interface";\n\n@Injectable()\nexport class LoggerAdapter implements LoggerService {\n  private legacyLogger = new LegacyLogger();\n\n  log(msg: string): void {\n    this.legacyLogger.logMessage(msg);\n  }\n}\n\n// adapters/logger.service.interface.ts\nexport interface LoggerService {\n  log(msg: string): void;\n}\n\n// app.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { LoggerService } from "./adapters/logger.service.interface";\n\n@Injectable()\nexport class AppService {\n  constructor(private readonly logger: LoggerService) {}\n\n  doSomething() {\n    this.logger.log("Doing something important...");\n  }\n}\n\n// app.module.ts\nimport { Module } from "@nestjs/common";\nimport { AppService } from "./app.service";\nimport { LoggerAdapter } from "./adapters/logger.adapter";\n\n@Module({\n  providers: [\n    AppService,\n    {\n      provide: "LoggerService",\n      useClass: LoggerAdapter,\n    },\n  ],\n})\nexport class AppModule {}\n')))),(0,a.kt)("h3",{id:"b-bridge-pattern"},(0,a.kt)("strong",{parentName:"h3"},"b. Bridge Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Decouple an abstraction from its implementation so that the two can vary independently.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Separating the abstraction of a remote control from the device it controls (e.g., TV, Radio).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a remote control abstraction that can work with different devices."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// bridge/devices/device.interface.ts\nexport interface Device {\n  turnOn(): void;\n  turnOff(): void;\n}\n\n// bridge/devices/tv.device.ts\nimport { Device } from "./device.interface";\n\nexport class TV implements Device {\n  turnOn(): void {\n    console.log("TV is turned on.");\n  }\n\n  turnOff(): void {\n    console.log("TV is turned off.");\n  }\n}\n\n// bridge/devices/radio.device.ts\nimport { Device } from "./device.interface";\n\nexport class Radio implements Device {\n  turnOn(): void {\n    console.log("Radio is turned on.");\n  }\n\n  turnOff(): void {\n    console.log("Radio is turned off.");\n  }\n}\n\n// bridge/remote.control.ts\nexport abstract class RemoteControl {\n  protected device: Device;\n\n  constructor(device: Device) {\n    this.device = device;\n  }\n\n  abstract pressPower(): void;\n}\n\n// bridge/basic.remote.control.ts\nimport { RemoteControl } from "./remote.control";\n\nexport class BasicRemoteControl extends RemoteControl {\n  pressPower(): void {\n    console.log("BasicRemoteControl: Pressing power button.");\n    // Toggle device power\n    // For simplicity, just turn on\n    this.device.turnOn();\n  }\n}\n\n// bridge/advanced.remote.control.ts\nimport { RemoteControl } from "./remote.control";\n\nexport class AdvancedRemoteControl extends RemoteControl {\n  pressPower(): void {\n    console.log("AdvancedRemoteControl: Pressing power button.");\n    this.device.turnOn();\n  }\n\n  mute(): void {\n    console.log("AdvancedRemoteControl: Muting device.");\n    // Implement mute functionality if supported\n  }\n}\n\n// bridge/remote.module.ts\nimport { Module } from "@nestjs/common";\nimport { BasicRemoteControl } from "./basic.remote.control";\nimport { AdvancedRemoteControl } from "./advanced.remote.control";\nimport { TV } from "./devices/tv.device";\nimport { Radio } from "./devices/radio.device";\n\n@Module({\n  providers: [BasicRemoteControl, AdvancedRemoteControl, TV, Radio],\n  exports: [BasicRemoteControl, AdvancedRemoteControl],\n})\nexport class RemoteModule {}\n')))),(0,a.kt)("h3",{id:"c-composite-pattern"},(0,a.kt)("strong",{parentName:"h3"},"c. Composite Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions uniformly.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Representing a file system where files and directories are treated uniformly.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a file system structure with files and directories."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// composite/file.component.ts\nexport interface FileComponent {\n  getName(): string;\n  display(indent: string): void;\n}\n\n// composite/file.ts\nimport { FileComponent } from "./file.component";\n\nexport class File implements FileComponent {\n  constructor(private name: string) {}\n\n  getName(): string {\n    return this.name;\n  }\n\n  display(indent: string): void {\n    console.log(`${indent}- File: ${this.name}`);\n  }\n}\n\n// composite/directory.ts\nimport { FileComponent } from "./file.component";\n\nexport class Directory implements FileComponent {\n  private children: FileComponent[] = [];\n\n  constructor(private name: string) {}\n\n  add(component: FileComponent): void {\n    this.children.push(component);\n  }\n\n  remove(component: FileComponent): void {\n    const index = this.children.indexOf(component);\n    if (index !== -1) {\n      this.children.splice(index, 1);\n    }\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  display(indent: string): void {\n    console.log(`${indent}+ Directory: ${this.name}`);\n    this.children.forEach((child) => child.display(indent + "  "));\n  }\n}\n\n// composite/filesystem.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { Directory } from "./directory";\nimport { File } from "./file";\n\n@Injectable()\nexport class FilesystemService {\n  buildFileSystem(): Directory {\n    const root = new Directory("root");\n    const bin = new Directory("bin");\n    const etc = new Directory("etc");\n    const usr = new Directory("usr");\n\n    bin.add(new File("bash"));\n    bin.add(new File("ls"));\n\n    etc.add(new File("config.yaml"));\n\n    usr.add(new File("readme.md"));\n    usr.add(new File("app.js"));\n\n    root.add(bin);\n    root.add(etc);\n    root.add(usr);\n\n    return root;\n  }\n}\n\n// composite/filesystem.controller.ts\nimport { Controller, Get } from "@nestjs/common";\nimport { FilesystemService } from "./filesystem.service";\n\n@Controller("filesystem")\nexport class FilesystemController {\n  constructor(private readonly fsService: FilesystemService) {}\n\n  @Get("display")\n  displayFileSystem() {\n    const root = this.fsService.buildFileSystem();\n    root.display("");\n    return { message: "File system displayed in console." };\n  }\n}\n\n// composite/filesystem.module.ts\nimport { Module } from "@nestjs/common";\nimport { FilesystemService } from "./filesystem.service";\nimport { FilesystemController } from "./filesystem.controller";\n\n@Module({\n  providers: [FilesystemService],\n  controllers: [FilesystemController],\n})\nexport class FilesystemModule {}\n')))),(0,a.kt)("h3",{id:"d-decorator-pattern"},(0,a.kt)("strong",{parentName:"h3"},"d. Decorator Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Adding logging or authentication to existing services without modifying their code.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a logging decorator for services."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// decorator/logging.decorator.ts\nimport {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from "@nestjs/common";\nimport { Observable } from "rxjs";\nimport { tap } from "rxjs/operators";\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const now = Date.now();\n    console.log("Before...");\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n// app.service.ts\nimport { Injectable, UseInterceptors } from "@nestjs/common";\nimport { LoggingInterceptor } from "./decorator/logging.decorator";\n\n@Injectable()\n@UseInterceptors(LoggingInterceptor)\nexport class AppService {\n  getHello(): string {\n    return "Hello World!";\n  }\n}\n\n// app.controller.ts\nimport { Controller, Get } from "@nestjs/common";\nimport { AppService } from "./app.service";\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n// app.module.ts\nimport { Module } from "@nestjs/common";\nimport { AppController } from "./app.controller";\nimport { AppService } from "./app.service";\nimport { APP_INTERCEPTOR } from "@nestjs/core";\nimport { LoggingInterceptor } from "./decorator/logging.decorator";\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n')))),(0,a.kt)("h3",{id:"e-facade-pattern"},(0,a.kt)("strong",{parentName:"h3"},"e. Facade Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Provide a simplified interface to a complex subsystem, making it easier to use.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Simplifying interactions with multiple services, such as user management, authentication, and notifications.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a facade for user operations."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// facade/user.facade.ts\nimport { Injectable } from "@nestjs/common";\nimport { UserService } from "../user/user.service";\nimport { AuthService } from "../auth/auth.service";\nimport { NotificationService } from "../notifications/notification.service";\n\n@Injectable()\nexport class UserFacade {\n  constructor(\n    private readonly userService: UserService,\n    private readonly authService: AuthService,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  async registerUser(email: string, password: string) {\n    const user = await this.userService.createUser(email, password);\n    await this.authService.register(user);\n    this.notificationService.notify("email", `Welcome ${email}!`);\n    return user;\n  }\n}\n\n// user.service.ts\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UserService {\n  private users = [];\n\n  async createUser(email: string, password: string): Promise<any> {\n    const user = { id: Date.now().toString(), email, password };\n    this.users.push(user);\n    return user;\n  }\n}\n\n// auth.service.ts\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class AuthService {\n  async register(user: any): Promise<void> {\n    console.log(`AuthService: Registering user ${user.email}`);\n    // Registration logic\n  }\n}\n\n// notifications/notification.service.ts\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class NotificationService {\n  notify(type: string, message: string): void {\n    console.log(\n      `NotificationService: Sending ${type} notification: ${message}`\n    );\n    // Notification logic\n  }\n}\n\n// facade/facade.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserFacade } from "./user.facade";\nimport { UserService } from "../user/user.service";\nimport { AuthService } from "../auth/auth.service";\nimport { NotificationService } from "../notifications/notification.service";\n\n@Module({\n  providers: [UserFacade, UserService, AuthService, NotificationService],\n  exports: [UserFacade],\n})\nexport class FacadeModule {}\n')))),(0,a.kt)("h3",{id:"f-flyweight-pattern"},(0,a.kt)("strong",{parentName:"h3"},"f. Flyweight Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Use sharing to support large numbers of fine-grained objects efficiently.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing a large number of similar objects, such as characters in a text editor.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a flyweight for character objects."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// flyweight/character.ts\nexport interface Character {\n  charCode: string;\n  display(font: string): void;\n}\n\n// flyweight/concrete.character.ts\nimport { Character } from "./character";\n\nexport class ConcreteCharacter implements Character {\n  constructor(public charCode: string) {}\n\n  display(font: string): void {\n    console.log(`Character: ${this.charCode}, Font: ${font}`);\n  }\n}\n\n// flyweight/flyweight.factory.ts\nimport { Injectable } from "@nestjs/common";\nimport { Character } from "./character";\nimport { ConcreteCharacter } from "./concrete.character";\n\n@Injectable()\nexport class FlyweightFactory {\n  private characters: Map<string, Character> = new Map();\n\n  getCharacter(charCode: string): Character {\n    if (!this.characters.has(charCode)) {\n      this.characters.set(charCode, new ConcreteCharacter(charCode));\n    }\n    return this.characters.get(charCode);\n  }\n}\n\n// flyweight/text.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { FlyweightFactory } from "./flyweight.factory";\n\n@Injectable()\nexport class TextService {\n  constructor(private readonly factory: FlyweightFactory) {}\n\n  renderText(text: string, font: string) {\n    for (const char of text) {\n      const character = this.factory.getCharacter(char);\n      character.display(font);\n    }\n  }\n}\n\n// flyweight/text.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { TextService } from "./text.service";\n\n@Controller("text")\nexport class TextController {\n  constructor(private readonly textService: TextService) {}\n\n  @Post("render")\n  renderText(@Body() body: { text: string; font: string }) {\n    this.textService.renderText(body.text, body.font);\n    return { message: "Text rendered in console." };\n  }\n}\n\n// flyweight/flyweight.module.ts\nimport { Module } from "@nestjs/common";\nimport { FlyweightFactory } from "./flyweight.factory";\nimport { TextService } from "./text.service";\nimport { TextController } from "./text.controller";\n\n@Module({\n  providers: [FlyweightFactory, TextService],\n  controllers: [TextController],\n})\nexport class FlyweightModule {}\n')))),(0,a.kt)("h3",{id:"g-proxy-pattern"},(0,a.kt)("strong",{parentName:"h3"},"g. Proxy Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Provide a surrogate or placeholder for another object to control access to it.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing lazy initialization, access control, or logging for service methods.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a proxy for a payment service to add logging."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// proxy/payment.interface.ts\nexport interface PaymentService {\n  processPayment(amount: number): void;\n}\n\n// proxy/payment.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { PaymentService } from "./payment.interface";\n\n@Injectable()\nexport class RealPaymentService implements PaymentService {\n  processPayment(amount: number): void {\n    console.log(`RealPaymentService: Processing payment of $${amount}`);\n    // Payment processing logic\n  }\n}\n\n// proxy/payment.proxy.ts\nimport { Injectable } from "@nestjs/common";\nimport { PaymentService } from "./payment.interface";\nimport { RealPaymentService } from "./payment.service";\n\n@Injectable()\nexport class PaymentProxy implements PaymentService {\n  private realPaymentService: RealPaymentService;\n\n  constructor() {\n    // Lazy initialization\n    // this.realPaymentService = new RealPaymentService();\n  }\n\n  processPayment(amount: number): void {\n    if (!this.realPaymentService) {\n      this.realPaymentService = new RealPaymentService();\n    }\n    console.log("PaymentProxy: Logging payment process.");\n    this.realPaymentService.processPayment(amount);\n  }\n}\n\n// proxy/payment.module.ts\nimport { Module } from "@nestjs/common";\nimport { PaymentProxy } from "./payment.proxy";\nimport { RealPaymentService } from "./payment.service";\nimport { PaymentController } from "./payment.controller";\n\n@Module({\n  providers: [\n    RealPaymentService,\n    {\n      provide: "PaymentService",\n      useClass: PaymentProxy,\n    },\n  ],\n  controllers: [PaymentController],\n})\nexport class PaymentModule {}\n\n// proxy/payment.controller.ts\nimport { Controller, Post, Body, Inject } from "@nestjs/common";\nimport { PaymentService } from "./payment.interface";\n\n@Controller("payment")\nexport class PaymentController {\n  constructor(\n    @Inject("PaymentService") private readonly paymentService: PaymentService\n  ) {}\n\n  @Post("process")\n  processPayment(@Body() body: { amount: number }) {\n    this.paymentService.processPayment(body.amount);\n    return { message: "Payment processed." };\n  }\n}\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"3-behavioral-design-patterns"},(0,a.kt)("strong",{parentName:"h2"},"3. Behavioral Design Patterns")),(0,a.kt)("h3",{id:"a-chain-of-responsibility-pattern"},(0,a.kt)("strong",{parentName:"h3"},"a. Chain of Responsibility Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Pass a request along a chain of handlers where each handler can either process the request or pass it to the next handler in the chain.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing middleware chains for processing HTTP requests, such as authentication, authorization, and logging.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a middleware chain with authentication, authorization, and logging handlers."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// handlers/handler.interface.ts\nexport interface Handler {\n  setNext(handler: Handler): Handler;\n  handle(request: any): any;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// handlers/base.handler.ts\nexport abstract class BaseHandler implements Handler {\n  private nextHandler: Handler;\n\n  public setNext(handler: Handler): Handler {\n    this.nextHandler = handler;\n    return handler;\n  }\n\n  public handle(request: any): any {\n    if (this.nextHandler) {\n      return this.nextHandler.handle(request);\n    }\n    return null;\n  }\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// handlers/authentication.handler.ts\nimport { Injectable } from "@nestjs/common";\nimport { Handler } from "./handler.interface";\nimport { BaseHandler } from "./base.handler";\n\n@Injectable()\nexport class AuthenticationHandler extends BaseHandler {\n  public handle(request: any): any {\n    if (!request.headers.authorization) {\n      return { status: 401, message: "Unauthorized" };\n    }\n    console.log("AuthenticationHandler: Authenticated");\n    return super.handle(request);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// handlers/authorization.handler.ts\nimport { Injectable } from "@nestjs/common";\nimport { Handler } from "./handler.interface";\nimport { BaseHandler } from "./base.handler";\n\n@Injectable()\nexport class AuthorizationHandler extends BaseHandler {\n  public handle(request: any): any {\n    if (!request.user.isAdmin) {\n      return { status: 403, message: "Forbidden" };\n    }\n    console.log("AuthorizationHandler: Authorized");\n    return super.handle(request);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// handlers/logging.handler.ts\nimport { Injectable } from "@nestjs/common";\nimport { Handler } from "./handler.interface";\nimport { BaseHandler } from "./base.handler";\n\n@Injectable()\nexport class LoggingHandler extends BaseHandler {\n  public handle(request: any): any {\n    console.log("LoggingHandler: Logging request");\n    return super.handle(request);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// handlers/handler.chain.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { Handler } from "./handler.interface";\nimport { AuthenticationHandler } from "./authentication.handler";\nimport { AuthorizationHandler } from "./authorization.handler";\nimport { LoggingHandler } from "./logging.handler";\n\n@Injectable()\nexport class HandlerChainService {\n  private chain: Handler;\n\n  constructor(\n    private authHandler: AuthenticationHandler,\n    private authorizationHandler: AuthorizationHandler,\n    private loggingHandler: LoggingHandler\n  ) {\n    this.chain = this.authHandler;\n    this.authHandler\n      .setNext(this.authorizationHandler)\n      .setNext(this.loggingHandler);\n  }\n\n  public handle(request: any): any {\n    return this.chain.handle(request);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// middleware/handler.middleware.ts\nimport { Injectable, NestMiddleware } from "@nestjs/common";\nimport { Request, Response, NextFunction } from "express";\nimport { HandlerChainService } from "../handlers/handler.chain.service";\n\n@Injectable()\nexport class HandlerMiddleware implements NestMiddleware {\n  constructor(private handlerChain: HandlerChainService) {}\n\n  use(req: Request, res: Response, next: NextFunction) {\n    const result = this.handlerChain.handle(req);\n    if (result) {\n      res.status(result.status).json({ message: result.message });\n    } else {\n      next();\n    }\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.controller.ts\nimport { Controller, Get } from "@nestjs/common";\n\n@Controller("users")\nexport class UserController {\n  @Get("profile")\n  getProfile() {\n    return { message: "User profile data" };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.module.ts\nimport { Module, MiddlewareConsumer, RequestMethod } from "@nestjs/common";\nimport { AuthenticationHandler } from "./handlers/authentication.handler";\nimport { AuthorizationHandler } from "./handlers/authorization.handler";\nimport { LoggingHandler } from "./handlers/logging.handler";\nimport { HandlerChainService } from "./handlers/handler.chain.service";\nimport { HandlerMiddleware } from "./middleware/handler.middleware";\nimport { UserController } from "./user.controller";\nimport { UserService } from "./user.service";\n\n@Module({\n  providers: [\n    AuthenticationHandler,\n    AuthorizationHandler,\n    LoggingHandler,\n    HandlerChainService,\n    UserService,\n  ],\n  controllers: [UserController],\n})\nexport class UserModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HandlerMiddleware)\n      .forRoutes({ path: "users/*", method: RequestMethod.ALL });\n  }\n}\n')))),(0,a.kt)("h3",{id:"b-command-pattern"},(0,a.kt)("strong",{parentName:"h3"},"b. Command Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Encapsulate a request as an object, allowing parameterization and queuing of requests. It decouples the object that invokes the operation from the one that knows how to perform it.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing operations like creating users or processing orders with the ability to log or undo actions, often implemented using CQRS (Command Query Responsibility Segregation).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing user creation with CQRS, handling commands and events."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// commands/create-user.command.ts\nexport class CreateUserCommand {\n  constructor(\n    public readonly email: string,\n    public readonly password: string\n  ) {}\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// handlers/create-user.handler.ts\nimport { CommandHandler, ICommandHandler, EventBus } from "@nestjs/cqrs";\nimport { CreateUserCommand } from "../commands/create-user.command";\nimport { UserCreatedEvent } from "../events/user-created.event";\n\n@CommandHandler(CreateUserCommand)\nexport class CreateUserHandler implements ICommandHandler<CreateUserCommand> {\n  private users = [];\n\n  constructor(private eventBus: EventBus) {}\n\n  async execute(command: CreateUserCommand): Promise<any> {\n    const user = {\n      id: Date.now().toString(),\n      email: command.email,\n      password: command.password,\n    };\n    this.users.push(user);\n    this.eventBus.publish(new UserCreatedEvent(user.id, user.email));\n    return user;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// events/user-created.event.ts\nexport class UserCreatedEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly email: string\n  ) {}\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// listeners/welcome-email.handler.ts\nimport { EventsHandler, IEventHandler } from "@nestjs/cqrs";\nimport { UserCreatedEvent } from "../events/user-created.event";\n\n@EventsHandler(UserCreatedEvent)\nexport class WelcomeEmailHandler implements IEventHandler<UserCreatedEvent> {\n  handle(event: UserCreatedEvent) {\n    console.log(\n      `WelcomeEmailHandler: Sending welcome email to ${event.email}`\n    );\n    // Logic to send welcome email\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// listeners/registration-logger.handler.ts\nimport { EventsHandler, IEventHandler } from "@nestjs/cqrs";\nimport { UserCreatedEvent } from "../events/user-created.event";\n\n@EventsHandler(UserCreatedEvent)\nexport class RegistrationLoggerHandler\n  implements IEventHandler<UserCreatedEvent>\n{\n  handle(event: UserCreatedEvent) {\n    console.log(\n      `RegistrationLoggerHandler: User registered with ID ${event.userId} and Email ${event.email}`\n    );\n    // Logic to log registration\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { CommandBus } from "@nestjs/cqrs";\nimport { CreateUserCommand } from "./commands/create-user.command";\n\n@Injectable()\nexport class UserService {\n  constructor(private commandBus: CommandBus) {}\n\n  async createUser(email: string, password: string): Promise<any> {\n    return this.commandBus.execute(new CreateUserCommand(email, password));\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { UserService } from "./user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post("create")\n  async createUser(@Body() body: { email: string; password: string }) {\n    const user = await this.userService.createUser(body.email, body.password);\n    return { message: "User created successfully", userId: user.id };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.module.ts\nimport { Module } from "@nestjs/common";\nimport { CqrsModule } from "@nestjs/cqrs";\nimport { CreateUserHandler } from "./handlers/create-user.handler";\nimport { WelcomeEmailHandler } from "./listeners/welcome-email.handler";\nimport { RegistrationLoggerHandler } from "./listeners/registration-logger.handler";\nimport { UserController } from "./user.controller";\nimport { UserService } from "./user.service";\n\n@Module({\n  imports: [CqrsModule],\n  providers: [\n    UserService,\n    CreateUserHandler,\n    WelcomeEmailHandler,\n    RegistrationLoggerHandler,\n  ],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')))),(0,a.kt)("h3",{id:"c-interpreter-pattern"},(0,a.kt)("strong",{parentName:"h3"},"c. Interpreter Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Define a grammatical representation for a language and provide an interpreter to deal with it. Useful for parsing and interpreting expressions or commands in a specific language.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Parsing and evaluating mathematical expressions or custom query languages from user input.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n",'Implementing a mathematical expression evaluator that interprets expressions like "5 3 + 2 -".'),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// interpreter/expression.interface.ts\nexport interface Expression {\n  interpret(): number;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// interpreter/number.expression.ts\nimport { Expression } from "./expression.interface";\n\nexport class NumberExpression implements Expression {\n  constructor(private number: number) {}\n\n  interpret(): number {\n    return this.number;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// interpreter/add.expression.ts\nimport { Expression } from "./expression.interface";\n\nexport class AddExpression implements Expression {\n  constructor(private left: Expression, private right: Expression) {}\n\n  interpret(): number {\n    return this.left.interpret() + this.right.interpret();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// interpreter/subtract.expression.ts\nimport { Expression } from "./expression.interface";\n\nexport class SubtractExpression implements Expression {\n  constructor(private left: Expression, private right: Expression) {}\n\n  interpret(): number {\n    return this.left.interpret() - this.right.interpret();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// interpreter/parser.ts\nimport { Expression } from "./expression.interface";\nimport { NumberExpression } from "./number.expression";\nimport { AddExpression } from "./add.expression";\nimport { SubtractExpression } from "./subtract.expression";\n\nexport class Parser {\n  parse(expression: string): Expression {\n    const tokens = expression.split(" ");\n    const stack: Expression[] = [];\n\n    for (const token of tokens) {\n      if (!isNaN(Number(token))) {\n        stack.push(new NumberExpression(Number(token)));\n      } else {\n        const right = stack.pop();\n        const left = stack.pop();\n        if (token === "+") {\n          stack.push(new AddExpression(left, right));\n        } else if (token === "-") {\n          stack.push(new SubtractExpression(left, right));\n        }\n      }\n    }\n\n    return stack.pop();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// math.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { Parser } from "./interpreter/parser";\n\n@Controller("math")\nexport class MathController {\n  private parser: Parser = new Parser();\n\n  @Post("evaluate")\n  evaluate(@Body() body: { expression: string }) {\n    const expression = this.parser.parse(body.expression);\n    const result = expression.interpret();\n    return { expression: body.expression, result };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// math.module.ts\nimport { Module } from "@nestjs/common";\nimport { MathController } from "./math.controller";\n\n@Module({\n  controllers: [MathController],\n})\nexport class MathModule {}\n')))),(0,a.kt)("h3",{id:"d-iterator-pattern"},(0,a.kt)("strong",{parentName:"h3"},"d. Iterator Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Provide a way to access elements of a collection sequentially without exposing its underlying representation.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Iterating through user lists or product catalogs without exposing internal data structures.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing an iterator to traverse a list of users."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// iterator/iterator.interface.ts\nexport interface Iterator<T> {\n  next(): T;\n  hasNext(): boolean;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// iterator/aggregate.interface.ts\nimport { Iterator } from "./iterator.interface";\n\nexport interface Aggregate<T> {\n  createIterator(): Iterator<T>;\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// iterator/user.iterator.ts\nimport { Iterator } from "./iterator.interface";\n\nexport class UserIterator implements Iterator<any> {\n  private current = 0;\n\n  constructor(private users: any[]) {}\n\n  next(): any {\n    const user = this.users[this.current];\n    this.current++;\n    return user;\n  }\n\n  hasNext(): boolean {\n    return this.current < this.users.length;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// iterator/user.aggregate.ts\nimport { Aggregate } from "./aggregate.interface";\nimport { Iterator } from "./iterator.interface";\nimport { UserIterator } from "./user.iterator";\n\nexport class UserAggregate implements Aggregate<any> {\n  constructor(private users: any[]) {}\n\n  createIterator(): Iterator<any> {\n    return new UserIterator(this.users);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.service.ts\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UserService {\n  private users = [\n    { id: "1", name: "John Doe" },\n    { id: "2", name: "Jane Smith" },\n    { id: "3", name: "Alice Johnson" },\n  ];\n\n  getUsers(): any[] {\n    return this.users;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.controller.ts\nimport { Controller, Get } from "@nestjs/common";\nimport { UserService } from "./user.service";\nimport { UserAggregate } from "./iterator/user.aggregate";\n\n@Controller("users")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get("list")\n  listUsers() {\n    const users = this.userService.getUsers();\n    const aggregate = new UserAggregate(users);\n    const iterator = aggregate.createIterator();\n\n    const userList = [];\n    while (iterator.hasNext()) {\n      const user = iterator.next();\n      userList.push(user);\n    }\n\n    return userList;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\n\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')))),(0,a.kt)("h3",{id:"e-mediator-pattern"},(0,a.kt)("strong",{parentName:"h3"},"e. Mediator Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Define an object that encapsulates how a set of objects interact, promoting loose coupling by keeping objects from referring to each other explicitly.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Coordinating interactions between services like ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderService")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"InventoryService"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a mediator to handle interactions between order and inventory services."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// mediator/mediator.interface.ts\nexport interface Mediator {\n  notify(sender: any, event: string, data?: any): void;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// mediator/mediator.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { Mediator } from "./mediator.interface";\nimport { OrderService } from "../order/order.service";\nimport { InventoryService } from "../inventory/inventory.service";\n\n@Injectable()\nexport class MediatorService implements Mediator {\n  constructor(\n    private readonly orderService: OrderService,\n    private readonly inventoryService: InventoryService\n  ) {}\n\n  notify(sender: any, event: string, data?: any): void {\n    if (event === "order.created") {\n      this.inventoryService.updateInventory(data.productId, data.quantity);\n    } else if (event === "inventory.updated") {\n      this.orderService.notifyOrderStatus(data.orderId, "Inventory Updated");\n    }\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order/order.service.ts\nimport { Injectable, Inject } from "@nestjs/common";\nimport { Mediator } from "../mediator/mediator.interface";\n\n@Injectable()\nexport class OrderService {\n  constructor(@Inject("Mediator") private readonly mediator: Mediator) {}\n\n  createOrder(productId: string, quantity: number) {\n    const orderId = Date.now().toString();\n    console.log(\n      `OrderService: Order ${orderId} created for product ${productId} (Quantity: ${quantity})`\n    );\n    // Create order logic...\n    this.mediator.notify(this, "order.created", {\n      orderId,\n      productId,\n      quantity,\n    });\n  }\n\n  notifyOrderStatus(orderId: string, status: string) {\n    console.log(`OrderService: Order ${orderId} status updated to ${status}`);\n    // Update order status logic...\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// inventory/inventory.service.ts\nimport { Injectable, Inject } from "@nestjs/common";\nimport { Mediator } from "../mediator/mediator.interface";\n\n@Injectable()\nexport class InventoryService {\n  constructor(@Inject("Mediator") private readonly mediator: Mediator) {}\n\n  updateInventory(productId: string, quantity: number) {\n    console.log(\n      `InventoryService: Updating inventory for product ${productId} by ${quantity}`\n    );\n    // Update inventory logic...\n    this.mediator.notify(this, "inventory.updated", {\n      orderId: "12345",\n      status: "Inventory Updated",\n    });\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order/order.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { OrderService } from "./order.service";\n\n@Controller("orders")\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post("create")\n  createOrder(@Body() body: { productId: string; quantity: number }) {\n    this.orderService.createOrder(body.productId, body.quantity);\n    return { message: "Order created successfully" };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order/order.module.ts\nimport { Module } from "@nestjs/common";\nimport { OrderService } from "./order.service";\nimport { MediatorService } from "../mediator/mediator.service";\nimport { InventoryService } from "../inventory/inventory.service";\nimport { OrderController } from "./order.controller";\n\n@Module({\n  providers: [\n    OrderService,\n    MediatorService,\n    InventoryService,\n    {\n      provide: "Mediator",\n      useExisting: MediatorService,\n    },\n  ],\n  controllers: [OrderController],\n  exports: [OrderService],\n})\nexport class OrderModule {}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// inventory/inventory.module.ts\nimport { Module } from "@nestjs/common";\nimport { InventoryService } from "./inventory.service";\n\n@Module({\n  providers: [InventoryService],\n  exports: [InventoryService],\n})\nexport class InventoryModule {}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// app.module.ts\nimport { Module } from "@nestjs/common";\nimport { OrderModule } from "./order/order.module";\nimport { InventoryModule } from "./inventory/inventory.module";\nimport { OrderController } from "./order/order.controller";\n\n@Module({\n  imports: [OrderModule, InventoryModule],\n  controllers: [OrderController],\n})\nexport class AppModule {}\n')))),(0,a.kt)("h3",{id:"f-memento-pattern"},(0,a.kt)("strong",{parentName:"h3"},"f. Memento Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Capture and externalize an object's internal state without violating encapsulation, allowing the object to be restored to this state later.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing undo functionality for user data changes or transactional operations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing undo functionality for user profile updates."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// memento/memento.ts\nexport class Memento {\n  constructor(public readonly state: any) {}\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// memento/user.originator.ts\nimport { Memento } from "./memento";\n\nexport class UserOriginator {\n  private state: any;\n\n  setState(state: any) {\n    this.state = state;\n    console.log(`UserOriginator: State set to ${JSON.stringify(this.state)}`);\n  }\n\n  getState(): any {\n    return this.state;\n  }\n\n  saveState(): Memento {\n    console.log(`UserOriginator: Saving state`);\n    return new Memento(this.state);\n  }\n\n  restoreState(memento: Memento) {\n    this.state = memento.state;\n    console.log(\n      `UserOriginator: State restored to ${JSON.stringify(this.state)}`\n    );\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// memento/caretaker.ts\nimport { Memento } from "./memento";\n\nexport class Caretaker {\n  private mementos: Memento[] = [];\n\n  addMemento(memento: Memento) {\n    this.mementos.push(memento);\n    console.log(`Caretaker: Memento added`);\n  }\n\n  getMemento(index: number): Memento {\n    return this.mementos[index];\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user/user.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { UserOriginator } from "../memento/user.originator";\nimport { Caretaker } from "../memento/caretaker";\n\n@Injectable()\nexport class UserService {\n  private originator: UserOriginator;\n  private caretaker: Caretaker;\n\n  constructor() {\n    this.originator = new UserOriginator();\n    this.caretaker = new Caretaker();\n  }\n\n  updateUserProfile(profile: any) {\n    this.caretaker.addMemento(this.originator.saveState());\n    this.originator.setState(profile);\n  }\n\n  undo() {\n    const memento = this.caretaker.getMemento(\n      this.caretaker["mementos"].length - 1\n    );\n    this.originator.restoreState(memento);\n  }\n\n  getUserProfile() {\n    return this.originator.getState();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.controller.ts\nimport { Controller, Post, Get, Body } from "@nestjs/common";\nimport { UserService } from "./user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post("update")\n  updateProfile(@Body() body: any) {\n    this.userService.updateUserProfile(body);\n    return { message: "User profile updated" };\n  }\n\n  @Post("undo")\n  undoUpdate() {\n    this.userService.undo();\n    return { message: "Undo successful" };\n  }\n\n  @Get("profile")\n  getProfile() {\n    const profile = this.userService.getUserProfile();\n    return { profile };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\n\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')))),(0,a.kt)("h3",{id:"g-observer-pattern"},(0,a.kt)("strong",{parentName:"h3"},"g. Observer Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Establish a one-to-many dependency so that when one object changes state, all its dependents are notified and updated automatically.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Using event-driven architecture to trigger actions like sending notifications or logging when certain events occur (e.g., user creation).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing event listeners for user registration events."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// events/user-created.event.ts\nexport class UserCreatedEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly email: string\n  ) {}\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// listeners/welcome-email.listener.ts\nimport { Injectable } from "@nestjs/common";\nimport { OnEvent } from "@nestjs/event-emitter";\nimport { UserCreatedEvent } from "../events/user-created.event";\n\n@Injectable()\nexport class WelcomeEmailListener {\n  @OnEvent("user.created")\n  handleUserCreatedEvent(event: UserCreatedEvent) {\n    console.log(\n      `WelcomeEmailListener: Sending welcome email to ${event.email}`\n    );\n    // Logic to send welcome email\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// listeners/registration-logger.listener.ts\nimport { Injectable } from "@nestjs/common";\nimport { OnEvent } from "@nestjs/event-emitter";\nimport { UserCreatedEvent } from "../events/user-created.event";\n\n@Injectable()\nexport class RegistrationLoggerListener {\n  @OnEvent("user.created")\n  handleUserCreatedEvent(event: UserCreatedEvent) {\n    console.log(\n      `RegistrationLoggerListener: User registered with ID ${event.userId} and Email ${event.email}`\n    );\n    // Logic to log registration\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { EventEmitter2 } from "@nestjs/event-emitter";\nimport { UserCreatedEvent } from "./events/user-created.event";\n\n@Injectable()\nexport class UserService {\n  private users = [];\n\n  constructor(private eventEmitter: EventEmitter2) {}\n\n  async registerUser(email: string, password: string): Promise<any> {\n    const user = { id: Date.now().toString(), email, password };\n    this.users.push(user);\n    this.eventEmitter.emit(\n      "user.created",\n      new UserCreatedEvent(user.id, user.email)\n    );\n    return { message: "User registered successfully", userId: user.id };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { UserService } from "./user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post("register")\n  async register(@Body() body: { email: string; password: string }) {\n    const result = await this.userService.registerUser(\n      body.email,\n      body.password\n    );\n    return result;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// user.module.ts\nimport { Module } from "@nestjs/common";\nimport { EventEmitterModule } from "@nestjs/event-emitter";\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\nimport { WelcomeEmailListener } from "./listeners/welcome-email.listener";\nimport { RegistrationLoggerListener } from "./listeners/registration-logger.listener";\n\n@Module({\n  imports: [EventEmitterModule.forRoot()],\n  providers: [UserService, WelcomeEmailListener, RegistrationLoggerListener],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')))),(0,a.kt)("h3",{id:"h-state-pattern"},(0,a.kt)("strong",{parentName:"h3"},"h. State Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Allow an object to alter its behavior when its internal state changes, making the object appear to change its class.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing different states of an order (e.g., new, processed, completed) with corresponding behaviors.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing state management for order processing."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// state/order-state.interface.ts\nexport interface OrderState {\n  handle(): string;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// state/new-order.state.ts\nimport { OrderState } from "./order-state.interface";\n\nexport class NewOrderState implements OrderState {\n  handle(): string {\n    return "New Order: Awaiting processing";\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// state/processed-order.state.ts\nimport { OrderState } from "./order-state.interface";\n\nexport class ProcessedOrderState implements OrderState {\n  handle(): string {\n    return "Processed Order: Preparing for shipment";\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// state/completed-order.state.ts\nimport { OrderState } from "./order-state.interface";\n\nexport class CompletedOrderState implements OrderState {\n  handle(): string {\n    return "Completed Order: Shipped to customer";\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// state/order.context.ts\nimport { OrderState } from "./order-state.interface";\n\nexport class OrderContext {\n  private state: OrderState;\n\n  constructor(initialState: OrderState) {\n    this.state = initialState;\n  }\n\n  setState(state: OrderState) {\n    this.state = state;\n  }\n\n  getStatus(): string {\n    return this.state.handle();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { OrderContext } from "../state/order.context";\nimport { NewOrderState } from "../state/new-order.state";\nimport { ProcessedOrderState } from "../state/processed-order.state";\nimport { CompletedOrderState } from "../state/completed-order.state";\n\n@Injectable()\nexport class OrderService {\n  private orders: any[] = [];\n\n  createOrder(orderData: any) {\n    const order = {\n      id: Date.now().toString(),\n      data: orderData,\n      context: new OrderContext(new NewOrderState()),\n    };\n    this.orders.push(order);\n    console.log(`OrderService: Created order ${order.id}`);\n    return order;\n  }\n\n  processOrder(orderId: string) {\n    const order = this.orders.find((o) => o.id === orderId);\n    if (order) {\n      order.context.setState(new ProcessedOrderState());\n      console.log(`OrderService: Processed order ${order.id}`);\n      return order;\n    }\n    throw new Error("Order not found");\n  }\n\n  completeOrder(orderId: string) {\n    const order = this.orders.find((o) => o.id === orderId);\n    if (order) {\n      order.context.setState(new CompletedOrderState());\n      console.log(`OrderService: Completed order ${order.id}`);\n      return order;\n    }\n    throw new Error("Order not found");\n  }\n\n  getOrderStatus(orderId: string) {\n    const order = this.orders.find((o) => o.id === orderId);\n    if (order) {\n      return order.context.getStatus();\n    }\n    throw new Error("Order not found");\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.controller.ts\nimport { Controller, Post, Get, Param, Body } from "@nestjs/common";\nimport { OrderService } from "./order.service";\n\n@Controller("orders")\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post("create")\n  createOrder(@Body() body: any) {\n    const order = this.orderService.createOrder(body);\n    return { message: "Order created", orderId: order.id };\n  }\n\n  @Post(":id/process")\n  processOrder(@Param("id") id: string) {\n    const order = this.orderService.processOrder(id);\n    return { message: "Order processed", status: order.context.getStatus() };\n  }\n\n  @Post(":id/complete")\n  completeOrder(@Param("id") id: string) {\n    const order = this.orderService.completeOrder(id);\n    return { message: "Order completed", status: order.context.getStatus() };\n  }\n\n  @Get(":id/status")\n  getStatus(@Param("id") id: string) {\n    const status = this.orderService.getOrderStatus(id);\n    return { orderId: id, status };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.module.ts\nimport { Module } from "@nestjs/common";\nimport { OrderService } from "./order.service";\nimport { OrderController } from "./order.controller";\n\n@Module({\n  providers: [OrderService],\n  controllers: [OrderController],\n})\nexport class OrderModule {}\n')))),(0,a.kt)("h3",{id:"i-strategy-pattern"},(0,a.kt)("strong",{parentName:"h3"},"i. Strategy Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Define a family of interchangeable algorithms, encapsulate each one, and make them interchangeable. It allows algorithms to vary independently from clients that use them.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Managing different authentication strategies (e.g., JWT, OAuth) in an application.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing interchangeable authentication strategies using JWT and OAuth."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// strategies/auth.strategy.interface.ts\nexport interface AuthStrategy {\n  validate(token: string): Promise<any>;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// strategies/jwt.strategy.ts\nimport { Injectable } from "@nestjs/common";\nimport { AuthStrategy } from "./auth.strategy.interface";\n\n@Injectable()\nexport class JwtStrategy implements AuthStrategy {\n  async validate(token: string): Promise<any> {\n    console.log("JwtStrategy: Validating JWT token");\n    // Implement JWT validation logic\n    return { userId: "123", username: "john_doe" };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// strategies/oauth.strategy.ts\nimport { Injectable } from "@nestjs/common";\nimport { AuthStrategy } from "./auth.strategy.interface";\n\n@Injectable()\nexport class OauthStrategy implements AuthStrategy {\n  async validate(token: string): Promise<any> {\n    console.log("OauthStrategy: Validating OAuth token");\n    // Implement OAuth validation logic\n    return { userId: "456", username: "jane_doe" };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// strategies/auth.context.ts\nimport { Injectable, Inject } from "@nestjs/common";\nimport { AuthStrategy } from "./auth.strategy.interface";\n\n@Injectable()\nexport class AuthContext {\n  constructor(\n    @Inject("AuthStrategy") private readonly strategy: AuthStrategy\n  ) {}\n\n  async authenticate(token: string): Promise<any> {\n    return this.strategy.validate(token);\n  }\n\n  setStrategy(strategy: AuthStrategy) {\n    this.strategy = strategy;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// auth.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { AuthContext } from "./strategies/auth.context";\nimport { JwtStrategy } from "./strategies/jwt.strategy";\nimport { OauthStrategy } from "./strategies/oauth.strategy";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly authContext: AuthContext,\n    private readonly jwtStrategy: JwtStrategy,\n    private readonly oauthStrategy: OauthStrategy\n  ) {}\n\n  async authenticateWithJwt(token: string): Promise<any> {\n    this.authContext.setStrategy(this.jwtStrategy);\n    return this.authContext.authenticate(token);\n  }\n\n  async authenticateWithOauth(token: string): Promise<any> {\n    this.authContext.setStrategy(this.oauthStrategy);\n    return this.authContext.authenticate(token);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// auth.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { AuthService } from "./auth.service";\n\n@Controller("auth")\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post("login-jwt")\n  async loginWithJwt(@Body() body: { token: string }) {\n    const user = await this.authService.authenticateWithJwt(body.token);\n    return { message: "Authenticated with JWT", user };\n  }\n\n  @Post("login-oauth")\n  async loginWithOauth(@Body() body: { token: string }) {\n    const user = await this.authService.authenticateWithOauth(body.token);\n    return { message: "Authenticated with OAuth", user };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// auth.module.ts\nimport { Module } from "@nestjs/common";\nimport { AuthService } from "./auth.service";\nimport { AuthContext } from "./strategies/auth.context";\nimport { JwtStrategy } from "./strategies/jwt.strategy";\nimport { OauthStrategy } from "./strategies/oauth.strategy";\nimport { AuthController } from "./auth.controller";\n\n@Module({\n  providers: [\n    AuthService,\n    AuthContext,\n    JwtStrategy,\n    OauthStrategy,\n    {\n      provide: "AuthStrategy",\n      useClass: JwtStrategy, // Default strategy\n    },\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n')))),(0,a.kt)("h3",{id:"j-template-method-pattern"},(0,a.kt)("strong",{parentName:"h3"},"j. Template Method Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Define the skeleton of an algorithm in a method, deferring some steps to subclasses. It allows subclasses to redefine certain steps of an algorithm without changing its structure.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Structuring order processing workflows with customizable steps, such as validation, payment processing, inventory update, and sending confirmation.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing a template method for processing orders in an e-commerce application."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// template/order-processing.template.ts\nexport abstract class OrderProcessingTemplate {\n  processOrder(order: any): any {\n    this.validateOrder(order);\n    this.processPayment(order);\n    this.updateInventory(order);\n    this.sendConfirmation(order);\n    return { message: "Order processed successfully" };\n  }\n\n  protected abstract validateOrder(order: any): void;\n  protected abstract processPayment(order: any): void;\n  protected abstract updateInventory(order: any): void;\n  protected abstract sendConfirmation(order: any): void;\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// template/ecommerce-order-processing.ts\nimport { Injectable } from "@nestjs/common";\nimport { OrderProcessingTemplate } from "./order-processing.template";\n\n@Injectable()\nexport class EcommerceOrderProcessing extends OrderProcessingTemplate {\n  protected validateOrder(order: any): void {\n    console.log("Ecommerce: Validating order");\n    // Validation logic\n  }\n\n  protected processPayment(order: any): void {\n    console.log("Ecommerce: Processing payment");\n    // Payment processing logic\n  }\n\n  protected updateInventory(order: any): void {\n    console.log("Ecommerce: Updating inventory");\n    // Inventory update logic\n  }\n\n  protected sendConfirmation(order: any): void {\n    console.log("Ecommerce: Sending confirmation email");\n    // Send confirmation logic\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { EcommerceOrderProcessing } from "../template/ecommerce-order-processing";\n\n@Injectable()\nexport class OrderService {\n  constructor(private readonly orderProcessor: EcommerceOrderProcessing) {}\n\n  handleOrder(order: any) {\n    return this.orderProcessor.processOrder(order);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.controller.ts\nimport { Controller, Post, Body } from "@nestjs/common";\nimport { OrderService } from "./order.service";\n\n@Controller("orders")\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post("process")\n  processOrder(@Body() body: any) {\n    const result = this.orderService.handleOrder(body);\n    return result;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// order.module.ts\nimport { Module } from "@nestjs/common";\nimport { OrderService } from "./order.service";\nimport { OrderController } from "./order.controller";\nimport { EcommerceOrderProcessing } from "../template/ecommerce-order-processing";\n\n@Module({\n  providers: [OrderService, EcommerceOrderProcessing],\n  controllers: [OrderController],\n})\nexport class OrderModule {}\n')))),(0,a.kt)("h3",{id:"k-visitor-pattern"},(0,a.kt)("strong",{parentName:"h3"},"k. Visitor Pattern")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Purpose:"),(0,a.kt)("br",{parentName:"p"}),"\n","Represent an operation to be performed on elements of an object structure, allowing new operations without modifying the elements.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Real-World Use Case:"),(0,a.kt)("br",{parentName:"p"}),"\n","Performing operations on complex object structures like geometric shapes or hierarchical data without altering the classes of the elements.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Example:"),(0,a.kt)("br",{parentName:"p"}),"\n","Implementing an area calculator for different geometric shapes."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// visitor/visitor.interface.ts\nexport interface Visitor {\n  visitCircle(circle: Circle): void;\n  visitRectangle(rectangle: Rectangle): void;\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// visitor/element.interface.ts\nimport { Visitor } from "./visitor.interface";\n\nexport interface Element {\n  accept(visitor: Visitor): void;\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// visitor/circle.ts\nimport { Element } from "./element.interface";\nimport { Visitor } from "./visitor.interface";\n\nexport class Circle implements Element {\n  constructor(public radius: number) {}\n\n  accept(visitor: Visitor): void {\n    visitor.visitCircle(this);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// visitor/rectangle.ts\nimport { Element } from "./element.interface";\nimport { Visitor } from "./visitor.interface";\n\nexport class Rectangle implements Element {\n  constructor(public width: number, public height: number) {}\n\n  accept(visitor: Visitor): void {\n    visitor.visitRectangle(this);\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// visitor/area-calculator.visitor.ts\nimport { Injectable } from "@nestjs/common";\nimport { Visitor } from "./visitor.interface";\nimport { Circle } from "./circle";\nimport { Rectangle } from "./rectangle";\n\n@Injectable()\nexport class AreaCalculatorVisitor implements Visitor {\n  private area: number = 0;\n\n  visitCircle(circle: Circle): void {\n    this.area += Math.PI * circle.radius * circle.radius;\n    console.log(\n      `AreaCalculatorVisitor: Calculated area of Circle with radius ${circle.radius}`\n    );\n  }\n\n  visitRectangle(rectangle: Rectangle): void {\n    this.area += rectangle.width * rectangle.height;\n    console.log(\n      `AreaCalculatorVisitor: Calculated area of Rectangle with width ${rectangle.width} and height ${rectangle.height}`\n    );\n  }\n\n  getTotalArea(): number {\n    return this.area;\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// shape.service.ts\nimport { Injectable } from "@nestjs/common";\nimport { Element } from "../visitor/element.interface";\nimport { Circle } from "../visitor/circle";\nimport { Rectangle } from "../visitor/rectangle";\nimport { AreaCalculatorVisitor } from "../visitor/area-calculator.visitor";\n\n@Injectable()\nexport class ShapeService {\n  calculateArea(): number {\n    const shapes: Element[] = [\n      new Circle(5),\n      new Rectangle(10, 20),\n      new Circle(3),\n    ];\n\n    const visitor = new AreaCalculatorVisitor();\n    shapes.forEach((shape) => shape.accept(visitor));\n\n    return visitor.getTotalArea();\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// shape.controller.ts\nimport { Controller, Get } from "@nestjs/common";\nimport { ShapeService } from "./shape.service";\n\n@Controller("shapes")\nexport class ShapeController {\n  constructor(private readonly shapeService: ShapeService) {}\n\n  @Get("area")\n  calculateArea() {\n    const totalArea = this.shapeService.calculateArea();\n    return { totalArea };\n  }\n}\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// shape.module.ts\nimport { Module } from "@nestjs/common";\nimport { ShapeService } from "./shape.service";\nimport { ShapeController } from "./shape.controller";\nimport { AreaCalculatorVisitor } from "../visitor/area-calculator.visitor";\n\n@Module({\n  providers: [ShapeService, AreaCalculatorVisitor],\n  controllers: [ShapeController],\n})\nexport class ShapeModule {}\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"4-summary-of-all-design-patterns"},(0,a.kt)("strong",{parentName:"h2"},"4. Summary of All Design Patterns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Category")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Pattern")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Purpose")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Real-World Use Case")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"NestJS Example")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Singleton")),(0,a.kt)("td",{parentName:"tr",align:null},"Ensure a class has only one instance and provide a global access point."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing a single database connection."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DatabaseService")," managing a single connection instance.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Factory Method")),(0,a.kt)("td",{parentName:"tr",align:null},"Define an interface for creating an object, but let subclasses decide which class to instantiate."),(0,a.kt)("td",{parentName:"tr",align:null},"Creating different types of notifications (Email, SMS)."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"NotificationFactory")," creating ",(0,a.kt)("inlineCode",{parentName:"td"},"EmailNotification")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"SmsNotification")," based on type.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Abstract Factory")),(0,a.kt)("td",{parentName:"tr",align:null},"Provide an interface for creating families of related objects without specifying their classes."),(0,a.kt)("td",{parentName:"tr",align:null},"Creating UI components for different themes (Light, Dark)."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UIFactory")," with ",(0,a.kt)("inlineCode",{parentName:"td"},"LightFactory")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"DarkFactory")," creating themed buttons and textboxes.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Builder")),(0,a.kt)("td",{parentName:"tr",align:null},"Separate the construction of a complex object from its representation."),(0,a.kt)("td",{parentName:"tr",align:null},"Building user profiles with optional fields."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UserBuilder")," constructing ",(0,a.kt)("inlineCode",{parentName:"td"},"User")," objects with varying configurations.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Prototype")),(0,a.kt)("td",{parentName:"tr",align:null},"Create new objects by copying an existing object, known as the prototype."),(0,a.kt)("td",{parentName:"tr",align:null},"Cloning user settings or templates."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UserSettings")," cloning ",(0,a.kt)("inlineCode",{parentName:"td"},"StandardSettings")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"CustomSettings"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Creational")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Object Pool")),(0,a.kt)("td",{parentName:"tr",align:null},"Reuse a set of initialized objects instead of creating and destroying them on demand."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing database connections efficiently."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"ConnectionPool")," managing reusable ",(0,a.kt)("inlineCode",{parentName:"td"},"Connection")," objects.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Adapter")),(0,a.kt)("td",{parentName:"tr",align:null},"Convert the interface of a class into another interface clients expect."),(0,a.kt)("td",{parentName:"tr",align:null},"Integrating a legacy logging service."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"LoggerAdapter")," adapting ",(0,a.kt)("inlineCode",{parentName:"td"},"LegacyLogger")," to ",(0,a.kt)("inlineCode",{parentName:"td"},"LoggerService")," interface.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Bridge")),(0,a.kt)("td",{parentName:"tr",align:null},"Decouple an abstraction from its implementation so that the two can vary independently."),(0,a.kt)("td",{parentName:"tr",align:null},"Remote control abstraction for different devices."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"RemoteControl")," abstraction working with ",(0,a.kt)("inlineCode",{parentName:"td"},"TV")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"Radio")," devices.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Composite")),(0,a.kt)("td",{parentName:"tr",align:null},"Compose objects into tree structures to represent part-whole hierarchies."),(0,a.kt)("td",{parentName:"tr",align:null},"Representing a file system with files and directories."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"File")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"Directory")," classes forming a hierarchical file system structure.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Decorator")),(0,a.kt)("td",{parentName:"tr",align:null},"Attach additional responsibilities to an object dynamically."),(0,a.kt)("td",{parentName:"tr",align:null},"Adding logging to service methods without modifying them."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"LoggingInterceptor")," adding logging to ",(0,a.kt)("inlineCode",{parentName:"td"},"AppService")," methods.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Facade")),(0,a.kt)("td",{parentName:"tr",align:null},"Provide a unified interface to a set of interfaces in a subsystem."),(0,a.kt)("td",{parentName:"tr",align:null},"Simplifying user operations by combining multiple services."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UserFacade")," coordinating ",(0,a.kt)("inlineCode",{parentName:"td"},"UserService"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"AuthService"),", and ",(0,a.kt)("inlineCode",{parentName:"td"},"NotificationService"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Flyweight")),(0,a.kt)("td",{parentName:"tr",align:null},"Use sharing to support large numbers of fine-grained objects efficiently."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing numerous character objects in a text editor."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"FlyweightFactory")," managing shared ",(0,a.kt)("inlineCode",{parentName:"td"},"Character")," objects for rendering text.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Structural")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Proxy")),(0,a.kt)("td",{parentName:"tr",align:null},"Provide a surrogate or placeholder for another object to control access to it."),(0,a.kt)("td",{parentName:"tr",align:null},"Adding access control or lazy initialization to services."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"PaymentProxy")," controlling access to ",(0,a.kt)("inlineCode",{parentName:"td"},"RealPaymentService")," with added logging.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Chain of Responsibility")),(0,a.kt)("td",{parentName:"tr",align:null},"Pass a request along a chain of handlers until one handles it."),(0,a.kt)("td",{parentName:"tr",align:null},"Middleware chains (authentication, authorization)."),(0,a.kt)("td",{parentName:"tr",align:null},"Middleware with ",(0,a.kt)("inlineCode",{parentName:"td"},"AuthenticationHandler"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"AuthorizationHandler"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"LoggingHandler")," processing HTTP requests.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Command")),(0,a.kt)("td",{parentName:"tr",align:null},"Encapsulate a request as an object, allowing parameterization and queuing of requests."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing user creation with CQRS."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"CreateUserCommand")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"CreateUserHandler")," managing user creation and emitting events.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Interpreter")),(0,a.kt)("td",{parentName:"tr",align:null},"Define a grammatical representation and interpret it."),(0,a.kt)("td",{parentName:"tr",align:null},"Evaluating mathematical expressions."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Parser"),' interpreting expressions like "5 3 + 2 -" using expression classes.')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Iterator")),(0,a.kt)("td",{parentName:"tr",align:null},"Provide a way to access elements of a collection sequentially without exposing its structure."),(0,a.kt)("td",{parentName:"tr",align:null},"Iterating through user lists or product catalogs."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UserIterator")," traversing ",(0,a.kt)("inlineCode",{parentName:"td"},"UserAggregate")," without exposing the underlying array structure.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Mediator")),(0,a.kt)("td",{parentName:"tr",align:null},"Encapsulate how a set of objects interact, promoting loose coupling."),(0,a.kt)("td",{parentName:"tr",align:null},"Coordinating ",(0,a.kt)("inlineCode",{parentName:"td"},"OrderService")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"InventoryService"),"."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"MediatorService")," orchestrating interactions between ",(0,a.kt)("inlineCode",{parentName:"td"},"OrderService")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"InventoryService"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Memento")),(0,a.kt)("td",{parentName:"tr",align:null},"Capture and restore an object's state without violating encapsulation."),(0,a.kt)("td",{parentName:"tr",align:null},"Implementing undo functionality for user profiles."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UserOriginator")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"Caretaker")," managing ",(0,a.kt)("inlineCode",{parentName:"td"},"Memento")," objects for user profile state restoration.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Observer")),(0,a.kt)("td",{parentName:"tr",align:null},"Establish a one-to-many dependency for automatic notifications."),(0,a.kt)("td",{parentName:"tr",align:null},"Event-driven notifications on user registration."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"EventEmitter")," with ",(0,a.kt)("inlineCode",{parentName:"td"},"UserCreatedEvent"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"WelcomeEmailListener"),", and ",(0,a.kt)("inlineCode",{parentName:"td"},"RegistrationLoggerListener"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"State")),(0,a.kt)("td",{parentName:"tr",align:null},"Alter an object's behavior when its internal state changes."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing order states (new, processed, completed)."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"OrderContext")," managing states like ",(0,a.kt)("inlineCode",{parentName:"td"},"NewOrderState"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"ProcessedOrderState"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"CompletedOrderState"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Strategy")),(0,a.kt)("td",{parentName:"tr",align:null},"Define a family of interchangeable algorithms."),(0,a.kt)("td",{parentName:"tr",align:null},"Managing different authentication strategies (JWT, OAuth)."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"AuthStrategy")," interface with ",(0,a.kt)("inlineCode",{parentName:"td"},"JwtStrategy")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"OauthStrategy")," used by ",(0,a.kt)("inlineCode",{parentName:"td"},"AuthContext")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"AuthService"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Template Method")),(0,a.kt)("td",{parentName:"tr",align:null},"Define the skeleton of an algorithm, allowing subclasses to customize steps."),(0,a.kt)("td",{parentName:"tr",align:null},"Structuring order processing workflows."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"OrderProcessingTemplate")," with ",(0,a.kt)("inlineCode",{parentName:"td"},"EcommerceOrderProcessing")," defining steps like validation, payment, inventory update, and sending confirmation email.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Behavioral")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Visitor")),(0,a.kt)("td",{parentName:"tr",align:null},"Add operations to objects without modifying their classes."),(0,a.kt)("td",{parentName:"tr",align:null},"Performing operations on geometric shapes."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Visitor")," interface with ",(0,a.kt)("inlineCode",{parentName:"td"},"AreaCalculatorVisitor"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"Circle"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"Rectangle")," used by ",(0,a.kt)("inlineCode",{parentName:"td"},"ShapeService")," to calculate areas.")))))}d.isMDXComponent=!0}}]);