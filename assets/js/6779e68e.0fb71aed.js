"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[482],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={title:"Common Concepts"},i=void 0,s={unversionedId:"cheatsheet/database/common-concept",id:"cheatsheet/database/common-concept",title:"Common Concepts",description:"Common Concepts",source:"@site/docs/cheatsheet/database/common-concept.md",sourceDirName:"cheatsheet/database",slug:"/cheatsheet/database/common-concept",permalink:"/docs/cheatsheet/database/common-concept",draft:!1,tags:[],version:"current",frontMatter:{title:"Common Concepts"},sidebar:"cheatsheet",previous:{title:"Message Queue",permalink:"/docs/cheatsheet/fundamental/message-queue"},next:{title:"PostgreSQL",permalink:"/docs/cheatsheet/database/postgresql"}},l={},c=[{value:"Common Concepts",id:"common-concepts",level:2},{value:"Key Differences",id:"key-differences",level:2}],p={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"common-concepts"},"Common Concepts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Overview"),": Common Concepts in databases define foundational principles for data organization, consistency, scalability, and performance, applicable across various database types like SQL and NoSQL, guiding design and optimization."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Data models"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relational"),": Organizes data into tables with rows and columns (e.g., PostgreSQL)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NoSQL"),": Flexible models like Document (MongoDB), Key-Value (Redis), Column-Family (Cassandra), or Graph (Neo4j)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hybrid"),": Combines relational and NoSQL features (e.g., PostgreSQL with JSON).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Consistency models"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ACID"),": Ensures reliable transactions (Atomicity, Consistency, Isolation, Durability) in SQL databases."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"BASE"),": Prioritizes availability and scalability (Basically Available, Soft state, Eventual consistency) in NoSQL."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Eventual consistency vs Strong consistency"),": Trade-off between immediate consistency (ACID) and delayed consistency (BASE).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vertical scaling"),": Increases server capacity (e.g., more CPU/RAM)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Adds more servers with techniques like:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sharding"),": Splits data across nodes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Replication"),": Copies data for redundancy and read scaling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Partitioning"),": Divides tables into smaller parts."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Load balancing"),": Distributes traffic across servers.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Indexing"),": Speeds up queries with data structures (e.g., B-Tree)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Caching"),": Stores frequent data in memory (e.g., Redis)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Query optimization"),": Improves query efficiency (e.g., EXPLAIN in SQL)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection pooling"),": Reuses database connections for performance.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 postgres.service.ts  (Relational - PostgreSQL)\n\u2502   \u251c\u2500\u2500 mongo.service.ts     (NoSQL Document - MongoDB)\n\u2502   \u251c\u2500\u2500 redis.service.ts     (Caching - Redis)\n\u2514\u2500\u2500 app.module.ts\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bash Scripts & SQL/NoSQL Commands"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"PostgreSQL Setup (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Start PostgreSQL with replication\nmkdir -p data/pg\ninitdb -D data/pg\necho "wal_level = replica" >> data/pg/postgresql.conf\npg_ctl -D data/pg -l data/pg.log start\ncreatedb mydb\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"MongoDB Setup (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n# Start MongoDB with sharding\nmongod --port 27017 --dbpath data/mongo --fork --logpath data/mongo.log\nmongo --port 27017 --eval 'sh.enableSharding(\"mydb\")'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Redis Setup (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n# Start Redis with replication\nredis-server --port 6379 --dir data/redis --daemonize yes\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"SQL/NoSQL Commands"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'-- PostgreSQL (**Relational**, **ACID**, **Indexing**)\nCREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR(50));\nCREATE INDEX idx_users_id ON users(id);\nBEGIN;\nINSERT INTO users (name) VALUES (\'John\');\nCOMMIT;\n\n-- MongoDB (**NoSQL Document**, **BASE**, **Sharding**)\nuse mydb\ndb.users.insertOne({ id: 1, name: "John" })\nsh.shardCollection("mydb.users", { "id": "hashed" })\n\n-- Redis (**Caching**, **Eventual consistency**)\nSET user:1 "John"\nEXPIRE user:1 3600  # Cache for 1 hour\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/data/postgres.service.ts (**Relational** & **ACID**)\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class PostgresService implements OnModuleInit {\n  private pool = new Pool({\n    user: "postgres",\n    host: "localhost",\n    database: "mydb",\n    password: "password",\n    port: 5432,\n    max: 10, // **Connection pooling**\n  });\n\n  async onModuleInit() {\n    await this.pool.query(\n      "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(50))"\n    );\n    await this.pool.query(\n      "CREATE INDEX IF NOT EXISTS idx_users_id ON users(id)"\n    ); // **Indexing**\n  }\n\n  async addUser(name: string) {\n    const client = await this.pool.connect();\n    try {\n      await client.query("BEGIN"); // **ACID**\n      await client.query("INSERT INTO users (name) VALUES ($1)", [name]);\n      await client.query("COMMIT");\n    } catch (e) {\n      await client.query("ROLLBACK");\n      throw e;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getUser(id: number) {\n    const result = await this.pool.query(\n      "SELECT * FROM users WHERE id = $1",\n      [id]\n    ); // **Query optimization**\n    return result.rows[0];\n  }\n}\n\n// src/data/mongo.service.ts (**NoSQL Document** & **BASE**)\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { MongoClient } from "mongodb";\n\n@Injectable()\nexport class MongoService implements OnModuleInit {\n  private client = new MongoClient("mongodb://localhost:27017");\n  private collection;\n\n  async onModuleInit() {\n    await this.client.connect();\n    this.collection = this.client.db("mydb").collection("users");\n    await this.collection.createIndex({ id: 1 }); // **Indexing**\n  }\n\n  async addUser(id: number, name: string) {\n    await this.collection.insertOne({ id, name }, { writeConcern: { w: 1 } }); // **BASE**\n  }\n\n  async getUser(id: number) {\n    return this.collection.findOne({ id }); // **Eventual consistency**\n  }\n}\n\n// src/data/redis.service.ts (**Caching**)\nimport { Injectable } from "@nestjs/common";\nimport { Redis } from "ioredis";\n\n@Injectable()\nexport class RedisService {\n  private redis = new Redis({ host: "localhost", port: 6379 });\n\n  async setUser(id: number, name: string) {\n    await this.redis.set(`user:${id}`, name, "EX", 3600); // **Caching**\n  }\n\n  async getUser(id: number) {\n    return this.redis.get(`user:${id}`);\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { PostgresService } from "./data/postgres.service";\nimport { MongoService } from "./data/mongo.service";\nimport { RedisService } from "./data/redis.service";\n\n@Module({\n  providers: [PostgresService, MongoService, RedisService],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { PostgresService } from "./data/postgres.service";\nimport { MongoService } from "./data/mongo.service";\nimport { RedisService } from "./data/redis.service";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const postgresService = app.get(PostgresService);\n  const mongoService = app.get(MongoService);\n  const redisService = app.get(RedisService);\n\n  // PostgreSQL (**Relational**, **ACID**)\n  await postgresService.addUser("John");\n  console.log(await postgresService.getUser(1));\n\n  // MongoDB (**NoSQL**, **BASE**, **Sharding**)\n  await mongoService.addUser(1, "John");\n  console.log(await mongoService.getUser(1));\n\n  // Redis (**Caching**, **Eventual consistency**)\n  await redisService.setUser(1, "John");\n  console.log(await redisService.getUser(1));\n\n  await app.listen(3000);\n}\nbootstrap();\n')))),(0,r.kt)("h2",{id:"key-differences"},"Key Differences"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Models"),": Relational (structured), NoSQL (flexible), Hybrid (mixed)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Consistency Models"),": ACID (strict), BASE (relaxed), Eventual vs Strong (trade-offs)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scaling"),": Vertical (bigger server), Horizontal (more servers with sharding/replication)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization"),": Indexing (query speed), Caching (memory), Query Optimization (efficiency), Connection Pooling (resource reuse).")))}d.isMDXComponent=!0}}]);