"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[63],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=u(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(y,i(i({ref:e},c),{},{components:n})):a.createElement(y,i({ref:e},c))}));function y(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[d]="string"==typeof t?t:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1180:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={title:"Solidity Basic"},i=void 0,o={unversionedId:"cheatsheet/blockchain/solidity",id:"cheatsheet/blockchain/solidity",title:"Solidity Basic",description:"Basic syntax",source:"@site/docs/cheatsheet/blockchain/solidity.md",sourceDirName:"cheatsheet/blockchain",slug:"/cheatsheet/blockchain/solidity",permalink:"/docs/cheatsheet/blockchain/solidity",draft:!1,tags:[],version:"current",frontMatter:{title:"Solidity Basic"},sidebar:"cheatsheet",previous:{title:"MySQL CheatSheet",permalink:"/docs/cheatsheet/database/mysql"},next:{title:"Tense",permalink:"/docs/cheatsheet/english/tense"}},s={},u=[{value:"Basic syntax",id:"basic-syntax",level:3},{value:"Call",id:"call",level:3}],c={toc:u},d="wrapper";function p(t){let{components:e,...n}=t;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"basic-syntax"},"Basic syntax"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Common function types")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"public"),(0,r.kt)("td",{parentName:"tr",align:null},"Anyone can call this function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"private"),(0,r.kt)("td",{parentName:"tr",align:null},"Only this contract can call this fucntion")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"view"),(0,r.kt)("td",{parentName:"tr",align:null},"This function returns data and does not modify the contract's data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"constant"),(0,r.kt)("td",{parentName:"tr",align:null},"Same view but just for variable can't modifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pure"),(0,r.kt)("td",{parentName:"tr",align:null},"Function will not modify or even read the contract's data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"payable"),(0,r.kt)("td",{parentName:"tr",align:null},"When someone call this function they might send ether along")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Running contract functions")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Calling"),(0,r.kt)("th",{parentName:"tr",align:null},"Sending"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Cannot modify the contract's data"),(0,r.kt)("td",{parentName:"tr",align:null},"Can modify a contract's data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can return data"),(0,r.kt)("td",{parentName:"tr",align:null},"Take time to execute!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Runs instally"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the transaction hash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Free"),(0,r.kt)("td",{parentName:"tr",align:null},"Const money!")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Msg global variable")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg.data"),(0,r.kt)("td",{parentName:"tr",align:null},"data from transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg.gas"),(0,r.kt)("td",{parentName:"tr",align:null},"amount gas")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg.sender"),(0,r.kt)("td",{parentName:"tr",align:null},"address of account")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg.value"),(0,r.kt)("td",{parentName:"tr",align:null},"amount of ether (in wei)")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic Types")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.5.0;\n\ncontract DataTypes {\n    // Boolean\n    bool trueOrFalse;\n    // Unsigned integer. default size is 256\n    uint firstInteger;\n    // The same as above, with definition\n    uint256 secondInteger;\n    // Signed integer, 128\n    int128 thirdinteger;\n    // Address, add keywork 'payable' to be able to send ether to it\n    address myAddress;\n    // Two byte array\n    bytes2 twoBytesArray;\n    // Sixteen byte array\n    bytes16 sixteenBytesArray;\n    // String\n    string myString;\n    // Array of strings (can be an array of any other data type)\n    string[] myStringArray;\n    // Enums\n    enum direction { left, right, up, down }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Mapping")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.5.0;\n\ncontract Mappings {\n\n    // State variable\n    mapping(address => uint) public myMapping;\n\n    // Store a new value in the mapping\n    function putThing(address _key, uint _value) public {\n        myMapping[_key] = _value;\n    }\n\n    // Retrieve a value from the mapping using key to search\n    function getThing(address _search) public view returns (uint){\n        return myMapping[_search];\n    }\n\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Struct")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity >=0.5.0;\n\ncontract Structs {\n\n    // Define the Person struct\n    struct Person {\n        string name;\n        uint8 age;\n    }\n\n    // Create a new person struct,\n    // Access the age of the struct\n    function personAge() external pure returns(uint8) {\n        Person memory person = Person("Alex", 27);\n        // Will return 27\n        return person.age;\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Require (Validate)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity >=0.5.0;\n\ncontract RequireStatements {\n\n    function someFunction(address _anAddress) external {\n        // Require that the address given as a parameter is not equal to an empty addess.\n        // If the address is empty, the whole transaction will not be completed and will be reverted\n        require(_anAddress != address(0), "Not a valid address");\n        ...\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modifier")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity >=0.5.0;\n\ncontract CustomModifiers {\n\n    // State variable\n    address private owner;\n\n    // Custom modifier requiring that the sender of the transaction is the owner\n    // otherwise revert the transaction\n    modifier onlyOwner {\n        require(msg.sender == owner, "Only owner can call this function.");\n        _;\n    }\n\n    // Constructor takes an address and stores it in the owner variable\n    constructor(address _owner) public {\n        owner = _owner;\n    }\n\n    // someFunction() uses the onlyOwner modifier to make use of our\n    // custom definition on line 10\n    function someFunction() external onlyOwner {\n        ...\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Scope")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.5.0;\n\ncontract AccessModifiers {\n    // Public modifer exposes a getter for state variable\n    string public myString;\n    // Private variable only accessible within contract\n    string private myPrivateString;\n\n    // Internal functions can only be used within this contract\n    function innerFunction() internal {}\n    // External functions are part of the contract interface and can be called from outside\n    function outerFunction() external {}\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inheritance")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.5.0;\n\ncontract Vehicle {\n\n}\n\ncontract Car is Vehicle {\n\n}\n\ncontract Van is Vehicle {\n\n}\n")),(0,r.kt)("h3",{id:"call"},"Call"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic call")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"(bool status, bytes memory ret) = address_value.call{\n    value: amount_value\n}(data_value_bytes);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Delegate Call")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'(bool success, bytes memory data) = _contract.delegatecall(\n    abi.encodeWithSignature("setVars(uint256)", _num)\n);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Interface call")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"IERC20 token = IERC20(currency);\ntoken.transferFrom(msg.sender, _admin, amount);\n")))}p.isMDXComponent=!0}}]);