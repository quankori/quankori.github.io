"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),k=r,g=m["".concat(o,".").concat(k)]||m[k]||u[k]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"Computer Science"},l=void 0,s={unversionedId:"blog/fundamental/computer-science",id:"blog/fundamental/computer-science",title:"Computer Science",description:"Core Concepts",source:"@site/docs/blog/fundamental/computer-science.md",sourceDirName:"blog/fundamental",slug:"/blog/fundamental/computer-science",permalink:"/blog/fundamental/computer-science",draft:!1,tags:[],version:"current",frontMatter:{title:"Computer Science"}},o={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Stack Service",id:"stack-service",level:3},{value:"Heap Service",id:"heap-service",level:3},{value:"CPU Service",id:"cpu-service",level:3},{value:"Process Service",id:"process-service",level:3},{value:"Memory Management",id:"memory-management",level:2},{value:"Memory Management Service",id:"memory-management-service",level:3},{value:"Process Management",id:"process-management",level:2},{value:"Process Management Service",id:"process-management-service",level:3},{value:"CPU Architecture",id:"cpu-architecture",level:2},{value:"CPU Architecture Service",id:"cpu-architecture-service",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Performance Optimization Service",id:"performance-optimization-service",level:3},{value:"Key Insights",id:"key-insights",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"core-concepts"},"Core Concepts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core concepts"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack"),": Manages function calls and local variables with a Last-In-First-Out (LIFO) structure, critical for process execution flow."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap"),": Handles dynamic memory allocation for data that persists beyond function calls, used for flexible storage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU"),": Executes instructions via fetch-decode-execute cycles, leveraging stack and heap for process handling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process"),": Represents a program in execution, moving from client to server, with states (e.g., running, waiting) and memory managed by stack and heap.")),(0,r.kt)("h3",{id:"stack-service"},"Stack Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/core/stack.go (**Stack**)\npackage core\n\nimport (\n    "fmt"\n    "net/http"\n)\n\ntype StackService struct{}\n\nfunc (s *StackService) HandleRequest(w http.ResponseWriter, r *http.Request) {\n    userID := 42 // Local variable on stack\n    result := s.processData(userID)\n    fmt.Fprintf(w, "Result: %d", result)\n}\n\nfunc (s *StackService) processData(id int) int {\n    temp := id * 2 // Another stack variable\n    return temp    // Returned to caller, popped off stack\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Stack Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates a server handling a client HTTP request, showing stack usage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleRequest")," is a server endpoint that receives a client request, creates a local ",(0,r.kt)("inlineCode",{parentName:"li"},"userID")," on the stack, calls ",(0,r.kt)("inlineCode",{parentName:"li"},"processData")," (pushing another frame with ",(0,r.kt)("inlineCode",{parentName:"li"},"temp")," onto the stack), and writes the result back to the client. Each function call adds a frame to the stack, and returns remove them (LIFO)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server Flow"),": Client sends HTTP request \u2192 server creates process \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleRequest")," is called, pushing its frame onto the stack."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Processing"),": Stack stores ",(0,r.kt)("inlineCode",{parentName:"li"},"userID"),", return address, and ",(0,r.kt)("inlineCode",{parentName:"li"},"temp"),"; CPU executes instructions within these frames."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Release"),": Frames are popped off when functions return, automatically freeing stack memory.")))),(0,r.kt)("h3",{id:"heap-service"},"Heap Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/core/heap.go (**Heap**)\npackage core\n\nimport "fmt"\n\ntype HeapService struct{}\n\nfunc (s *HeapService) FetchUserData(id int) *string {\n    data := make([]string, 1) // Heap allocation\n    data[0] = fmt.Sprintf("User %d", id)\n    result := data[0]         // Copy to local var (stack)\n    return &result            // Pointer to heap-allocated string\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Heap Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates dynamic heap allocation in a server process."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"FetchUserData")," allocates a slice on the heap with ",(0,r.kt)("inlineCode",{parentName:"li"},"make"),", fills it with user data, and returns a pointer to a string, which persists beyond the function call, requiring garbage collection to release."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server Flow"),": Client request triggers process \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"FetchUserData")," allocates memory on heap for response data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Processing"),": CPU manages heap pointers; data persists beyond stack frame."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Release"),": Heap memory is freed by the garbage collector when no references remain (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," becomes unreachable).")))),(0,r.kt)("h3",{id:"cpu-service"},"CPU Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/core/cpu.go (**CPU**)\npackage core\n\nimport "fmt"\n\ntype CPUService struct {\n    stackSvc *StackService\n    heapSvc  *HeapService\n}\n\nfunc NewCPUService(stackSvc *StackService, heapSvc *HeapService) *CPUService {\n    return &CPUService{stackSvc: stackSvc, heapSvc: heapSvc}\n}\n\nfunc (s *CPUService) ProcessRequest(id int) string {\n    stackResult := s.stackSvc.processData(id)       // Stack-based execution\n    heapResult := *s.heapSvc.FetchUserData(id)      // Heap-based data fetch\n    return fmt.Sprintf("Stack: %d, Heap: %s", stackResult, heapResult)\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CPU Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates CPU processing a client request using stack and heap."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ProcessRequest")," calls ",(0,r.kt)("inlineCode",{parentName:"li"},"processData")," (stack-based) and ",(0,r.kt)("inlineCode",{parentName:"li"},"FetchUserData")," (heap-based), combining results to mimic CPU execution across memory types, returning a formatted string as the response."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server Flow"),": Client request \u2192 process created \u2192 CPU executes ",(0,r.kt)("inlineCode",{parentName:"li"},"ProcessRequest"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack vs Heap"),": Stack handles local vars (",(0,r.kt)("inlineCode",{parentName:"li"},"stackResult"),") and call frames; heap stores persistent data (",(0,r.kt)("inlineCode",{parentName:"li"},"heapResult"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Execution"),": CPU fetches instructions, decodes them (e.g., function calls), executes using stack for locals and heap for dynamic data.")))),(0,r.kt)("h3",{id:"process-service"},"Process Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/core/process.go (**Process**)\npackage core\n\nimport (\n    "fmt"\n    "net/http"\n)\n\ntype ProcessService struct {\n    cpuSvc *CPUService\n}\n\nfunc NewProcessService(cpuSvc *CPUService) *ProcessService {\n    return &ProcessService{cpuSvc: cpuSvc}\n}\n\nfunc (s *ProcessService) HandleClientRequest(w http.ResponseWriter, r *http.Request) {\n    id := 42 // Simulated client input\n    result := s.cpuSvc.ProcessRequest(id)\n    fmt.Fprintf(w, result)\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Process Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Represents a server process handling a client request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleClientRequest")," simulates a client HTTP request, assigns a static ID, calls ",(0,r.kt)("inlineCode",{parentName:"li"},"ProcessRequest")," to process it, and writes the result back to the client, illustrating the process lifecycle."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server Flow"),": Client sends request \u2192 OS creates process \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleClientRequest")," runs \u2192 CPU processes \u2192 response sent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"States"),': Process transitions from "new" (creation) to "running" (execution) to "terminated" (response sent).'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Threads"),": Single-threaded here; multi-threading possible with goroutines.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"memory-management"},"Memory Management"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory management"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Virtual memory"),": Abstracts physical memory with paging."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory allocation"),": Allocates static or dynamic memory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory protection"),": Isolates process memory spaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cache memory"),": Speeds up data access with levels.")),(0,r.kt)("h3",{id:"memory-management-service"},"Memory Management Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/memory/management.go (**Memory management**)\npackage memory\n\nimport (\n    "fmt"\n    "runtime"\n)\n\ntype MemoryManagementService struct{}\n\nfunc (s *MemoryManagementService) AllocateMemory() {\n    stackVar := 42                  // Stack allocation\n    heapSlice := make([]int, 1000)  // Heap allocation\n    fmt.Println("Stack var:", stackVar, "Heap size:", len(heapSlice))\n    runtime.GC() // Suggest garbage collection\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory Management Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Shows memory allocation and management in a process."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"AllocateMemory")," allocates ",(0,r.kt)("inlineCode",{parentName:"li"},"stackVar")," on the stack (static) and ",(0,r.kt)("inlineCode",{parentName:"li"},"heapSlice")," on the heap (dynamic), logs their usage, and suggests garbage collection with ",(0,r.kt)("inlineCode",{parentName:"li"},"runtime.GC()")," to manage heap memory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Management Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Virtual Memory"),": OS maps ",(0,r.kt)("inlineCode",{parentName:"li"},"heapSlice")," to virtual addresses, abstracting physical RAM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Allocation"),": Stack for ",(0,r.kt)("inlineCode",{parentName:"li"},"stackVar")," (auto-freed), heap for ",(0,r.kt)("inlineCode",{parentName:"li"},"heapSlice")," (GC-managed)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Protection"),": Process memory isolated by OS (not shown but inherent)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cache"),": CPU caches ",(0,r.kt)("inlineCode",{parentName:"li"},"stackVar")," for fast access (implicit).")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"process-management"},"Process Management"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Process management"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scheduling"),": Allocates CPU time to processes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Context switching"),": Switches between processes or threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inter-process communication"),": Enables process data sharing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process synchronization"),": Prevents race conditions.")),(0,r.kt)("h3",{id:"process-management-service"},"Process Management Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/process/management.go (**Process management**)\npackage process\n\nimport (\n    "fmt"\n    "sync"\n)\n\ntype ProcessManagementService struct{}\n\nfunc (s *ProcessManagementService) ScheduleProcesses() {\n    var wg sync.WaitGroup\n    wg.Add(2)\n    go func() { // Process 1\n        defer wg.Done()\n        fmt.Println("Process 1 running")\n    }()\n    go func() { // Process 2\n        defer wg.Done()\n        fmt.Println("Process 2 running")\n    }()\n    wg.Wait()\n}\n\nfunc (s *ProcessManagementService) Communicate() string {\n    ch := make(chan string)\n    go func() {\n        ch <- "Server response"\n    }()\n    return <-ch\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Process Management Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates scheduling and IPC in a server context."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ScheduleProcesses")," launches two goroutines (simulating processes), uses a ",(0,r.kt)("inlineCode",{parentName:"li"},"WaitGroup")," for synchronization, and ",(0,r.kt)("inlineCode",{parentName:"li"},"Communicate")," sends a message via a channel, mimicking client-server IPC."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process Management Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scheduling"),": Go runtime schedules goroutines (processes) on CPU cores."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Context Switching"),": Implicit when switching between goroutines."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IPC"),": Channels simulate client-server data exchange."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Synchronization"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"WaitGroup")," ensures process completion.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"cpu-architecture"},"CPU Architecture"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CPU architecture"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instruction execution"),": Runs fetch-decode-execute cycles."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multi-core processing"),": Parallelizes tasks across cores."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interrupts"),": Handles external or internal events."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU scheduling"),": Optimizes core usage.")),(0,r.kt)("h3",{id:"cpu-architecture-service"},"CPU Architecture Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/cpu/architecture.go (**CPU architecture**)\npackage cpu\n\nimport (\n    "fmt"\n    "runtime"\n)\n\ntype CPUArchitectureService struct{}\n\nfunc (s *CPUArchitectureService) ExecuteInstructions(cycles int) int {\n    sum := 0\n    for i := 0; i < cycles; i++ {\n        sum += i\n    }\n    fmt.Println("Instructions executed, result:", sum)\n    return sum\n}\n\nfunc (s *CPUArchitectureService) MultiCoreProcess() {\n    runtime.GOMAXPROCS(2) // Use 2 cores\n    go func() {\n        fmt.Println("Core 1 processing")\n    }()\n    go func() {\n        fmt.Println("Core 2 processing")\n    }()\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CPU Architecture Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Simulates CPU execution and multi-core processing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteInstructions")," runs a loop to mimic fetch-decode-execute cycles, while ",(0,r.kt)("inlineCode",{parentName:"li"},"MultiCoreProcess")," sets ",(0,r.kt)("inlineCode",{parentName:"li"},"GOMAXPROCS")," to 2 and launches goroutines to simulate multi-core parallelism."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Architecture Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server"),": Request triggers process \u2192 CPU executes ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteInstructions"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack vs Heap"),": Stack for ",(0,r.kt)("inlineCode",{parentName:"li"},"sum")," (local), heap not used here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multi-core"),": Goroutines run on separate cores if available.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory optimization"),": Enhances data locality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU optimization"),": Improves instruction execution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling tools"),": Analyzes runtime performance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency optimization"),": Boosts multi-threading.")),(0,r.kt)("h3",{id:"performance-optimization-service"},"Performance Optimization Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// src/perf/optimization.go (**Performance optimization**)\npackage perf\n\nimport (\n    "fmt"\n    "runtime/pprof"\n    "os"\n)\n\ntype PerformanceOptimizationService struct{}\n\nfunc (s *PerformanceOptimizationService) OptimizeMemory() {\n    data := make([]int, 1000)\n    for i := 0; i < len(data); i++ {\n        data[i] = i\n    }\n    fmt.Println("Memory optimized, size:", len(data))\n}\n\nfunc (s *PerformanceOptimizationService) ProfileCPU() {\n    f, _ := os.Create("cpu.pprof")\n    pprof.StartCPUProfile(f)\n    defer pprof.StopCPUProfile()\n    s.OptimizeMemory()\n    fmt.Println("CPU profile written to cpu.pprof")\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance Optimization Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates memory locality and CPU profiling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"OptimizeMemory")," allocates a slice with sequential access to optimize cache usage, ",(0,r.kt)("inlineCode",{parentName:"li"},"ProfileCPU")," uses ",(0,r.kt)("inlineCode",{parentName:"li"},"pprof")," to profile the CPU during this operation, writing results to a file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client to Server"),": Request triggers ",(0,r.kt)("inlineCode",{parentName:"li"},"OptimizeMemory")," \u2192 CPU optimizes via locality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack vs Heap"),": Stack for loop vars, heap for ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," (released by GC when unreachable)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"pprof")," analyzes performance for tuning.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"key-insights"},"Key Insights"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Process Flow"),": Client request \u2192 OS creates process \u2192 CPU executes using stack (locals) and heap (dynamic data) \u2192 response sent \u2192 stack pops, heap GC\u2019d."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CPU Processing"),": Stack manages call flow (fast, fixed-size); heap handles persistent data (slower, flexible)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Release"),": Stack auto-frees on return; heap relies on GC when references are gone.")))}u.isMDXComponent=!0}}]);