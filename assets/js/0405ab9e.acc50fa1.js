"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9461],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),i=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=i(t),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var i=2;i<s;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const s={title:"Github Actions Example"},a=void 0,c={unversionedId:"examples/devops/githubactions",id:"examples/devops/githubactions",title:"Github Actions Example",description:"Example deploy code to EC2 with docker-compose",source:"@site/docs/examples/devops/githubactions.md",sourceDirName:"examples/devops",slug:"/examples/devops/githubactions",permalink:"/docs/examples/devops/githubactions",draft:!1,tags:[],version:"current",frontMatter:{title:"Github Actions Example"},sidebar:"examples",next:{title:"Assume Role Example",permalink:"/docs/examples/devops/assumerole"}},p={},i=[],l={toc:i},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Example deploy code to EC2 with docker-compose"),(0,o.kt)("p",null,"folder ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'name: Push-to-EC2\n\n# Trigger deployment only on push to master branch\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    name: Deploy to EC2 on master branch push\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout the files\n        uses: actions/checkout@v2\n\n      - name: Deploy to Server\n        uses: easingthemes/ssh-deploy@main\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}\n          REMOTE_HOST: ${{ secrets.HOST_DNS }}\n          REMOTE_USER: ${{ secrets.USERNAME }}\n          TARGET: ${{ secrets.TARGET_DIR }}\n\n  build:\n    name: Build docker to EC2\n    runs-on: ubuntu-latest\n    needs: [deploy]\n    steps:\n      - name: Buid docker\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.HOST_DNS }}\n          username: ${{ secrets.USERNAME }}\n          key: ${{ secrets.EC2_SSH_KEY }}\n          script: |\n            cd ${{ secrets.TARGET_DIR }}\n            sudo docker-compose stop node\n            sudo docker-compose build node\n            sudo docker rmi $(docker images --filter "dangling=true" --quiet --no-trunc)\n            sudo docker-compose up node -d\n            sudo docker ps\n')))}d.isMDXComponent=!0}}]);