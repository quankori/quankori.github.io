"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[960],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(a),g=r,k=c["".concat(p,".").concat(g)]||c[g]||u[g]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},807:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={title:"Java"},l=void 0,o={unversionedId:"cheatsheet/programming/java",id:"cheatsheet/programming/java",title:"Java",description:"Java",source:"@site/docs/cheatsheet/programming/java.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/java",permalink:"/docs/cheatsheet/programming/java",draft:!1,tags:[],version:"current",frontMatter:{title:"Java"},sidebar:"cheatsheet",previous:{title:"RxJS",permalink:"/docs/cheatsheet/programming/rxjs"},next:{title:"Spring Boots",permalink:"/docs/cheatsheet/programming/spring"}},p={},s=[{value:"Java",id:"java",level:2},{value:"Key Differences",id:"key-differences",level:2}],m={toc:s},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"java"},"Java"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Overview"),": Java is a robust, object-oriented, platform-independent language running on the Java Virtual Machine (JVM), known for its portability, performance, and extensive ecosystem, widely used in enterprise, mobile, and big data applications."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM"),": Executes Java bytecode efficiently.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bytecode execution"),": Runs compiled .class files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT compiler"),": Optimizes bytecode to machine code at runtime (HotSpot)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Garbage collection"),": Manages memory (e.g., G1, ZGC)."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class loader"),": Loads classes into the JVM.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bootstrap"),": Loads core Java classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extension"),": Loads extension classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Application"),": Loads user-defined classes."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Language features"),": Core syntax and capabilities.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object-oriented"),": Uses classes and interfaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generics"),": Type-safe collections."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lambdas & streams"),": Functional programming features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modules"),": Modularizes code (Java 9+).")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory management"),": Controls memory allocation.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Heap"),": Young/Old generation for objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack"),": Per-thread call stacks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tuning JVM"),": Adjusts memory with ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xmx"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency"),": Handles multi-threading.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Threads & thread pools"),": Manages concurrent tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Executors framework"),": Simplifies thread management."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fork/join framework"),": Parallelizes tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CompletableFuture"),": Async programming."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profiling"),": Analyzes performance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VisualVM"),": Monitors JVM metrics."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JProfiler"),": Detailed profiling tool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JMH"),": Microbenchmarking framework."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JIT optimization"),": Enhances runtime performance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inlining"),": Embeds method calls."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Loop unrolling"),": Reduces loop overhead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Escape analysis"),": Optimizes object allocation.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Adds more instances.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Load balancer"),": Uses Spring Cloud for distribution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Microservices"),": Deploys with Spring Boot."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vertical scaling"),": Enhances single instance.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM tuning"),": Adjusts memory and threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Thread pool optimization"),": Balances concurrency."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distributed systems"),": Scales across nodes.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Messaging"),": Integrates Kafka or RabbitMQ."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Clustering"),": Uses Hazelcast for data sharing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Service discovery"),": Locates services dynamically.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ecosystem & tools"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Build tools"),": Manages dependencies and builds.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Maven"),": XML-based dependency management."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Gradle"),": Groovy-based build automation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Ant"),": Early build tool with XML scripts."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Frameworks"),": Simplifies development.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spring"),": IoC, MVC, and Boot for modern apps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hibernate"),": ORM for database access."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java EE"),": Enterprise standards (Jakarta EE)."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Testing"),": Ensures code quality.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JUnit"),": Standard testing framework."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"TestNG"),": Advanced testing features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mockito"),": Mocking for unit tests."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Debugging & monitoring"),": Analyzes runtime.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JConsole"),": JVM monitoring tool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VisualVM"),": Visual performance analysis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Application performance monitoring"),": Tools like New Relic."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Deployment"),": Runs applications in production.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JAR/WAR files"),": Packaged executables."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Docker"),": Containerizes apps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cloud"),": Deploys to AWS, Azure.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Singleton"),": Ensures single instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Factory"),": Creates objects dynamically."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Builder"),": Constructs complex objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Observer"),": Notifies state changes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Decorator"),": Adds behavior dynamically.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enterprise applications"),": Robust business solutions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Android development"),": Native mobile apps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Big data"),": Powers Hadoop and Spark."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"High-performance servers"),": Scalable backend systems.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src/main/java/com/example/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 CoreService.java\n\u251c\u2500\u2500 perf/\n\u2502   \u251c\u2500\u2500 MemoryService.java\n\u2502   \u251c\u2500\u2500 ConcurrencyService.java\n\u251c\u2500\u2500 scale/\n\u2502   \u2514\u2500\u2500 ScaleService.java\n\u251c\u2500\u2500 patterns/\n\u2502   \u2514\u2500\u2500 SingletonService.java\n\u2514\u2500\u2500 Application.java\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bash Scripts & Java Commands"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Setup Docker for Deployment (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Build JAR\nmvn clean package\n# Create Dockerfile\necho "FROM openjdk:17\nCOPY target/myapp.jar /app.jar\nCMD [\\"java\\", \\"-jar\\", \\"/app.jar\\"]" > Dockerfile\n# Build and run Docker\ndocker build -t myapp .\ndocker run -p 8080:8080 myapp\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"JVM Tuning (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\njava -Xms512m -Xmx1024m -jar target/myapp.jar  # **Tuning JVM**\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Java Commands"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run with VisualVM\njava -jar target/myapp.jar &\n\n# Profile with JMH\njava -jar target/benchmarks.jar\n\n# Build with Maven\nmvn clean install\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Java Example (Spring Boot)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/CoreService.java (**JVM**, **Language features**)\npackage com.example.core;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CoreService {\n    public String processData(int id) {\n        return String.format("Processed %d", id); // **Object-oriented**\n    }\n\n    // **Lambdas & streams**\n    public java.util.List<String> filterData(java.util.List<Integer> ids) {\n        return ids.stream().filter(i -> i > 0).map(String::valueOf).collect(java.util.stream.Collectors.toList());\n    }\n}\n\n// src/main/java/com/example/perf/MemoryService.java (**Memory management**)\npackage com.example.perf;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MemoryService {\n    public void tuneMemory() {\n        Runtime.getRuntime().gc(); // **Garbage collection**\n        // **Heap**: Objects here, tuned via JVM args\n    }\n}\n\n// src/main/java/com/example/perf/ConcurrencyService.java (**Concurrency**)\npackage com.example.perf;\n\nimport org.springframework.stereotype.Service;\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class ConcurrencyService {\n    public CompletableFuture<String> asyncTask(int id) {\n        return CompletableFuture.supplyAsync(() -> { // **CompletableFuture**\n            try {\n                Thread.sleep(1000); // Simulate work\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return "Task " + id;\n        });\n    }\n}\n\n// src/main/java/com/example/scale/ScaleService.java (**Horizontal scaling**)\npackage com.example.scale;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Service\npublic class ScaleService {\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate; // **Caching**\n\n    public void cacheData(String key, String value) {\n        redisTemplate.opsForValue().set(key, value, 3600, java.util.concurrent.TimeUnit.SECONDS); // **In-memory caching**\n    }\n\n    public String getCachedData(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n}\n\n// src/main/java/com/example/patterns/SingletonService.java (**Singleton**)\npackage com.example.patterns;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class SingletonService {\n    private static final SingletonService instance = new SingletonService();\n\n    private SingletonService() {}\n\n    public static SingletonService getInstance() {\n        return instance;\n    }\n\n    public String getData() {\n        return "Singleton Data";\n    }\n}\n\n// src/main/java/com/example/Application.java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, String> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n}\n\n// src/main/java/com/example/MainController.java (Example Usage)\npackage com.example;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.example.core.CoreService;\nimport com.example.perf.ConcurrencyService;\nimport com.example.scale.ScaleService;\nimport com.example.patterns.SingletonService;\n\n@RestController\npublic class MainController {\n    @Autowired\n    private CoreService coreService;\n    @Autowired\n    private ConcurrencyService concurrencyService;\n    @Autowired\n    private ScaleService scaleService;\n\n    @GetMapping("/run")\n    public String run() throws Exception {\n        // **Core architecture**\n        String coreResult = coreService.processData(1);\n\n        // **Concurrency**\n        String asyncResult = concurrencyService.asyncTask(2).get();\n\n        // **Scaling**\n        scaleService.cacheData("key", "value");\n        String cached = scaleService.getCachedData("key");\n\n        // **Singleton**\n        String singletonData = SingletonService.getInstance().getData();\n\n        return String.format("Core: %s, Async: %s, Cached: %s, Singleton: %s", coreResult, asyncResult, cached, singletonData);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install dependencies via Maven:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- pom.xml --\x3e\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n  </dependency>\n</dependencies>\n"))),(0,r.kt)("li",{parentName:"ul"},"Requires Redis (",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:6379"),") for caching."),(0,r.kt)("li",{parentName:"ul"},"Bash scripts assume Java and Maven installed; adjust paths as needed."),(0,r.kt)("li",{parentName:"ul"},"Run with ",(0,r.kt)("inlineCode",{parentName:"li"},"mvn spring-boot:run")," after building.")),(0,r.kt)("h2",{id:"key-differences"},"Key Differences"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Core Architecture"),": JVM-based with rich language features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization"),": Memory and concurrency tuned via JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scaling"),": Horizontal with Spring Cloud, distributed with messaging."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Ecosystem & Tools"),": Extensive tools for enterprise development."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Design Patterns"),": Classic patterns for robust design."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use Cases"),": Enterprise, mobile, big data, and server apps.")))}u.isMDXComponent=!0}}]);