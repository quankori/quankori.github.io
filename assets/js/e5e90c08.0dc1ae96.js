"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),g=r,k=m["".concat(p,".").concat(g)]||m[g]||u[g]||i;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"Spring Boots"},o=void 0,l={unversionedId:"cheatsheet/programming/spring",id:"cheatsheet/programming/spring",title:"Spring Boots",description:"Core Architecture",source:"@site/docs/cheatsheet/programming/spring.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/spring",permalink:"/docs/cheatsheet/programming/spring",draft:!1,tags:[],version:"current",frontMatter:{title:"Spring Boots"},sidebar:"cheatsheet",previous:{title:"Java",permalink:"/docs/cheatsheet/programming/java"},next:{title:"Computer Science",permalink:"/docs/cheatsheet/fundamental/computer-science"}},p={},s=[{value:"Core Architecture",id:"core-architecture",level:2},{value:"Spring Framework Service",id:"spring-framework-service",level:3},{value:"Auto-Configuration Service",id:"auto-configuration-service",level:3},{value:"Language Features Service",id:"language-features-service",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Service",id:"memory-service",level:3},{value:"Concurrency Service",id:"concurrency-service",level:3},{value:"Cache Service",id:"cache-service",level:3},{value:"Database Service",id:"database-service",level:3},{value:"Scaling",id:"scaling",level:2},{value:"Scale Service",id:"scale-service",level:3},{value:"Scope Details",id:"scope-details",level:2},{value:"Notes",id:"notes",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"core-architecture"},"Core Architecture"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spring framework"),": Provides foundational IoC, DI, and AOP."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Auto-configuration"),": Streamlines setup with starters and embedded servers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Language features"),": Integrates Java/Kotlin with annotations and reactive support.")),(0,r.kt)("h3",{id:"spring-framework-service"},"Spring Framework Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/SpringFrameworkService.java (**Spring framework**)\npackage com.example.core;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Service\npublic class SpringFrameworkService {\n    private final Dependency dependency;\n\n    @Autowired\n    public SpringFrameworkService(Dependency dependency) {\n        this.dependency = dependency;\n    }\n\n    public String processData() {\n        return "Processed with " + dependency.getData();\n    }\n}\n\nclass Dependency {\n    public String getData() {\n        return "Dependency Data";\n    }\n}\n\n@Configuration\nclass Config {\n    @Bean\n    public Dependency dependency() {\n        return new Dependency();\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Spring Framework Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates IoC and Dependency Injection (DI) using Spring annotations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": The ",(0,r.kt)("inlineCode",{parentName:"li"},"@Service")," annotation marks ",(0,r.kt)("inlineCode",{parentName:"li"},"SpringFrameworkService")," as a Spring-managed bean. ",(0,r.kt)("inlineCode",{parentName:"li"},"@Autowired")," injects the ",(0,r.kt)("inlineCode",{parentName:"li"},"Dependency")," bean, defined in a ",(0,r.kt)("inlineCode",{parentName:"li"},"@Configuration")," class with a ",(0,r.kt)("inlineCode",{parentName:"li"},"@Bean")," method, showcasing IoC and DI. ",(0,r.kt)("inlineCode",{parentName:"li"},"processData")," uses the injected dependency to return a result."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spring Framework Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inversion of Control (IoC)"),": Spring container manages bean lifecycle and dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Dependency Injection (DI)"),": Beans are injected via constructor, setter, or field injection (here, constructor)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Aspect-Oriented Programming (AOP)"),": Not shown but enables cross-cutting concerns (e.g., logging, security) via aspects.")))),(0,r.kt)("h3",{id:"auto-configuration-service"},"Auto-Configuration Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/AutoConfigService.java (**Auto-configuration**)\npackage com.example.core;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = "app")\npublic class AutoConfigService {\n    private String setting;\n\n    public void setSetting(String setting) {\n        this.setting = setting;\n    }\n\n    public String getSetting() {\n        return "Setting: " + setting;\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Auto-Configuration Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Shows auto-configuration with Spring Boot\u2019s ",(0,r.kt)("inlineCode",{parentName:"li"},"@ConfigurationProperties"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"@Component")," registers the class as a bean, and ",(0,r.kt)("inlineCode",{parentName:"li"},"@ConfigurationProperties")," binds properties from ",(0,r.kt)("inlineCode",{parentName:"li"},"application.properties")," (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"app.setting=value"),") to the ",(0,r.kt)("inlineCode",{parentName:"li"},"setting")," field, demonstrating auto-configuration without manual setup."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Auto-Configuration Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Starter Dependencies"),": Pre-configured libraries (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"spring-boot-starter-web"),") include defaults."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Embedded Servers"),": Tomcat/Jetty run within the app (e.g., no external server needed)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Convention over Configuration"),": Sensible defaults reduce manual configuration.")))),(0,r.kt)("h3",{id:"language-features-service"},"Language Features Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/core/LanguageFeaturesService.java (**Language features**)\npackage com.example.core;\n\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Mono;\n\n@Service\npublic class LanguageFeaturesService {\n    public Mono<String> processReactively(String input) {\n        return Mono.just("Processed: " + input);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Language Features Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Highlights reactive programming support with annotations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"@Service")," marks the class as a Spring bean, and ",(0,r.kt)("inlineCode",{parentName:"li"},"processReactively")," returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Mono")," (reactive type from Project Reactor), simulating async processing with a simple string transformation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Language Features Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java Integration"),": Uses Java with Spring annotations (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"@Service"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Kotlin Support"),": Not shown but natively supported (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"class MyService")," in Kotlin)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Annotations"),": Simplifies configuration (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"@Autowired"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"@Bean"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Reactive Programming"),": WebFlux enables non-blocking operations (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"Mono"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Flux"),").")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory management"),": Tunes JVM memory and garbage collection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency"),": Manages threads and reactive streams."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Caching"),": Enhances speed with Spring Cache."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Database access"),": Optimizes data operations with Hibernate and pooling.")),(0,r.kt)("h3",{id:"memory-service"},"Memory Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/MemoryService.java (**Memory management**)\npackage com.example.perf;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MemoryService {\n    public void allocateMemory() {\n        Object[] objects = new Object[1000000];\n        for (int i = 0; i < objects.length; i++) {\n            objects[i] = new Object();\n        }\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemory = runtime.totalMemory() - runtime.freeMemory();\n        System.out.println("Used memory: " + usedMemory);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates heap allocation and memory usage reporting."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Allocates a large array on the heap, fills it with objects, and uses ",(0,r.kt)("inlineCode",{parentName:"li"},"Runtime")," to report used memory, simulating memory-intensive operations manageable via JVM tuning."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Management Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JVM Tuning"),": Adjusts heap size with ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms")," (initial) and ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xmx")," (max), e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xms512m -Xmx1024m"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Garbage Collection"),": G1 or ZGC manages memory; triggered by heap pressure or ",(0,r.kt)("inlineCode",{parentName:"li"},"System.gc()"),".")))),(0,r.kt)("h3",{id:"concurrency-service"},"Concurrency Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/ConcurrencyService.java (**Concurrency**)\npackage com.example.perf;\n\nimport org.springframework.stereotype.Service;\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class ConcurrencyService {\n    public CompletableFuture<String> asyncOperation(String input) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return "Processed: " + input;\n        });\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Concurrency Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Shows asynchronous processing with CompletableFuture."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Uses ",(0,r.kt)("inlineCode",{parentName:"li"},"CompletableFuture.supplyAsync")," to run a task asynchronously, simulating a 1-second delay and returning a processed string, leveraging thread pools implicitly."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Threads"),": Managed by JVM thread pools (e.g., ForkJoinPool by default)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Reactive Streams"),": Not shown but supported via Reactor (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"Mono"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Flux"),").")))),(0,r.kt)("h3",{id:"cache-service"},"Cache Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/CacheService.java (**Caching**)\npackage com.example.perf;\n\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CacheService {\n    @Cacheable("data")\n    public String getData(String key) {\n        return "Cached Data: " + key;\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Cache Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Implements caching with Spring Cache."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"@Cacheable"),' caches the method result under the "data" cache name, returning a string with the key; subsequent calls with the same key retrieve the cached value instead of recomputing.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Caching Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spring Cache"),": Uses Ehcache or Redis (configurable via ",(0,r.kt)("inlineCode",{parentName:"li"},"CacheManager"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Annotations"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"@Cacheable")," simplifies caching logic.")))),(0,r.kt)("h3",{id:"database-service"},"Database Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/perf/DatabaseService.java (**Database access**)\npackage com.example.perf;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DatabaseService {\n    private final JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    public DatabaseService(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public String fetchData() {\n        return jdbcTemplate.queryForObject("SELECT name FROM users WHERE id = 1", String.class);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Database Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Demonstrates database access with JDBC and pooling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Uses ",(0,r.kt)("inlineCode",{parentName:"li"},"JdbcTemplate")," (injected via ",(0,r.kt)("inlineCode",{parentName:"li"},"@Autowired"),") to query a database table, leveraging HikariCP (default in Spring Boot) for connection pooling, returning a single string result."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Database Access Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hibernate/JPA"),": Not shown but optimizes ORM (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"@Entity")," mapping)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection Pooling"),": HikariCP manages database connections efficiently.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scaling"},"Scaling"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Scales with Spring Cloud and microservices."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vertical scaling"),": Boosts single-instance performance via JVM tuning."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distributed systems"),": Integrates messaging and caching for distribution.")),(0,r.kt)("h3",{id:"scale-service"},"Scale Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// src/main/java/com/example/scale/ScaleService.java (**Distributed systems**)\npackage com.example.scale;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ScaleService {\n    private final KafkaTemplate<String, String> kafkaTemplate;\n\n    @Autowired\n    public ScaleService(KafkaTemplate<String, String> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n\n    public void sendMessage(String topic, String message) {\n        kafkaTemplate.send(topic, message);\n        System.out.println("Message sent to " + topic + ": " + message);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scale Service Details"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Sends messages to Kafka for distributed communication."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explanation"),": Uses ",(0,r.kt)("inlineCode",{parentName:"li"},"KafkaTemplate")," (injected via ",(0,r.kt)("inlineCode",{parentName:"li"},"@Autowired"),") to send a message to a specified topic, logging the action for confirmation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scaling Details"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Horizontal Scaling"),": Spring Cloud enables load balancing and microservices."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vertical Scaling"),": JVM tuning (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"-Xmx"),") enhances single-instance capacity."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distributed Systems"),": Kafka for messaging, Redis for caching, not shown but Hazelcast could cluster data.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scope-details"},"Scope Details"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Global Scope"),": Static fields or variables outside methods/classes (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"public static int x;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Closure Scope"),": Simulated with lambdas capturing variables (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"int x = 1; Runnable r = () -> System.out.println(x);"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Scope"),": Instance or static fields within a class (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"private int y;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method Scope"),": Local variables within a method (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"int z = 1;"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Block Scope"),": Variables within ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," blocks (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"for (int i = 0; i < 10; i++) {}"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spring Scopes"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Singleton"),": One instance app-wide (default)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prototype"),": New instance per request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Request"),": New instance per HTTP request (web context).")))),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Dependencies (Maven):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jdbc</artifactId>\n  <groupId>org.springframework.kafka</groupId>\n  <artifactId>spring-kafka</artifactId>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-cache</artifactId>\n</dependencies>\n"))),(0,r.kt)("li",{parentName:"ul"},"Requires Kafka (",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:9092"),"), Redis (",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:6379"),"), and a database (e.g., H2 in-memory)."),(0,r.kt)("li",{parentName:"ul"},"Run with ",(0,r.kt)("inlineCode",{parentName:"li"},"mvn spring-boot:run"),".")))}u.isMDXComponent=!0}}]);