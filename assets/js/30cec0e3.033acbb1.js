"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5494],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,d=c["".concat(o,".").concat(m)]||c[m]||g[m]||s;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={title:"Testing"},i=void 0,l={unversionedId:"programming/go/testing",id:"programming/go/testing",title:"Testing",description:"Testing in Golang",source:"@site/docs/programming/go/testing.md",sourceDirName:"programming/go",slug:"/programming/go/testing",permalink:"/docs/programming/go/testing",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing"},sidebar:"programming",previous:{title:"Slices & Array",permalink:"/docs/programming/go/slices-array"},next:{title:"Callbacks in Node.js",permalink:"/docs/programming/nodejs/callback"}},o={},p=[{value:"Testing in Golang",id:"testing-in-golang",level:2},{value:"Key Concepts in Go Testing",id:"key-concepts-in-go-testing",level:2},{value:"1. Test Files",id:"1-test-files",level:3},{value:"2. Test Functions",id:"2-test-functions",level:3},{value:"3. Test Coverage",id:"3-test-coverage",level:3},{value:"4. Table-Driven Tests",id:"4-table-driven-tests",level:3},{value:"5. Benchmark Tests",id:"5-benchmark-tests",level:3},{value:"6. Mocking and Stubbing",id:"6-mocking-and-stubbing",level:3},{value:"7. Example Tests",id:"7-example-tests",level:3},{value:"8. Subtests and Setup/Teardown",id:"8-subtests-and-setupteardown",level:3},{value:"Summary",id:"summary",level:2}],u={toc:p},c="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"testing-in-golang"},"Testing in Golang"),(0,a.kt)("p",null,"Testing is a crucial part of software development, ensuring that code behaves as expected and is free of defects. Golang has built-in support for testing through the ",(0,a.kt)("inlineCode",{parentName:"p"},"testing")," package. Here\u2019s an overview of how testing is done in Go, suitable for an interview setting."),(0,a.kt)("h2",{id:"key-concepts-in-go-testing"},"Key Concepts in Go Testing"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Test Files")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Test Functions")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Test Coverage")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Table-Driven Tests")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Benchmark Tests")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Mocking and Stubbing")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Example Tests")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Subtests and Setup/Teardown"))),(0,a.kt)("h3",{id:"1-test-files"},"1. Test Files"),(0,a.kt)("p",null,"Test files in Go are placed in the same package as the code they test, and their filenames must end with ",(0,a.kt)("inlineCode",{parentName:"p"},"_test.go"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"math.go")," (production code)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"math_test.go")," (test code)")),(0,a.kt)("h3",{id:"2-test-functions"},"2. Test Functions"),(0,a.kt)("p",null,"Test functions are defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"func TestXxx(t *testing.T)")," signature, where ",(0,a.kt)("inlineCode",{parentName:"p"},"Xxx")," is any descriptive name."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// math.go\npackage math\n\nfunc Add(a, b int) int {\n    return a + b\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// math_test.go\npackage math\n\nimport "testing"\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    expected := 5\n    if result != expected {\n        t.Errorf("expected %d, got %d", expected, result)\n    }\n}\n')),(0,a.kt)("h3",{id:"3-test-coverage"},"3. Test Coverage"),(0,a.kt)("p",null,"Go provides built-in tools to measure test coverage, which indicates how much of the code is exercised by tests."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go test -cover\n")),(0,a.kt)("p",null,"For detailed coverage reports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go test -coverprofile=coverage.out\ngo tool cover -html=coverage.out\n")),(0,a.kt)("h3",{id:"4-table-driven-tests"},"4. Table-Driven Tests"),(0,a.kt)("p",null,"Table-driven tests allow testing multiple cases using a single function, improving code organization and reducing redundancy."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func TestAdd(t *testing.T) {\n    tests := []struct {\n        name     string\n        a, b     int\n        expected int\n    }{\n        {"2 + 3", 2, 3, 5},\n        {"0 + 0", 0, 0, 0},\n        {"-1 + 1", -1, 1, 0},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result := Add(tt.a, tt.b)\n            if result != tt.expected {\n                t.Errorf("expected %d, got %d", tt.expected, result)\n            }\n        })\n    }\n}\n')),(0,a.kt)("h3",{id:"5-benchmark-tests"},"5. Benchmark Tests"),(0,a.kt)("p",null,"Benchmark tests measure the performance of code and are defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"func BenchmarkXxx(b *testing.B)")," signature."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func BenchmarkAdd(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        Add(2, 3)\n    }\n}\n")),(0,a.kt)("p",null,"Run benchmarks with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go test -bench=.\n")),(0,a.kt)("h3",{id:"6-mocking-and-stubbing"},"6. Mocking and Stubbing"),(0,a.kt)("p",null,"Mocking and stubbing are techniques to simulate parts of the system that are impractical to use in tests (e.g., external services)."),(0,a.kt)("p",null,"Use libraries like ",(0,a.kt)("inlineCode",{parentName:"p"},"gomock")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"testify")," for advanced mocking."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example using testify"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/stretchr/testify/mock"\n    "testing"\n)\n\ntype MockService struct {\n    mock.Mock\n}\n\nfunc (m *MockService) DoSomething() error {\n    args := m.Called()\n    return args.Error(0)\n}\n\nfunc TestDoSomething(t *testing.T) {\n    mockService := new(MockService)\n    mockService.On("DoSomething").Return(nil)\n\n    err := mockService.DoSomething()\n    if err != nil {\n        t.Errorf("expected no error, got %v", err)\n    }\n\n    mockService.AssertExpectations(t)\n}\n')),(0,a.kt)("h3",{id:"7-example-tests"},"7. Example Tests"),(0,a.kt)("p",null,"Example tests are used for documentation and can be run as tests. They use the ",(0,a.kt)("inlineCode",{parentName:"p"},"func ExampleXxx()")," signature."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func ExampleAdd() {\n    fmt.Println(Add(2, 3))\n    // Output: 5\n}\n")),(0,a.kt)("p",null,"Run example tests with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go test\n")),(0,a.kt)("h3",{id:"8-subtests-and-setupteardown"},"8. Subtests and Setup/Teardown"),(0,a.kt)("p",null,"Subtests allow structuring tests into hierarchies and sharing setup/teardown logic."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func TestAdd(t *testing.T) {\n    setup := func(t *testing.T) func(t *testing.T) {\n        t.Log("Setup")\n        return func(t *testing.T) {\n            t.Log("Teardown")\n        }\n    }\n\n    t.Run("group", func(t *testing.T) {\n        teardown := setup(t)\n        defer teardown(t)\n\n        t.Run("2+3", func(t *testing.T) {\n            result := Add(2, 3)\n            if result != 5 {\n                t.Errorf("expected 5, got %d", result)\n            }\n        })\n\n        t.Run("0+0", func(t *testing.T) {\n            result := Add(0, 0)\n            if result != 0 {\n                t.Errorf("expected 0, got %d", result)\n            }\n        })\n    })\n}\n')),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Test Files"),": Named with ",(0,a.kt)("inlineCode",{parentName:"li"},"_test.go")," suffix."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Test Functions"),": Use ",(0,a.kt)("inlineCode",{parentName:"li"},"func TestXxx(t *testing.T)"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Test Coverage"),": Measure using ",(0,a.kt)("inlineCode",{parentName:"li"},"go test -cover"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Table-Driven Tests"),": Test multiple cases with one function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Benchmark Tests"),": Measure performance using ",(0,a.kt)("inlineCode",{parentName:"li"},"func BenchmarkXxx(b *testing.B)"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mocking"),": Simulate external services using libraries like ",(0,a.kt)("inlineCode",{parentName:"li"},"testify"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example Tests"),": Used for documentation, executed as tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Subtests"),": Structure tests into hierarchies with shared setup/teardown logic.")))}g.isMDXComponent=!0}}]);