"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[356],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,k=p["".concat(l,".").concat(d)]||p[d]||u[d]||o;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Node.js"},i=void 0,s={unversionedId:"cheatsheet/programming/nodejs",id:"cheatsheet/programming/nodejs",title:"Node.js",description:"Core Architecture",source:"@site/docs/cheatsheet/programming/nodejs.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/nodejs",permalink:"/docs/cheatsheet/programming/nodejs",draft:!1,tags:[],version:"current",frontMatter:{title:"Node.js"},sidebar:"cheatsheet",previous:{title:"Serverless Architecture",permalink:"/docs/cheatsheet/system-design/serverless"},next:{title:"Nest.js",permalink:"/docs/cheatsheet/programming/nestjs"}},l={},c=[{value:"Core Architecture",id:"core-architecture",level:2},{value:"Event Loop Service",id:"event-loop-service",level:2},{value:"V8 Service",id:"v8-service",level:2},{value:"Module Service",id:"module-service",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Async Service",id:"async-service",level:2},{value:"Worker Service",id:"worker-service",level:2},{value:"Cluster Service",id:"cluster-service",level:2},{value:"Stream Service",id:"stream-service",level:2},{value:"Scope Details",id:"scope-details",level:2}],m={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"core-architecture"},"Core Architecture"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event-driven model"),": Manages tasks through an event loop and non-blocking I/O.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event loop"),": Orchestrates asynchronous operations across distinct phases."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Single-threaded non-blocking I/O"),": Executes tasks without waiting for I/O completion."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Libuv"),": Provides a thread pool for I/O operations (e.g., file system, network)."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"V8 engine"),": Executes JavaScript code with high performance.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JavaScript runtime"),": Runs JS outside the browser environment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JIT compilation"),": Compiles JS to machine code at runtime."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Garbage collection"),": Manages memory using mark-and-sweep."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Module system"),": Organizes code into reusable units.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"CommonJS"),": Uses ",(0,a.kt)("inlineCode",{parentName:"li"},"require")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"module.exports")," for module loading."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ES modules"),": Supports ",(0,a.kt)("inlineCode",{parentName:"li"},"import"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"export")," syntax (ESM)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dynamic imports"),": Loads modules asynchronously at runtime.")))),(0,a.kt)("h2",{id:"event-loop-service"},"Event Loop Service"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"How it works"),": The event loop is Node.js's mechanism for handling asynchronous operations in a single-threaded environment. It continuously processes a queue of tasks in distinct phases, leveraging callbacks to avoid blocking the main thread."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Phases"),":")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Timers"),": Executes callbacks scheduled by ",(0,a.kt)("inlineCode",{parentName:"li"},"setTimeout")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"setInterval")," once their delay expires. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"setTimeout(() => console.log('Done'), 1000)")," runs after 1 second."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Pending Callbacks"),": Executes I/O callbacks deferred from previous cycles, such as TCP error handling or unresolved promises from prior operations."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Poll"),": Retrieves new I/O events (e.g., file reads, network requests) and executes their associated callbacks. This is the phase where most I/O work happens."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Check"),": Executes ",(0,a.kt)("inlineCode",{parentName:"li"},"setImmediate")," callbacks, which run immediately after the Poll phase completes, bypassing timers."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Close"),": Handles close events, such as when a socket or file stream is closed (e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"socket.on('close', ...)"),")."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Idle/Prepare"),": Internal phases used by Node.js for housekeeping tasks, not directly accessible to developers.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Execution"),": The loop iterates through these phases in order, processing pending tasks. If no tasks remain (no timers, I/O, or callbacks), it exits, ending the Node.js process.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/event-loop.service.ts (**Event-driven model**)\nimport { EventEmitter } from "events";\n\nexport class EventLoopService {\n  private emitter: EventEmitter;\n\n  constructor() {\n    // Line 1: Initialize EventEmitter to handle events\n    this.emitter = new EventEmitter();\n    // Line 2: Set a reasonable limit to prevent memory leaks from too many listeners\n    this.emitter.setMaxListeners(20);\n    // Line 3: Log initialization for debugging purposes\n    console.log("EventLoopService initialized");\n  }\n\n  // Trigger an event asynchronously\n  async triggerEvent(event: string, data: any): Promise<void> {\n    // Line 1: Emit the event to all registered listeners\n    this.emitter.emit(event, data);\n    // Line 2: Log the event triggering action with data for traceability\n    console.log(`Event ${event} triggered with data:`, data);\n  }\n\n  // Register a listener for an event\n  listen(event: string, callback: (data: any) => void): void {\n    // Line 1: Register the callback as a listener for the specified event\n    this.emitter.on(event, callback);\n    // Line 2: Log the listener registration to confirm setup\n    console.log(`Listener registered for event: ${event}`);\n  }\n}\n')),(0,a.kt)("h2",{id:"v8-service"},"V8 Service"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JavaScript Runtime"),": Provides an environment to run JS outside browsers, leveraging V8\u2019s capabilities for server-side execution."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JIT Compilation"),":"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Process"),": Parses JS \u2192 Optimizes (e.g., inlines functions) \u2192 Compiles to machine code \u2192 Executes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Benefit"),": Improves performance by avoiding repeated interpretation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Garbage Collection"),":"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"How it runs"),": Uses a mark-and-sweep algorithm:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Mark"),": Identifies reachable objects from the root (e.g., global scope, stack)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Sweep"),": Reclaims memory from unreachable objects.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When it runs"),": Triggered automatically when heap memory is low or manually with ",(0,a.kt)("inlineCode",{parentName:"li"},"global.gc()")," (if ",(0,a.kt)("inlineCode",{parentName:"li"},"--expose-gc")," is enabled)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Common Issues"),":"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory Leaks"),": Unreleased references (e.g., unremoved event listeners: ",(0,a.kt)("inlineCode",{parentName:"li"},"emitter.on('event', ...)")," without ",(0,a.kt)("inlineCode",{parentName:"li"},"off"),")."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Stop-the-World"),": Major GC pauses execution, causing latency spikes (e.g., during large heap cleanup)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Over-allocation"),": Excessive allocations (e.g., huge arrays) trigger frequent GC, degrading performance.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/v8.service.ts (**V8 engine**)\nexport class V8Service {\n  // Simulate V8 execution of JavaScript code\n  executeCode(code: string): string {\n    // Line 1: Use eval to simulate V8 executing a string of JS code (unsafe in production)\n    const result = eval(code);\n    // Line 2: Log the result to verify execution\n    console.log("V8 executed code:", result);\n    // Line 3: Convert result to string and return it\n    return String(result);\n  }\n\n  // Simulate memory allocation and trigger garbage collection\n  triggerGarbageCollection(): void {\n    // Line 1: Allocate a large array to simulate memory usage\n    const largeArray = new Array(1000000).fill("data");\n    // Line 2: Log the allocation to track memory impact\n    console.log("Allocated large array of length:", largeArray.length);\n    // Line 3: Check if manual GC is enabled (requires --expose-gc flag)\n    if (global.gc) {\n      // Line 4: Trigger garbage collection explicitly\n      global.gc();\n      // Line 5: Log the GC action\n      console.log("Garbage collection triggered");\n    } else {\n      // Line 6: Warn if GC is not enabled\n      console.log("Run with --expose-gc to enable manual GC");\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"module-service"},"Module Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/module.service.ts (**Module system**)\nexport class ModuleService {\n  // CommonJS-style method\n  commonJsMethod(): string {\n    // Line 1: Define a result simulating CommonJS module output\n    const result = "CommonJS Result";\n    // Line 2: Log the execution for debugging\n    console.log("CommonJS method called:", result);\n    // Line 3: Return the result\n    return result;\n  }\n\n  // ES Module-style method with dynamic import\n  async esModuleMethod(): Promise<string> {\n    // Line 1: Dynamically import the \'os\' module\n    const os = await import("os");\n    // Line 2: Get the hostname using the imported module\n    const result = os.hostname();\n    // Line 3: Log the result for verification\n    console.log("ES Module method called, hostname:", result);\n    // Line 4: Return the hostname\n    return result;\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Asynchronous programming"),": Handles I/O operations efficiently.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Callbacks"),": Passes functions as arguments for async completion."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Promises"),": Provides a structured way to handle async results."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Async/await"),": Simplifies promise-based code with synchronous-like syntax."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Worker threads"),": Offloads CPU-intensive tasks to separate threads.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Multi-threading for CPU-intensive tasks"),": Runs heavy computations in parallel."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Thread pool configuration"),": Adjusts the number of threads via ",(0,a.kt)("inlineCode",{parentName:"li"},"UV_THREADPOOL_SIZE"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Clustering"),": Scales across multiple CPU cores.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Multi-process scaling"),": Forks processes to utilize all cores."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Load balancing with PM2"),": Distributes requests across processes."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Streams"),": Processes data in chunks for efficiency.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Readable/writable/transform"),": Defines stream types for data flow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Backpressure handling"),": Manages flow when consumer is slower than producer."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Piping"),": Chains streams to simplify data transfer.")))),(0,a.kt)("h2",{id:"async-service"},"Async Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/async.service.ts (**Asynchronous programming**)\nexport class AsyncService {\n  // Callback-based async method\n  fetchWithCallback(id: number, callback: (data: string) => void): void {\n    // Line 1: Use setTimeout to simulate an asynchronous I/O operation\n    setTimeout(() => {\n      // Line 2: Generate the data string\n      const data = `Callback Data ${id}`;\n      // Line 3: Call the provided callback with the result\n      callback(data);\n      // Line 4: Log the completion for tracking\n      console.log("Callback executed:", data);\n    }, 1000); // 1-second delay\n  }\n\n  // Promise-based async method\n  fetchWithPromise(id: number): Promise<string> {\n    // Line 1: Create and return a new Promise\n    return new Promise((resolve) => {\n      // Line 2: Use setTimeout to simulate delay\n      setTimeout(() => {\n        // Line 3: Generate the data string\n        const data = `Promise Data ${id}`;\n        // Line 4: Resolve the Promise with the data\n        resolve(data);\n        // Line 5: Log the resolution for debugging\n        console.log("Promise resolved:", data);\n      }, 1000); // 1-second delay\n    });\n  }\n\n  // Async/await wrapper method\n  async fetchData(id: number): Promise<string> {\n    // Line 1: Await the Promise-based method to get the data\n    const data = await this.fetchWithPromise(id);\n    // Line 2: Log the result after awaiting\n    console.log("Async/await completed:", data);\n    // Line 3: Return the data\n    return data;\n  }\n}\n')),(0,a.kt)("h2",{id:"worker-service"},"Worker Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/worker.service.ts (**Worker threads**)\nimport { Worker } from "worker_threads";\n\nexport class WorkerService {\n  // Run CPU-intensive task in a worker thread\n  async computeHeavyTask(data: number): Promise<number> {\n    // Line 1: Return a new Promise to handle the worker\'s async result\n    return new Promise((resolve, reject) => {\n      // Line 2: Create a new Worker with an inline script\n      const worker = new Worker(\n        `\n        const { parentPort } = require(\'worker_threads\');\n        const data = ${data};\n        let result = data;\n        // Line 3: Perform a CPU-intensive loop\n        for (let i = 0; i < 1000000; i++) result += i;\n        // Line 4: Send the result back to the main thread\n        parentPort.postMessage(result);\n      `,\n        { eval: true }\n      );\n      // Line 5: Listen for the worker\'s message with the result\n      worker.on("message", (result) => {\n        console.log("Worker completed with result:", result);\n        resolve(result);\n      });\n      // Line 6: Handle any errors from the worker\n      worker.on("error", (error) => {\n        console.error("Worker error:", error);\n        reject(error);\n      });\n    });\n  }\n}\n\n// **Thread Pool Configuration**:\n// - **Default Size**: 4 threads (UV_THREADPOOL_SIZE=4), used for I/O tasks like file reads.\n// - **Adjustment**: Set via environment variable, e.g., `export UV_THREADPOOL_SIZE=8`.\n// - **Purpose**: Workers use this pool for I/O, but CPU tasks (like above) run in separate threads.\n')),(0,a.kt)("h2",{id:"cluster-service"},"Cluster Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/cluster.service.ts (**Clustering**)\nimport * as cluster from "cluster";\nimport { cpus } from "os";\n\nexport class ClusterService {\n  // Start clustering across CPU cores\n  startCluster(): void {\n    // Line 1: Check if the current process is the master process\n    if (cluster.isMaster) {\n      // Line 2: Log the master process ID\n      console.log(`Master ${process.pid} started`);\n      // Line 3: Determine the number of CPU cores available\n      const numCPUs = cpus().length;\n      // Line 4: Fork a worker process for each CPU core\n      for (let i = 0; i < numCPUs; i++) {\n        cluster.fork();\n      }\n      // Line 5: Listen for worker exit events to restart them if needed\n      cluster.on("exit", (worker) => {\n        console.log(`Worker ${worker.process.pid} exited`);\n        cluster.fork(); // Restart the worker\n      });\n    } else {\n      // Line 6: Log the worker process ID\n      console.log(`Worker ${process.pid} started`);\n    }\n  }\n}\n\n// **Load Balancing with PM2**:\n// - **Command**: `pm2 start app.js -i max` forks workers based on CPU cores.\n// - **Purpose**: Distributes incoming requests across workers for load balancing.\n')),(0,a.kt)("h2",{id:"stream-service"},"Stream Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/perf/stream.service.ts (**Streams**)\nimport { createReadStream } from "fs";\n\nexport class StreamService {\n  // Stream a file with detailed handling\n  async streamFile(filePath: string): Promise<void> {\n    // Line 1: Create a readable stream from the specified file\n    const stream = createReadStream(filePath);\n    // Line 2: Pipe the stream to stdout as a writable destination\n    stream.pipe(process.stdout);\n    // Line 3: Handle data events to process chunks as they arrive\n    stream.on("data", (chunk: Buffer) => {\n      console.log("Received chunk of size:", chunk.length);\n    });\n    // Line 4: Handle the end event when streaming is complete\n    stream.on("end", () => {\n      console.log("Stream completed");\n    });\n    // Line 5: Handle backpressure with the drain event\n    stream.on("drain", () => {\n      console.log("Backpressure drained, consumer caught up");\n    });\n    // Line 6: Handle errors such as file not found\n    stream.on("error", (err) => {\n      console.error("Stream error:", err.message);\n    });\n    // Line 7: Return a Promise that resolves when streaming ends\n    return new Promise((resolve) => stream.on("end", resolve));\n  }\n}\n\n// **Streams Details**:\n// - **Readable**: Source of data (e.g., file read stream).\n// - **Writable**: Destination of data (e.g., process.stdout).\n// - **Transform**: Modifies data mid-stream (not used here).\n// - **Backpressure**: Occurs when the writable destination can\'t keep up; stream pauses until drained.\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"scope-details"},"Scope Details"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Global Scope"),": Variables declared outside any function or module, attached to the ",(0,a.kt)("inlineCode",{parentName:"li"},"global")," object in Node.js. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"global.myVar = 1;")," - accessible everywhere but risks namespace pollution.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Issue"),": Overuse can lead to naming conflicts and unintended side effects."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Closure Scope"),": Variables captured by nested functions, retaining access even after the outer function completes. Example:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function outer() {\n  const x = 1;\n  return function inner() {\n    return x; // `x` is in closure scope\n  };\n}\nconst fn = outer();\nconsole.log(fn()); // 1\n")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use"),": Preserves state in callbacks or async operations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Module Scope"),": Variables defined within a module file, private by default unless exported (via ",(0,a.kt)("inlineCode",{parentName:"li"},"module.exports")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"export"),"). Example:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const secret = "hidden"; // Module scope\nexports.reveal = () => "revealed";\n')),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Benefit"),": Encapsulation prevents global pollution."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Function Scope"),": Variables declared with ",(0,a.kt)("inlineCode",{parentName:"li"},"var")," inside a function, scoped to that function (pre-ES6). Example:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function test() {\n  var x = 1; // Function scope\n  if (true) {\n    var y = 2; // Still function scope, not block\n  }\n  console.log(x, y); // 1, 2\n}\n")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Issue"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"var")," hoisting can cause confusion."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Block Scope"),": Variables declared with ",(0,a.kt)("inlineCode",{parentName:"li"},"let")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," inside ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")," blocks (ES6+). Example:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"if (true) {\n  let x = 1; // Block scope\n  const y = 2; // Block scope\n}\nconsole.log(x); // ReferenceError: x is not defined\n")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Benefit"),": Prevents leakage outside intended scope.")))))}u.isMDXComponent=!0}}]);