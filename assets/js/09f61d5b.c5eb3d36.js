"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6630],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=l.createContext({}),u=function(e){var n=l.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return l.createElement(o.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},h=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=r,d=p["".concat(o,".").concat(h)]||p[h]||m[h]||a;return t?l.createElement(d,i(i({ref:n},c),{},{components:t})):l.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var l=t(7462),r=(t(7294),t(3905));const a={title:"Syntax"},i=void 0,s={unversionedId:"programming/rust/syntax",id:"programming/rust/syntax",title:"Syntax",description:"Data Types",source:"@site/docs/programming/rust/syntax.md",sourceDirName:"programming/rust",slug:"/programming/rust/syntax",permalink:"/docs/programming/rust/syntax",draft:!1,tags:[],version:"current",frontMatter:{title:"Syntax"},sidebar:"programming",previous:{title:"Nest.js Providers",permalink:"/docs/programming/nodejs/nestjs-providers"}},o={},u=[{value:"Data Types",id:"data-types",level:2},{value:"Variables",id:"variables",level:3},{value:"Log",id:"log",level:3},{value:"Comments",id:"comments",level:3},{value:"Numeric Types &amp; Basic Arithmetic",id:"numeric-types--basic-arithmetic",level:3},{value:"Enums",id:"enums",level:3},{value:"Structs",id:"structs",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Option Type",id:"option-type",level:3},{value:"Result Type",id:"result-type",level:3},{value:"Basic Closures",id:"basic-closures",level:3},{value:"Control Flow",id:"control-flow",level:2},{value:"If else",id:"if-else",level:3},{value:"Match Epxression",id:"match-epxression",level:3},{value:"If let else",id:"if-let-else",level:3},{value:"Loop",id:"loop",level:2},{value:"Loop",id:"loop-1",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"For Loop",id:"for-loop",level:3},{value:"While let",id:"while-let",level:3},{value:"Collections",id:"collections",level:2},{value:"The Vector",id:"the-vector",level:3},{value:"Array",id:"array",level:3},{value:"Strings",id:"strings",level:3},{value:"Slices",id:"slices",level:3},{value:"Map combinator",id:"map-combinator",level:3},{value:"Using Iterators",id:"using-iterators",level:3},{value:"Ranges",id:"ranges",level:3},{value:"HashMap Data Structure",id:"hashmap-data-structure",level:3},{value:"Module",id:"module",level:2},{value:"Inline modules",id:"inline-modules",level:3},{value:"External Crates",id:"external-crates",level:3},{value:"External Modules",id:"external-modules",level:3},{value:"Functions",id:"functions",level:2},{value:"Macros",id:"macros",level:3},{value:"Functions",id:"functions-1",level:3},{value:"Implementing Functionality",id:"implementing-functionality",level:3},{value:"Generics &amp; Functions",id:"generics--functions",level:3},{value:"Ownership",id:"ownership",level:2},{value:"Ownership &amp; Lifetimes",id:"ownership--lifetimes",level:3},{value:"Smart Pointer",id:"smart-pointer",level:3},{value:"Traits",id:"traits",level:2},{value:"Implementing the Default trait",id:"implementing-the-default-trait",level:3},{value:"Trait Objects",id:"trait-objects",level:3},{value:"Other",id:"other",level:2},{value:"Customer Error Types",id:"customer-error-types",level:3},{value:"Testing",id:"testing",level:3},{value:"Gathering User Input",id:"gathering-user-input",level:3},{value:"Concurrency",id:"concurrency",level:2},{value:"Thread",id:"thread",level:3},{value:"Channels",id:"channels",level:3},{value:"Mutex",id:"mutex",level:3}],c={toc:u},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"data-types"},"Data Types"),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut mutable = 12; // Mutable `i32`.\nmutable = 21;\nlet logical: bool = true; // Default is immutable\nlet a_float: f64 = 1.0;  // Regular annotation\nlet an_integer   = 5i32; // Suffix annotation\nlet max = u32::MAX;\n\nlet num: i32 = 10;\nlet num_u64: u64 = num as u64;\n")),(0,r.kt)("h3",{id:"log"},"Log"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'println!("Logging info to console");\n')),(0,r.kt)("h3",{id:"comments"},"Comments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// This is a single line comment.\n/* This is a\n   multiline comment. */\n")),(0,r.kt)("h3",{id:"numeric-types--basic-arithmetic"},"Numeric Types & Basic Arithmetic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let sum = 5 + 10; // addition\nlet difference = 95.5 - 4.3; // subtraction\nlet product = 4 * 30; // multiplication\nlet quotient = 56.7 / 32.2; // division\nlet remainder = 43 % 5; // modulus\n\nlet x = 5;\nlet y = {\n    let x_squared = x * x;\n    x_squared + 1\n};\n")),(0,r.kt)("h3",{id:"enums"},"Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n")),(0,r.kt)("h3",{id:"structs"},"Structs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct Person {\n    name: String,\n    age: u8,\n}\n")),(0,r.kt)("h3",{id:"tuples"},"Tuples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memory: Stack")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let tuple: (i32, f64, u8) = (500, 6.4, 1);\n")),(0,r.kt)("h3",{id:"option-type"},"Option Type"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Option<T>")," l\xe0 m\u1ed9t enum cho ph\xe9p bi\u1ec3u di\u1ec5n s\u1ef1 c\xf3 m\u1eb7t (Some) ho\u1eb7c v\u1eafng m\u1eb7t (None) c\u1ee7a m\u1ed9t gi\xe1 tr\u1ecb, gi\xfap x\u1eed l\xfd t\xecnh hu\u1ed1ng gi\xe1 tr\u1ecb c\xf3 th\u1ec3 kh\xf4ng t\u1ed3n t\u1ea1i m\xe0 kh\xf4ng d\xf9ng \u0111\u1ebfn gi\xe1 tr\u1ecb null."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n    if denominator == 0.0 {\n        None\n    } else {\n        Some(numerator / denominator)\n    }\n}\n")),(0,r.kt)("h3",{id:"result-type"},"Result Type"),(0,r.kt)("p",null,"Result<T, E> l\xe0 m\u1ed9t enum d\xf9ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n th\xe0nh c\xf4ng (Ok) ho\u1eb7c l\u1ed7i (Err), th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong x\u1eed l\xfd l\u1ed7i."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn divide_result(numerator: f64, denominator: f64) -> Result<f64, String> {\n    if denominator == 0.0 {\n        Err(String::from("Cannot divide by zero"))\n    } else {\n        Ok(numerator / denominator)\n    }\n}\n')),(0,r.kt)("h3",{id:"basic-closures"},"Basic Closures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let add_one = |x: i32| x + 1;\n    println!("The result of adding one: {}", add_one(5));\n}\n')),(0,r.kt)("h2",{id:"control-flow"},"Control Flow"),(0,r.kt)("h3",{id:"if-else"},"If else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'if 1 == 2 {\n    println!("That\'s odd!");\n} else {\n    println!("That\'s right!");\n}\n')),(0,r.kt)("h3",{id:"match-epxression"},"Match Epxression"),(0,r.kt)("p",null,"Trong Rust, match expression l\xe0 m\u1ed9t c\u1ea5u tr\xfac \u0111i\u1ec1u khi\u1ec3n m\u1ea1nh m\u1ebd cho ph\xe9p b\u1ea1n so s\xe1nh m\u1ed9t gi\xe1 tr\u1ecb v\u1edbi m\u1ed9t lo\u1ea1t c\xe1c m\u1eabu (patterns). N\xf3 t\u01b0\u01a1ng t\u1ef1 nh\u01b0 switch-case trong c\xe1c ng\xf4n ng\u1eef kh\xe1c nh\u01b0 C ho\u1eb7c Java, nh\u01b0ng m\u1ea1nh m\u1ebd v\xe0 linh ho\u1ea1t h\u01a1n nhi\u1ec1u. match cho ph\xe9p b\u1ea1n kh\xf4ng ch\u1ec9 so s\xe1nh gi\xe1 tr\u1ecb v\u1edbi c\xe1c h\u1eb1ng s\u1ed1 m\xe0 c\xf2n v\u1edbi c\xe1c c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p, cho ph\xe9p destructuring (ph\xe2n r\xe3) c\xe1c gi\xe1 tr\u1ecb v\xe0 th\u1eadm ch\xed l\xe0 k\u1ebft h\u1ee3p v\u1edbi c\xe1c guard conditions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let number = 13;\nmatch number {\n    1 => println!("One!"),\n    2 | 3 | 5 | 7 | 11 => println!("This is a prime"),\n    13..=19 => println!("A teen"),\n    _ => println!("Ain\'t special"),\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'enum HttpMethod {\n    GET,\n    POST,\n    PUT,\n    DELETE,\n}\n\nfn match_http_method(method: HttpMethod) {\n    match method {\n        HttpMethod::GET => println!("fetch data"),\n        HttpMethod::POST => println!("submit data"),\n        HttpMethod::PUT => println!("update data"),\n        HttpMethod::DELETE => println!("delete data"),\n    }\n}\n')),(0,r.kt)("h3",{id:"if-let-else"},"If let else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let option = Some(7);\n\nif let Some(i) = option {\n    println!("Matched: {}", i);\n} else {\n    println!("Didn\'t match a number");\n}\n')),(0,r.kt)("h2",{id:"loop"},"Loop"),(0,r.kt)("h3",{id:"loop-1"},"Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut count = 0;\nloop {\n    count += 1;\n    if count == 5 {\n        println!("Reached five");\n        break;\n    }\n}\n')),(0,r.kt)("h3",{id:"while-loop"},"While Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut number = 3;\nwhile number != 0 {\n    println!("{}!", number);\n    number -= 1;\n}\nprintln!("LIFTOFF!!!");\n')),(0,r.kt)("h3",{id:"for-loop"},"For Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'for i in 0..5 {\n    println!("{} times repetition", i);\n}\n')),(0,r.kt)("h3",{id:"while-let"},"While let"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut stack = Vec::new();\n\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\nwhile let Some(top) = stack.pop() {\n    println!("{}", top);\n}\n')),(0,r.kt)("h2",{id:"collections"},"Collections"),(0,r.kt)("h3",{id:"the-vector"},"The Vector"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Data Structure")),(0,r.kt)("p",null,"Memory: Heap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let v: Vec<i32> = Vec::new();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vector For Loops")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let v = vec![10, 20, 30, 40, 50];\nfor i in &v {\n    println!("{}", i);\n}\nfor element in vec.iter() {\n    println!("Gi\xe1 tr\u1ecb l\xe0: {}", element);\n}\n')),(0,r.kt)("h3",{id:"array"},"Array"),(0,r.kt)("p",null,"Memory: Stack"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let arr = [10, 20, 30, 40, 50];\n\nfor element in arr.iter() {\n    println!("Gi\xe1 tr\u1ecb l\xe0: {}", element);\n}\n')),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("p",null,"Memory: Heap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let s: String = String::from("hello");\n')),(0,r.kt)("h3",{id:"slices"},"Slices"),(0,r.kt)("p",null,"Trong Rust, slices l\xe0 m\u1ed9t lo\u1ea1i d\u1eef li\u1ec7u cho ph\xe9p b\u1ea1n tham chi\u1ebfu m\u1ed9t ph\u1ea7n ho\u1eb7c to\xe0n b\u1ed9 d\xe3y li\xean t\u1ee5c c\u1ee7a m\u1ed9t collection nh\u01b0 m\u1ed9t m\u1ea3ng ho\u1eb7c m\u1ed9t vector, m\xe0 kh\xf4ng s\u1edf h\u1eefu collection \u0111\xf3. Slices l\xe0 m\u1ed9t c\xe1ch h\u1eefu \xedch \u0111\u1ec3 truy c\u1eadp v\xe0o m\u1ed9t d\xe3y c\xe1c ph\u1ea7n t\u1eed m\xe0 kh\xf4ng c\u1ea7n copy ch\xfang, gi\xfap t\u0103ng hi\u1ec7u su\u1ea5t v\xe0 gi\u1ea3m b\u1ed9 nh\u1edb s\u1eed d\u1ee5ng."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let s = String::from("Hello, world!");\n\n// L\u1ea5y m\u1ed9t slice t\u1eeb k\xfd t\u1ef1 th\u1ee9 nh\u1ea5t \u0111\u1ebfn k\xfd t\u1ef1 th\u1ee9 n\u0103m\nlet slice = &s[0..5];\n\nprintln!("{}", slice); // "Hello"\n')),(0,r.kt)("h3",{id:"map-combinator"},"Map combinator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let a = Some(5);\nlet b: Option<i32> = a.map(|v| v * 2);\n\nprintln!("{:?}", b); // Prints: Some(10)\n')),(0,r.kt)("h3",{id:"using-iterators"},"Using Iterators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let numbers = vec![1, 2, 3, 4, 5];\nlet doubled: Vec<i32> = numbers.iter().map(|x| x * 2).collect();\n\nprintln!("{:?}", doubled);\n')),(0,r.kt)("h3",{id:"ranges"},"Ranges"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'for i in 1..5 {\n    println!("{}", i); // Prints numbers 1 to 4\n}\n')),(0,r.kt)("h3",{id:"hashmap-data-structure"},"HashMap Data Structure"),(0,r.kt)("p",null,"HashMap<K, V> l\xe0 m\u1ed9t c\u1ea5u tr\xfac d\u1eef li\u1ec7u cho ph\xe9p l\u01b0u tr\u1eef d\u1eef li\u1ec7u d\u01b0\u1edbi d\u1ea1ng c\u1eb7p kh\xf3a-gi\xe1 tr\u1ecb, n\u01a1i m\u1ed7i kh\xf3a l\xe0 duy nh\u1ea5t."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::collections::HashMap;\n\nfn main() {\n    let mut book_reviews = HashMap::new();\n\n    book_reviews.insert("Rust Book", "Excellent resource for Rustaceans.");\n\n    println!("{:?}", book_reviews);\n}\n')),(0,r.kt)("h2",{id:"module"},"Module"),(0,r.kt)("h3",{id:"inline-modules"},"Inline modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'mod my_module {\n    pub fn say_hello() {\n        println!("Hello, Rustacean!");\n    }\n}\n\nfn main() {\n    my_module::say_hello();\n}\n')),(0,r.kt)("h3",{id:"external-crates"},"External Crates"),(0,r.kt)("p",null,"Cargo.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nrand = "0.8.0"\n')),(0,r.kt)("h3",{id:"external-modules"},"External Modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// greetings/mod.rs\npub mod english;\npub mod vietnamese;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// greetings/english.rs\npub fn hello() -> String {\n    "Hello".to_string()\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// greetings/vietnamese.rs\npub fn hello() -> String {\n    "Xin ch\xe0o".to_string()\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// my_module.rs\n// main.rs\nmod greetings;\n\nfn main() {\n    println!("{}", greetings::english::hello());\n    println!("{}", greetings::vietnamese::hello());\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use greetings::english;\nuse greetings::vietnamese;\n\nfn main() {\n    println!("{}", english::hello());\n    println!("{}", vietnamese::hello());\n}\n')),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"macros"},"Macros"),(0,r.kt)("p",null,"Macros trong Rust cho ph\xe9p b\u1ea1n vi\u1ebft code c\xf3 th\u1ec3 vi\u1ebft code kh\xe1c (metaprogramming), cho ph\xe9p t\xe1i s\u1eed d\u1ee5ng code m\u1ed9t c\xe1ch linh ho\u1ea1t."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'macro_rules! say_hello {\n    () => {\n        println!("Hello");\n    };\n}\n\nsay_hello!();\n')),(0,r.kt)("h3",{id:"functions-1"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn greet(name: &str) {\n    println!("Hello, {}!", name);\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn function(i: i32) -> i32 { i + 1 }\n")),(0,r.kt)("h3",{id:"implementing-functionality"},"Implementing Functionality"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'struct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    // Ph\u01b0\u01a1ng th\u1ee9c n\xe0y s\u1ebd tr\u1ea3 v\u1ec1 di\u1ec7n t\xedch c\u1ee7a h\xecnh ch\u1eef nh\u1eadt\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    // Ph\u01b0\u01a1ng th\u1ee9c n\xe0y ki\u1ec3m tra xem h\xecnh ch\u1eef nh\u1eadt n\xe0y c\xf3 th\u1ec3 ch\u1ee9a m\u1ed9t h\xecnh ch\u1eef nh\u1eadt kh\xe1c hay kh\xf4ng\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n\n    // H\xe0m li\xean k\u1ebft (associated function) kh\xf4ng l\u1ea5y `self` l\xe0m tham s\u1ed1 \u0111\u1ea7u v\xe0o\n    // C\xf3 th\u1ec3 g\u1ecdi n\xf3 b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng c\xfa ph\xe1p `::`\n    fn square(size: u32) -> Rectangle {\n        Rectangle { width: size, height: size }\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle { width: 30, height: 50 };\n    let rect2 = Rectangle { width: 10, height: 40 };\n    let square = Rectangle::square(10);\n\n    println!("Di\u1ec7n t\xedch h\xecnh ch\u1eef nh\u1eadt l\xe0: {}", rect1.area());\n    println!("rect1 c\xf3 th\u1ec3 ch\u1ee9a rect2? {}", rect1.can_hold(&rect2));\n    println!("K\xedch th\u01b0\u1edbc c\u1ee7a square l\xe0: {} x {}", square.width, square.height);\n}\n')),(0,r.kt)("h3",{id:"generics--functions"},"Generics & Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn largest<T: PartialOrd>(list: &[T]) -> &T {\n    let mut largest = &list[0];\n\n    for item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let numbers = vec![34, 50, 25, 100, 65];\n    let result = largest(&numbers);\n    println!(\"The largest number is {}\", result);\n\n    let chars = vec!['y', 'm', 'a', 'q'];\n    let result = largest(&chars);\n    println!(\"The largest char is {}\", result);\n}\n")),(0,r.kt)("h2",{id:"ownership"},"Ownership"),(0,r.kt)("h3",{id:"ownership--lifetimes"},"Ownership & Lifetimes"),(0,r.kt)("p",null,"Lifetime 'a \u0111\u1ea3m b\u1ea3o r\u1eb1ng d\u1eef li\u1ec7u m\xe0 tham chi\u1ebfu tr\u1ecf t\u1edbi kh\xf4ng b\u1ecb gi\u1ea3i ph\xf3ng tr\u01b0\u1edbc khi tham chi\u1ebfu k\u1ebft th\xfac. Rust y\xeau c\u1ea7u b\u1ea1n ph\u1ea3i x\xe1c \u0111\u1ecbnh lifetimes khi tham chi\u1ebfu c\xf3 th\u1ec3 s\u1ed1ng l\xe2u h\u01a1n d\u1eef li\u1ec7u ch\xfang tr\u1ecf t\u1edbi."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let string1 = String::from("long string is long");\n    {\n        let string2 = String::from("xyz");\n        let result = longest(string1.as_str(), string2.as_str());\n        println!("The longest string is {}", result);\n    }\n}\n\nfn longest<\'a>(x: &\'a str, y: &\'a str) -> &\'a str {\n    if x.len() > y.len() { x } else { y }\n}\n')),(0,r.kt)("h3",{id:"smart-pointer"},"Smart Pointer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\n\nlet five = Rc::new(5);\nlet five2 = five.clone();\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Rc<T>")," l\xe0 m\u1ed9t smart pointer cho ph\xe9p nhi\u1ec1u ownership tr\xean heap, s\u1eed d\u1ee5ng reference counting \u0111\u1ec3 qu\u1ea3n l\xfd b\u1ed9 nh\u1edb."),(0,r.kt)("h2",{id:"traits"},"Traits"),(0,r.kt)("p",null,"Trong Rust, trait l\xe0 m\u1ed9t c\xe1ch \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a c\xe1c h\xe0nh vi (ch\u1ee9c n\u0103ng) m\xe0 c\xe1c ki\u1ec3u d\u1eef li\u1ec7u kh\xe1c nhau c\xf3 th\u1ec3 chia s\u1ebb. N\xf3 t\u01b0\u01a1ng t\u1ef1 nh\u01b0 interface trong c\xe1c ng\xf4n ng\u1eef kh\xe1c."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'trait Speak {\n    fn speak(&self);\n}\n\nstruct Dog {\n    name: String,\n}\n\nimpl Speak for Dog {\n    fn speak(&self) {\n        println!("{} says Woof!", self.name);\n    }\n}\n\nfn main() {\n    let dog = Dog { name: String::from("Buddy") };\n    dog.speak();\n}\n')),(0,r.kt)("h3",{id:"implementing-the-default-trait"},"Implementing the Default trait"),(0,r.kt)("p",null,"Default l\xe0 m\u1ed9t trait trong Rust cho ph\xe9p \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\xe1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho m\u1ed9t ki\u1ec3u d\u1eef li\u1ec7u."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct Book {\n    title: String,\n    author: String,\n}\n\nimpl Default for Book {\n    fn default() -> Self {\n        Book {\n            title: String::from("Unknown"),\n            author: String::from("Unknown"),\n        }\n    }\n}\n\nfn main() {\n    let book = Book::default();\n    println!("{:?}", book);\n}\n')),(0,r.kt)("h3",{id:"trait-objects"},"Trait Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'trait Animal {\n    fn make_sound(&self);\n}\n\nstruct Dog;\n\nimpl Animal for Dog {\n    fn make_sound(&self) {\n        println!("Woof!");\n    }\n}\n\nfn make_animal_sound(animal: &dyn Animal) {\n    animal.make_sound();\n}\n')),(0,r.kt)("p",null,"dyn Animal l\xe0 m\u1ed9t trait object, cho ph\xe9p ch\xfang ta g\u1ecdi h\xe0m tr\xean c\xe1c ki\u1ec3u d\u1eef li\u1ec7u kh\xe1c nhau m\xe0 ch\xfang c\xf9ng tri\u1ec3n khai trait Animal. \u0110i\u1ec1u n\xe0y t\u0103ng t\xednh linh ho\u1ea1t nh\u01b0ng c\xf3 trade-off l\xe0 gi\u1ea3m hi\u1ec7u su\u1ea5t do \u0111\u1ed9ng c\u1ea5p ph\xe1t v\xe0 vtable lookup."),(0,r.kt)("h2",{id:"other"},"Other"),(0,r.kt)("h3",{id:"customer-error-types"},"Customer Error Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum MyError {\n    Io(std::io::Error),\n    Num(std::num::ParseIntError),\n}\n\nfn read_number() -> Result<i32, MyError> {\n    let mut line = String::new();\n    std::io::stdin().read_line(&mut line).map_err(MyError::Io)?;\n    let num: i32 = line.trim().parse().map_err(MyError::Num)?;\n    Ok(num)\n}\n")),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n")),(0,r.kt)("h3",{id:"gathering-user-input"},"Gathering User Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::io;\n\nfn main() {\n    let mut input = String::new();\n\n    println!("Please enter some text:");\n\n    io::stdin()\n        .read_line(&mut input)\n        .expect("Failed to read line");\n\n    println!("You typed: {}", input);\n}\n')),(0,r.kt)("h2",{id:"concurrency"},"Concurrency"),(0,r.kt)("h3",{id:"thread"},"Thread"),(0,r.kt)("p",null,"Rust cho ph\xe9p t\u1ea1o c\xe1c lu\u1ed3ng m\u1edbi s\u1eed d\u1ee5ng thread::spawn. join \u0111\u1ee3i cho lu\u1ed3ng k\u1ebft th\xfac."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\n\nlet handle = thread::spawn(|| {\n    for _ in 0..10 {\n        println!("Hello from a thread!");\n    }\n});\n\nhandle.join().unwrap();\n')),(0,r.kt)("h3",{id:"channels"},"Channels"),(0,r.kt)("p",null,"Channels trong Rust bao g\u1ed3m transmitter (tx) v\xe0 receiver (rx), cho ph\xe9p truy\u1ec1n d\u1eef li\u1ec7u gi\u1eefa c\xe1c threads."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::mpsc;\nuse std::thread;\n\nlet (tx, rx) = mpsc::channel();\n\nthread::spawn(move || {\n    tx.send(10).unwrap();\n});\n\nprintln!("Received: {}", rx.recv().unwrap());\n')),(0,r.kt)("h3",{id:"mutex"},"Mutex"),(0,r.kt)("p",null,"Mutex cho ph\xe9p truy c\u1eadp an to\xe0n \u0111\u1ebfn d\u1eef li\u1ec7u t\u1eeb nhi\u1ec1u threads b\u1eb1ng c\xe1ch \u0111\u1ea3m b\u1ea3o r\u1eb1ng ch\u1ec9 m\u1ed9t thread c\xf3 th\u1ec3 truy c\u1eadp d\u1eef li\u1ec7u t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use std::sync::Mutex;\n\nlet m = Mutex::new(5);\n\n{\n    let mut num = m.lock().unwrap();\n    *num = 6;\n}\n")))}m.isMDXComponent=!0}}]);