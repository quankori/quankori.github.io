"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[476],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"PostgreSQL"},s=void 0,i={unversionedId:"cheatsheet/database/postgresql",id:"cheatsheet/database/postgresql",title:"PostgreSQL",description:"PostgreSQL",source:"@site/docs/cheatsheet/database/postgresql.md",sourceDirName:"cheatsheet/database",slug:"/cheatsheet/database/postgresql",permalink:"/docs/cheatsheet/database/postgresql",draft:!1,tags:[],version:"current",frontMatter:{title:"PostgreSQL"},sidebar:"cheatsheet",previous:{title:"Common Concepts",permalink:"/docs/cheatsheet/database/common-concept"},next:{title:"MongoDB",permalink:"/docs/cheatsheet/database/mongodb"}},l={},p=[{value:"PostgreSQL",id:"postgresql",level:2},{value:"Key Differences",id:"key-differences",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"postgresql"},"PostgreSQL"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Overview"),": PostgreSQL is a powerful, open-source relational database system known for its robust feature set, ACID compliance, extensibility, and scalability, suitable for enterprise and complex applications."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Core features"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relational model"),": Organizes data into tables with rows and columns."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Advanced data types"),": Supports JSON, Arrays, HStore for flexible storage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensibility"),": Allows custom functions and extensions (e.g., PostGIS).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read replication"),": Master-Slave setup for read scaling.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Streaming replication"),": Physical, real-time data syncing to replicas."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Logical replication"),": Replicates specific data changes logically."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Partitioning"),": Splits large tables for horizontal scaling.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Range partitioning"),": Divides by range (e.g., dates)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"List partitioning"),": Divides by specific values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hash partitioning"),": Distributes via hash function.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Indexing"),": Speeds queries with B-Tree, GiST, GIN, or BRIN indexes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"EXPLAIN/ANALYZE"),": Analyzes query plans for optimization."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Avoid N+1 problem"),": Uses eager loading or joins to reduce queries."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Vacuum & autovacuum"),": Manages dead rows for garbage collection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection pooling"),": Optimizes connections with tools like PgBouncer.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Transactional integrity"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ACID transactions"),": Ensures reliable data operations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transaction isolation levels"),": Controls visibility of changes.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read uncommitted"),": Allows dirty reads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read committed"),": Sees committed data only."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Repeatable read"),": Prevents non-repeatable reads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Serializable"),": Highest isolation, prevents anomalies."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Locking mechanisms"),": Manages concurrency.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Row-level locks"),": Locks specific rows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Table-level locks"),": Locks entire tables."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Deadlock handling"),": Detects and resolves deadlocks.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Normalized design"),": Follows 1NF, 2NF, 3NF for data integrity."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Denormalization"),": Trades normalization for performance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Materialized views"),": Pre-computes query results for speed.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 postgres/\n\u2502   \u251c\u2500\u2500 postgres.service.ts\n\u2502   \u2514\u2500\u2500 postgres.module.ts\n\u2514\u2500\u2500 main.ts\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bash Scripts & SQL Commands"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Setup Streaming Replication (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Start master\nmkdir -p data/master\ninitdb -D data/master\necho "wal_level = replica" >> data/master/postgresql.conf\necho "host replication all 127.0.0.1/32 trust" >> data/master/pg_hba.conf\npg_ctl -D data/master -l data/master.log start\n\n# Start replica\nmkdir -p data/replica\npg_basebackup -h 127.0.0.1 -D data/replica -U postgres -R\npg_ctl -D data/replica -l data/replica.log start\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Setup PgBouncer (Bash Script)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Install PgBouncer (Ubuntu example)\nsudo apt-get install pgbouncer\necho "[databases]" > /etc/pgbouncer/pgbouncer.ini\necho "mydb = host=localhost port=5432 dbname=mydb" >> /etc/pgbouncer/pgbouncer.ini\necho "pool_mode = session" >> /etc/pgbouncer/pgbouncer.ini\npgbouncer -d /etc/pgbouncer/pgbouncer.ini\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"PostgreSQL SQL Commands"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- **Relational model**: Create table\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(50),\n  info JSONB, -- **Advanced data types**\n  tags TEXT[]\n);\n\n-- **Indexing**: B-Tree index\nCREATE INDEX idx_users_id ON users(id);\n\n-- **Partitioning**: Range partitioning\nCREATE TABLE orders (\n  id SERIAL,\n  order_date DATE\n) PARTITION BY RANGE (order_date);\nCREATE TABLE orders_2023 PARTITION OF orders FOR VALUES FROM ('2023-01-01') TO ('2023-12-31');\n\n-- **ACID transactions**: Transaction with Serializable isolation\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nINSERT INTO users (name, info) VALUES ('John', '{\"age\": 30}');\nCOMMIT;\n\n-- **EXPLAIN/ANALYZE**: Query plan\nEXPLAIN ANALYZE SELECT * FROM users WHERE id = 1;\n\n-- **Materialized views**: Pre-computed view\nCREATE MATERIALIZED VIEW user_summary AS\nSELECT name, COUNT(*) as count FROM users GROUP BY name;\nREFRESH MATERIALIZED VIEW user_summary;\n\n-- **Row-level locks**: Lock a row\nSELECT * FROM users WHERE id = 1 FOR UPDATE;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/postgres/postgres.service.ts\nimport { Injectable, OnModuleInit } from "@nestjs/common";\nimport { Pool } from "pg";\n\n@Injectable()\nexport class PostgresService implements OnModuleInit {\n  private pool = new Pool({\n    user: "postgres",\n    host: "localhost",\n    database: "mydb",\n    password: "password",\n    port: 5432,\n    max: 10, // **Connection pooling**\n  });\n\n  async onModuleInit() {\n    // **Indexing**\n    await this.pool.query(\n      "CREATE INDEX IF NOT EXISTS idx_users_id ON users(id)"\n    );\n  }\n\n  // **Relational model** & **ACID transactions**\n  async addUser(name: string, info: any) {\n    const client = await this.pool.connect();\n    try {\n      await client.query("BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ");\n      await client.query(\n        "INSERT INTO users (name, info, tags) VALUES ($1, $2, $3)",\n        [name, JSON.stringify(info), ["dev", "tech"]] // **Advanced data types**\n      );\n      await client.query("COMMIT");\n    } catch (e) {\n      await client.query("ROLLBACK");\n      throw e;\n    } finally {\n      client.release();\n    }\n  }\n\n  // **Avoid N+1 problem** with Joins\n  async getUserWithOrders(userId: number) {\n    const result = await this.pool.query(\n      "SELECT u.*, o.id AS order_id FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE u.id = $1",\n      [userId]\n    );\n    return result.rows;\n  }\n\n  // **Performance optimization**: EXPLAIN\n  async analyzeQuery() {\n    const result = await this.pool.query(\n      "EXPLAIN SELECT * FROM users WHERE id = 1"\n    );\n    return result.rows;\n  }\n}\n\n// src/postgres/postgres.module.ts\nimport { Module } from "@nestjs/common";\nimport { PostgresService } from "./postgres.service";\n\n@Module({\n  providers: [PostgresService],\n  exports: [PostgresService],\n})\nexport class PostgresModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { Module } from "@nestjs/common";\nimport { PostgresModule } from "./postgres/postgres.module";\nimport { PostgresService } from "./postgres/postgres.service";\n\n@Module({\n  imports: [PostgresModule],\n})\nexport class AppModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const postgresService = app.get(PostgresService);\n\n  // Add user (**Core features** & **Transactional integrity**)\n  await postgresService.addUser("John", { age: 30 });\n\n  // Get user with orders (**Performance optimization**)\n  console.log(await postgresService.getUserWithOrders(1));\n\n  // Analyze query (**Performance optimization**)\n  console.log(await postgresService.analyzeQuery());\n\n  await app.listen(3000);\n}\nbootstrap();\n')))),(0,r.kt)("h2",{id:"key-differences"},"Key Differences"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Core Features"),": Relational with advanced types and extensibility."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scaling"),": Replication for reads, partitioning for horizontal growth."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance Optimization"),": Indexes, query analysis, and pooling for efficiency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transactional Integrity"),": ACID with flexible isolation and locking."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Design Patterns"),": Normalization for integrity, denormalization/views for speed.")))}u.isMDXComponent=!0}}]);