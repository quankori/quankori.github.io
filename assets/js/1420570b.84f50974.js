"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={title:"Object-oriented programming"},i=void 0,l={unversionedId:"programming/concept/oop",id:"programming/concept/oop",title:"Object-oriented programming",description:"Inheritance",source:"@site/docs/programming/concept/oop.md",sourceDirName:"programming/concept",slug:"/programming/concept/oop",permalink:"/docs/programming/concept/oop",draft:!1,tags:[],version:"current",frontMatter:{title:"Object-oriented programming"},sidebar:"programming",previous:{title:"Process and Thread",permalink:"/docs/programming/concept/process-and-thread"},next:{title:"Open Systems Interconnection Reference Model",permalink:"/docs/programming/concept/osimodel"}},c={},s=[{value:"Inheritance",id:"inheritance",level:2},{value:"Polymorphism",id:"polymorphism",level:2},{value:"Abstraction",id:"abstraction",level:2},{value:"Encapsulation",id:"encapsulation",level:2}],p={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("p",null,"Reusing a function from another class through inheriting that class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'class Animal {\nvoid eat() {\n    System.out.println("eating...");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println("barking...");\n    }\n}\n\npublic class TestInheritance1 {\n    public static void main(String args[]) {\n        Dog d = new Dog();\n        d.bark();\n        d.eat();\n    }\n}\n')),(0,a.kt)("h2",{id:"polymorphism"},"Polymorphism"),(0,a.kt)("p",null,"Polymorphism at runtime is the process of calling an overridden method during the execution of a program. In this process, an overridden method is called through a reference variable of a parent class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'class Bike {\n    void run() {\n        System.out.println("running");\n    }\n}\n\npublic class Splender extends Bike {\n    void run() {\n        System.out.println("running safely with 60km");\n    }\n\n    public static void main(String args[]) {\n        Bike b = new Splender();\n        b.run();\n    }\n}\n')),(0,a.kt)("h2",{id:"abstraction"},"Abstraction"),(0,a.kt)("p",null,"Abstraction is a process of hiding the implementation details and showing only the features to the user."),(0,a.kt)("p",null,"There are two ways to achieve abstraction: using interfaces and abstract classes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Abstract")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'abstract class Bike{\n    abstract void run();\n}\n\nclass Honda4 extends Bike{\n    void run() {\n        System.out.println("running safely..");\n    }\n\n    public static void main(String args[]) {\n        Bike obj = new Honda4();\n        obj.run();\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Interface")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'interface printable {\n    void print();\n}\n\nclass A6 implements printable {\n    public void print() {\n        System.out.println("Hello");\n    }\n\n    public static void main(String args[]){\n        A6 obj = new A6();\n        obj.print();\n    }\n}\n')),(0,a.kt)("h2",{id:"encapsulation"},"Encapsulation"),(0,a.kt)("p",null,"You can create a read-only or write-only class by implementing a setter or getter method."),(0,a.kt)("p",null,"You can control the data. For example, if you want to set the value of an ID only if it's greater than 100, you can write the logic inside the setter method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class Student {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nclass Test {\n    public static void main(String[] args) {\n        Student s = new Student();\n        s.setName("Hai");\n        System.out.println(s.getName());\n    }\n}\n')))}m.isMDXComponent=!0}}]);