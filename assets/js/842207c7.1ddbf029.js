"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[485],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),k=a,d=m["".concat(l,".").concat(k)]||m[k]||u[k]||s;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={title:"Nest.js"},i=void 0,o={unversionedId:"cheatsheet/programming/nestjs",id:"cheatsheet/programming/nestjs",title:"Nest.js",description:"NestJS",source:"@site/docs/cheatsheet/programming/nestjs.md",sourceDirName:"cheatsheet/programming",slug:"/cheatsheet/programming/nestjs",permalink:"/docs/cheatsheet/programming/nestjs",draft:!1,tags:[],version:"current",frontMatter:{title:"Nest.js"},sidebar:"cheatsheet",previous:{title:"Node.js",permalink:"/docs/cheatsheet/programming/nodejs"},next:{title:"Golang",permalink:"/docs/cheatsheet/programming/golang"}},l={},p=[{value:"NestJS",id:"nestjs",level:2},{value:"Key Differences",id:"key-differences",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"nestjs"},"NestJS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),": NestJS is a progressive, TypeScript-based framework for building scalable, server-side applications on Node.js, leveraging a modular architecture, dependency injection, and a rich ecosystem for enterprise-grade solutions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Core architecture"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Module system"),": Organizes code into reusable, encapsulated units.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Modules"),": Groups related functionality."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Controllers"),": Handles HTTP requests and routing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Providers"),": Supplies injectable services and logic."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Middleware pipeline"),": Processes requests and responses.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Request/response handling"),": Manages HTTP lifecycle."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Guards & interceptors"),": Controls access and transforms data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pipes"),": Validates and transforms input data."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"TypeScript integration"),": Enhances development with type safety.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Decorators"),": Simplifies configuration and metadata."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Static typing"),": Ensures robust code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interfaces"),": Defines contracts for services.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance optimization"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Asynchronous processing"),": Leverages Node.js async capabilities.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Async/await"),": Simplifies asynchronous code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Promises"),": Manages async operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"RxJS observables"),": Handles reactive streams."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dependency injection"),": Optimizes service resolution.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scoped providers"),": Controls instance lifecycles."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Lazy loading"),": Delays module initialization."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Caching"),": Improves response times.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"In-memory cache"),": Stores data locally."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Redis integration"),": Scales caching externally."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Request optimization"),": Enhances API performance.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compression"),": Reduces response size."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Rate limiting"),": Prevents overload."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response caching"),": Reuses frequent responses.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scaling"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Horizontal scaling"),": Expands across instances.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Microservices"),": Supports TCP, Kafka, RabbitMQ."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Load balancers"),": Distributes traffic (e.g., Nginx)."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Vertical scaling"),": Boosts single-instance performance.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Optimize DI resolution"),": Reduces overhead."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Thread pool tuning"),": Leverages Node.js under the hood."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Distributed systems"),": Integrates with distributed tools.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Message brokers"),": Uses Kafka, RabbitMQ for communication."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Redis for state"),": Manages shared state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Service discovery"),": Locates services (e.g., Consul).")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ecosystem & tools"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"CLI"),": Streamlines development workflows.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Project generation"),": Creates boilerplate code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Build & serve"),": Compiles and runs apps."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Schematics"),": Generates components."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Libraries"),": Extends core functionality.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"@nestjs/core"),": Framework foundation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"@nestjs/microservices"),": Microservice support."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"@nestjs/graphql"),": GraphQL integration."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing"),": Ensures code reliability.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Jest"),": Default testing framework."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Supertest"),": API testing utility."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Unit/integration tests"),": Validates components."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Debugging & profiling"),": Analyzes runtime behavior.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Node inspector"),": Debugs with Node.js."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"VS Code debugger"),": TypeScript debugging."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Clinic.js"),": Profiles performance."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Deployment"),": Runs applications in production.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"PM2"),": Manages processes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Docker"),": Containerizes apps."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Serverless"),": Deploys to AWS Lambda.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Design patterns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dependency injection"),": Manages service dependencies."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Middleware pattern"),": Chains request handlers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Module pattern"),": Encapsulates functionality."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Decorator pattern"),": Enhances classes with metadata.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use cases"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"RESTful APIs"),": Builds scalable HTTP APIs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Microservices"),": Implements distributed systems."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"GraphQL APIs"),": Offers flexible querying."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Real-time apps"),": Uses WebSockets for live updates.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 module.service.ts\n\u251c\u2500\u2500 perf/\n\u2502   \u251c\u2500\u2500 async.service.ts\n\u2502   \u251c\u2500\u2500 cache.service.ts\n\u251c\u2500\u2500 scale/\n\u2502   \u251c\u2500\u2500 micro.service.ts\n\u251c\u2500\u2500 tools/\n\u2502   \u2514\u2500\u2500 test.service.ts\n\u251c\u2500\u2500 patterns/\n\u2502   \u2514\u2500\u2500 middleware.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bash Scripts & NestJS Commands"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Redis for Caching (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nredis-server --port 6379 --dir data/redis --daemonize yes\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Setup Docker for Deployment (Bash Script)"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Build NestJS app\nnpm run build\n# Create Dockerfile\necho "FROM node:18\nWORKDIR /app\nCOPY dist/ .\nCOPY package*.json ./\nRUN npm install --production\nCMD [\\"node\\", \\"main.js\\"]" > Dockerfile\ndocker build -t nestjs-app .\ndocker run -p 3000:3000 nestjs-app\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NestJS Commands"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Generate new project\nnest new myapp\n\n# Run with debugging\nnest start --debug\n\n# Run tests\nnpm run test\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/core/module.service.ts (**Module system**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable() // **Providers**\nexport class ModuleService {\n  getData(): string {\n    return "Module Data";\n  }\n}\n\n// src/perf/async.service.ts (**Asynchronous processing**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class AsyncService {\n  async fetchData(id: number): Promise<string> {\n    return new Promise((resolve) =>\n      setTimeout(() => resolve(`Data ${id}`), 1000)\n    ); // **Async/await**\n  }\n}\n\n// src/perf/cache.service.ts (**Caching**)\nimport { Injectable, CacheInterceptor } from "@nestjs/common";\nimport { CacheModule } from "@nestjs/cache-manager";\nimport * as redisStore from "cache-manager-redis-store";\n\n@Injectable()\n@UseInterceptors(CacheInterceptor) // **Response caching**\nexport class CacheService {\n  async getCachedData(key: string): Promise<string> {\n    return `Cached ${key}`; // Simulated with Redis in practice\n  }\n}\n\n// src/scale/micro.service.ts (**Microservices**)\nimport { Injectable } from "@nestjs/common";\nimport { ClientKafka, Transport } from "@nestjs/microservices";\n\n@Injectable()\nexport class MicroService {\n  private kafkaClient = new ClientKafka({\n    client: { brokers: ["localhost:9092"] },\n    consumer: { groupId: "micro-group" },\n  });\n\n  async sendEvent(event: string, data: any) {\n    await this.kafkaClient\n      .emit("micro_topic", { key: event, value: data })\n      .toPromise();\n    console.log("Event sent:", event, data);\n  }\n}\n\n// src/patterns/middleware.ts (**Middleware pattern**)\nimport { Injectable, NestMiddleware } from "@nestjs/common";\nimport { Request, Response, NextFunction } from "express";\n\n@Injectable()\nexport class Middleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log("Middleware executed");\n    next();\n  }\n}\n\n// src/app.module.ts\nimport { Module, MiddlewareConsumer } from "@nestjs/common";\nimport { CacheModule } from "@nestjs/cache-manager";\nimport * as redisStore from "cache-manager-redis-store";\nimport { ModuleService } from "./core/module.service";\nimport { AsyncService } from "./perf/async.service";\nimport { CacheService } from "./perf/cache.service";\nimport { MicroService } from "./scale/micro.service";\nimport { Middleware } from "./patterns/middleware";\n\n@Module({\n  imports: [\n    CacheModule.register({\n      store: redisStore,\n      host: "localhost",\n      port: 6379,\n      ttl: 3600,\n    }),\n  ],\n  providers: [\n    ModuleService,\n    AsyncService,\n    CacheService,\n    MicroService,\n    Middleware,\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(Middleware).forRoutes("*");\n  }\n}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { ModuleService } from "./core/module.service";\nimport { AsyncService } from "./perf/async.service";\nimport { CacheService } from "./perf/cache.service";\nimport { MicroService } from "./scale/micro.service";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const moduleService = app.get(ModuleService);\n  const asyncService = app.get(AsyncService);\n  const cacheService = app.get(CacheService);\n  const microService = app.get(MicroService);\n\n  // **Module system**\n  console.log(moduleService.getData());\n\n  // **Asynchronous processing**\n  console.log(await asyncService.fetchData(1));\n\n  // **Caching**\n  console.log(await cacheService.getCachedData("key"));\n\n  // **Microservices**\n  await microService.sendEvent("test_event", { id: 1 });\n\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,a.kt)("h2",{id:"key-differences"},"Key Differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Architecture"),": Modular with TypeScript and middleware focus."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance Optimization"),": Async, DI, and caching for efficiency."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling"),": Microservices and distributed tools for growth."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ecosystem & Tools"),": CLI-driven with robust libraries and testing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Design Patterns"),": DI, middleware, and decorators for structure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use Cases"),": APIs, microservices, GraphQL, and real-time apps.")))}u.isMDXComponent=!0}}]);