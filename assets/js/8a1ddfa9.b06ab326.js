"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[206],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>y});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(t),d=s,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?n.createElement(y,i(i({ref:r},p),{},{components:t})):n.createElement(y,i({ref:r},p))}));function y(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=d;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a[u]="string"==typeof e?e:s,i[1]=a;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9657:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=t(7462),s=(t(7294),t(3905));const o={title:"Monolithic Architecture"},i=void 0,a={unversionedId:"cheatsheet/system-design/monolithic",id:"cheatsheet/system-design/monolithic",title:"Monolithic Architecture",description:"Monolithic Architecture",source:"@site/docs/cheatsheet/system-design/monolithic.md",sourceDirName:"cheatsheet/system-design",slug:"/cheatsheet/system-design/monolithic",permalink:"/docs/cheatsheet/system-design/monolithic",draft:!1,tags:[],version:"current",frontMatter:{title:"Monolithic Architecture"},sidebar:"cheatsheet",previous:{title:"About Me",permalink:"/docs/home"},next:{title:"Domain-Centric Architectures",permalink:"/docs/cheatsheet/system-design/domain-centric"}},l={},c=[{value:"Monolithic Architecture",id:"monolithic-architecture",level:2},{value:"Modular Monolithic Architecture",id:"modular-monolithic-architecture",level:2},{value:"Layered (N-Layer) Architecture",id:"layered-n-layer-architecture",level:2},{value:"Three-Tier Architecture",id:"three-tier-architecture",level:2},{value:"Key Differences",id:"key-differences",level:2}],p={toc:c},u="wrapper";function m(e){let{components:r,...t}=e;return(0,s.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"monolithic-architecture"},"Monolithic Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Monolithic Architecture combines all components\u2014UI, business logic, and data access\u2014into a single, tightly coupled application deployed as one unit, ideal for simplicity but less scalable as complexity grows."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Components"),": Includes all functionality (UI, logic, data) in a single codebase."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 main.ts\n\u251c\u2500\u2500 user.controller.ts\n\u2514\u2500\u2500 user.service.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/user.service.ts (**Components**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UserService {\n  getUsers() {\n    return ["John", "Jane"]; // Simulate data access\n  }\n}\n\n// src/user.controller.ts (**Components**)\nimport { Controller, Get } from "@nestjs/common";\nimport { UserService } from "./user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  getAllUsers() {\n    return this.userService.getUsers(); // UI + Logic + Data\n  }\n}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { Module } from "@nestjs/common";\nimport { UserController } from "./user.controller";\nimport { UserService } from "./user.service";\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n})\nclass AppModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"modular-monolithic-architecture"},"Modular Monolithic Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Modular Monolithic Architecture enhances the monolith by organizing code into modules based on features or domains, still deployed as a single unit but with better structure."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Modules"),": Separates functionality into distinct, reusable units within the monolith."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 users.controller.ts\n\u2502   \u251c\u2500\u2500 users.service.ts\n\u2502   \u2514\u2500\u2500 users.module.ts\n\u2514\u2500\u2500 main.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/users/users.service.ts (**Modules**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UsersService {\n  getUsers() {\n    return ["John", "Jane"];\n  }\n}\n\n// src/users/users.controller.ts (**Modules**)\nimport { Controller, Get } from "@nestjs/common";\nimport { UsersService } from "./users.service";\n\n@Controller("users")\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Get()\n  getAllUsers() {\n    return this.usersService.getUsers();\n  }\n}\n\n// src/users/users.module.ts (**Modules**)\nimport { Module } from "@nestjs/common";\nimport { UsersController } from "./users.controller";\nimport { UsersService } from "./users.service";\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { Module } from "@nestjs/common";\nimport { UsersModule } from "./users/users.module";\n\n@Module({\n  imports: [UsersModule],\n})\nclass AppModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"layered-n-layer-architecture"},"Layered (N-Layer) Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Layered Architecture divides the application into logical layers, each with a specific role, promoting separation of concerns with a top-down dependency flow, typically within a single app."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Presentation layer"),": Handles UI and user interaction."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Business logic layer"),": Contains core application logic and rules."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data access layer"),": Manages database operations."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 presentation/\n\u2502   \u2514\u2500\u2500 user.controller.ts\n\u251c\u2500\u2500 business/\n\u2502   \u2514\u2500\u2500 user.service.ts\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 user.repository.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/data/user.repository.ts (**Data access layer**)\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class UserRepository {\n  getUsers() {\n    return ["John", "Jane"]; // Simulate DB access\n  }\n}\n\n// src/business/user.service.ts (**Business logic layer**)\nimport { Injectable } from "@nestjs/common";\nimport { UserRepository } from "../data/user.repository";\n\n@Injectable()\nexport class UserService {\n  constructor(private userRepo: UserRepository) {}\n\n  getUsers() {\n    return this.userRepo.getUsers(); // Business logic\n  }\n}\n\n// src/presentation/user.controller.ts (**Presentation layer**)\nimport { Controller, Get } from "@nestjs/common";\nimport { UserService } from "../business/user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  getAllUsers() {\n    return this.userService.getUsers(); // UI layer\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserController } from "./presentation/user.controller";\nimport { UserService } from "./business/user.service";\nimport { UserRepository } from "./data/user.repository";\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, UserRepository],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"three-tier-architecture"},"Three-Tier Architecture"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Overview"),": Three-Tier Architecture separates the application into three physical or logical tiers\u2014presentation, application, and data\u2014designed for scalability and deployment flexibility across servers."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Presentation tier"),": Client-facing layer (e.g., browser or app)."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Application tier"),": Processes business logic and coordinates tasks."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data tier"),": Stores and retrieves data (e.g., database)."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Source Tree"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 presentation/\n\u2502   \u2514\u2500\u2500 user.controller.ts\n\u251c\u2500\u2500 application/\n\u2502   \u2514\u2500\u2500 user.service.ts\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 user.entity.ts\n\u2502   \u2514\u2500\u2500 user.repository.ts\n\u2514\u2500\u2500 app.module.ts\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'// src/data/user.entity.ts (**Data tier** - Simulated DB)\nexport class User {\n  constructor(public id: number, public name: string) {}\n}\n\n// src/data/user.repository.ts (**Data tier**)\nimport { Injectable } from "@nestjs/common";\nimport { User } from "./user.entity";\n\n@Injectable()\nexport class UserRepository {\n  private users: User[] = [new User(1, "John"), new User(2, "Jane")];\n\n  findAll(): User[] {\n    return this.users; // Simulate DB query\n  }\n}\n\n// src/application/user.service.ts (**Application tier**)\nimport { Injectable } from "@nestjs/common";\nimport { UserRepository } from "../data/user.repository";\n\n@Injectable()\nexport class UserService {\n  constructor(private userRepo: UserRepository) {}\n\n  getUsers() {\n    return this.userRepo.findAll(); // Logic processing\n  }\n}\n\n// src/presentation/user.controller.ts (**Presentation tier**)\nimport { Controller, Get } from "@nestjs/common";\nimport { UserService } from "../application/user.service";\n\n@Controller("users")\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  getAllUsers() {\n    return this.userService.getUsers(); // API response\n  }\n}\n\n// src/app.module.ts\nimport { Module } from "@nestjs/common";\nimport { UserController } from "./presentation/user.controller";\nimport { UserService } from "./application/user.service";\nimport { UserRepository } from "./data/user.repository";\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, UserRepository],\n})\nexport class AppModule {}\n\n// src/main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"key-differences"},"Key Differences"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Monolithic: Everything in one unit, simple but rigid."),(0,s.kt)("li",{parentName:"ul"},"Modular Monolithic: Still one unit, but split into modules for better organization."),(0,s.kt)("li",{parentName:"ul"},"Layered (N-Layer): Logical separation into layers, top-down flow, single app."),(0,s.kt)("li",{parentName:"ul"},"Three-Tier: Physical/logical separation into tiers, scalable across servers.")))}m.isMDXComponent=!0}}]);