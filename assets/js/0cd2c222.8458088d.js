"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[132],{3905:(n,t,e)=>{e.d(t,{Zo:()=>o,kt:()=>g});var a=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,a,r=function(n,t){if(null==n)return{};var e,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var h=a.createContext({}),c=function(n){var t=a.useContext(h),e=t;return n&&(e="function"==typeof n?n(t):l(l({},t),n)),e},o=function(n){var t=c(n.components);return a.createElement(h.Provider,{value:t},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,i=n.originalType,h=n.parentName,o=u(n,["components","mdxType","originalType","parentName"]),p=c(e),k=r,g=p["".concat(h,".").concat(k)]||p[k]||m[k]||i;return e?a.createElement(g,l(l({ref:t},o),{},{components:e})):a.createElement(g,l({ref:t},o))}));function g(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var i=e.length,l=new Array(i);l[0]=k;var u={};for(var h in t)hasOwnProperty.call(t,h)&&(u[h]=t[h]);u.originalType=n,u[p]="string"==typeof n?n:r,l[1]=u;for(var c=2;c<i;c++)l[c]=e[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,e)}k.displayName="MDXCreateElement"},3340:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=e(7462),r=(e(7294),e(3905));const i={title:"Message Queue"},l=void 0,u={unversionedId:"blog/programming/message-queue",id:"blog/programming/message-queue",title:"Message Queue",description:"Ki\u1ebfn Tr\xfac C\u1ed1t L\xf5i",source:"@site/docs/blog/programming/message-queue.md",sourceDirName:"blog/programming",slug:"/blog/programming/message-queue",permalink:"/blog/programming/message-queue",draft:!1,tags:[],version:"current",frontMatter:{title:"Message Queue"},sidebar:"blog",previous:{title:"Golang",permalink:"/blog/programming/golang"},next:{title:"Redis",permalink:"/blog/programming/redis"}},h={},c=[{value:"Ki\u1ebfn Tr\xfac C\u1ed1t L\xf5i",id:"ki\u1ebfn-tr\xfac-c\u1ed1t-l\xf5i",level:2},{value:"Apache Kafka: N\u1ec1n T\u1ea3ng Truy\u1ec1n D\u1eef Li\u1ec7u Ph\xe2n T\xe1n (Distributed Streaming Platform)",id:"apache-kafka-n\u1ec1n-t\u1ea3ng-truy\u1ec1n-d\u1eef-li\u1ec7u-ph\xe2n-t\xe1n-distributed-streaming-platform",level:4},{value:"RabbitMQ: Message Broker Truy\u1ec1n Th\u1ed1ng (AMQP)",id:"rabbitmq-message-broker-truy\u1ec1n-th\u1ed1ng-amqp",level:4},{value:"So S\xe1nh Chi Ti\u1ebft",id:"so-s\xe1nh-chi-ti\u1ebft",level:2},{value:"X\u1eed L\xfd T\u1ea3i Cao (H\xe0ng Ng\xe0n Request/gi\xe2y)",id:"x\u1eed-l\xfd-t\u1ea3i-cao-h\xe0ng-ng\xe0n-requestgi\xe2y",level:2},{value:"Kafka",id:"kafka",level:4},{value:"RabbitMQ",id:"rabbitmq",level:4},{value:"H\xecnh Dung C\u1ea5u Tr\xfac v\xe0 Kh\u1ea3 N\u0103ng M\u1edf R\u1ed9ng (Visualization)",id:"h\xecnh-dung-c\u1ea5u-tr\xfac-v\xe0-kh\u1ea3-n\u0103ng-m\u1edf-r\u1ed9ng-visualization",level:2},{value:"Kafka Visualization",id:"kafka-visualization",level:3},{value:"Khi Scale Out (Th\xeam Broker v\xe0 Consumer):",id:"khi-scale-out-th\xeam-broker-v\xe0-consumer",level:4},{value:"RabbitMQ Visualization",id:"rabbitmq-visualization",level:3},{value:"C\u1ea5u tr\xfac c\u01a1 b\u1ea3n (Direct Exchange):",id:"c\u1ea5u-tr\xfac-c\u01a1-b\u1ea3n-direct-exchange",level:4},{value:"C\u1ea5u tr\xfac c\u01a1 b\u1ea3n (Fanout Exchange):",id:"c\u1ea5u-tr\xfac-c\u01a1-b\u1ea3n-fanout-exchange",level:4},{value:"K\u1ef9 Thu\u1eadt T\u1ed1i \u01afu H\xf3a",id:"k\u1ef9-thu\u1eadt-t\u1ed1i-\u01b0u-h\xf3a",level:2},{value:"Kafka",id:"kafka-1",level:3},{value:"Producers:",id:"producers",level:4},{value:"Brokers:",id:"brokers",level:4},{value:"Consumers:",id:"consumers",level:4},{value:"RabbitMQ",id:"rabbitmq-1",level:3},{value:"Consumers:",id:"consumers-1",level:4},{value:"Queues:",id:"queues",level:4},{value:"Producers:",id:"producers-1",level:4},{value:"Broker:",id:"broker",level:4},{value:"Use Cases \u0110i\u1ec3n H\xecnh",id:"use-cases-\u0111i\u1ec3n-h\xecnh",level:2},{value:"Ch\u1ecdn Kafka khi:",id:"ch\u1ecdn-kafka-khi",level:4},{value:"Ch\u1ecdn RabbitMQ khi:",id:"ch\u1ecdn-rabbitmq-khi",level:4},{value:"M\xf4 H\xecnh Request/Response trong RabbitMQ",id:"m\xf4-h\xecnh-requestresponse-trong-rabbitmq",level:2}],o={toc:c},p="wrapper";function m(n){let{components:t,...e}=n;return(0,r.kt)(p,(0,a.Z)({},o,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"ki\u1ebfn-tr\xfac-c\u1ed1t-l\xf5i"},"Ki\u1ebfn Tr\xfac C\u1ed1t L\xf5i"),(0,r.kt)("h4",{id:"apache-kafka-n\u1ec1n-t\u1ea3ng-truy\u1ec1n-d\u1eef-li\u1ec7u-ph\xe2n-t\xe1n-distributed-streaming-platform"},"Apache Kafka: N\u1ec1n T\u1ea3ng Truy\u1ec1n D\u1eef Li\u1ec7u Ph\xe2n T\xe1n (Distributed Streaming Platform)"),(0,r.kt)("p",null,"Kafka kh\xf4ng ho\xe0n to\xe0n l\xe0 m\u1ed9t message queue truy\u1ec1n th\u1ed1ng. N\xf3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf nh\u01b0 m\u1ed9t log cam k\u1ebft ph\xe2n t\xe1n (distributed commit log) ho\u1eb7c m\u1ed9t n\u1ec1n t\u1ea3ng streaming."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Topics: D\u1eef li\u1ec7u trong Kafka \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\xe0nh c\xe1c topics. B\u1ea1n c\xf3 th\u1ec3 h\xecnh dung topic nh\u01b0 m\u1ed9t danh m\u1ee5c ho\u1eb7c m\u1ed9t feed m\xe0 producer g\u1eedi tin nh\u1eafn v\xe0o.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Partitions: M\u1ed7i topic \u0111\u01b0\u1ee3c chia th\xe0nh m\u1ed9t ho\u1eb7c nhi\u1ec1u partitions. Partition l\xe0 m\u1ed9t log ch\u1ec9 cho ph\xe9p ghi n\u1ed1i ti\u1ebfp (append-only log), c\xf3 th\u1ee9 t\u1ef1 v\xe0 b\u1ea5t bi\u1ebfn. Vi\u1ec7c chia partition cho ph\xe9p Kafka song song h\xf3a vi\u1ec7c x\u1eed l\xfd v\xe0 l\u01b0u tr\u1eef d\u1eef li\u1ec7u tr\xean nhi\u1ec1u m\xe1y ch\u1ee7 (brokers). Th\u1ee9 t\u1ef1 tin nh\u1eafn ch\u1ec9 \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o trong ph\u1ea1m vi m\u1ed9t partition.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Offsets: M\u1ed7i tin nh\u1eafn trong m\u1ed9t partition c\xf3 m\u1ed9t \u0111\u1ecbnh danh tu\u1ea7n t\u1ef1 duy nh\u1ea5t g\u1ecdi l\xe0 offset. Offset x\xe1c \u0111\u1ecbnh v\u1ecb tr\xed c\u1ee7a tin nh\u1eafn trong partition log.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Brokers: C\xe1c m\xe1y ch\u1ee7 Kafka \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 brokers. Ch\xfang ch\u1ecbu tr\xe1ch nhi\u1ec7m l\u01b0u tr\u1eef d\u1eef li\u1ec7u (partitions), x\u1eed l\xfd y\xeau c\u1ea7u t\u1eeb producer v\xe0 consumer. M\u1ed9t c\u1ee5m Kafka (Kafka cluster) bao g\u1ed3m nhi\u1ec1u brokers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Producers: C\xe1c \u1ee9ng d\u1ee5ng g\u1eedi (publish) tin nh\u1eafn \u0111\u1ebfn Kafka topics. Producer c\xf3 th\u1ec3 ch\u1ecdn partition c\u1ee5 th\u1ec3 \u0111\u1ec3 g\u1eedi tin nh\u1eafn \u0111\u1ebfn ho\u1eb7c \u0111\u1ec3 Kafka quy\u1ebft \u0111\u1ecbnh d\u1ef1a tr\xean key c\u1ee7a tin nh\u1eafn ho\u1eb7c theo c\u01a1 ch\u1ebf round-robin.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Consumers: C\xe1c \u1ee9ng d\u1ee5ng \u0111\u1ecdc (subscribe) tin nh\u1eafn t\u1eeb Kafka topics. Consumers th\u01b0\u1eddng thu\u1ed9c v\u1ec1 m\u1ed9t consumer group. M\u1ed7i partition ch\u1ec9 \u0111\u01b0\u1ee3c \u0111\u1ecdc b\u1edfi m\u1ed9t consumer duy nh\u1ea5t trong m\u1ed9t group t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m, cho ph\xe9p x\u1eed l\xfd song song v\xe0 c\xe2n b\u1eb1ng t\u1ea3i. Consumers t\u1ef1 qu\u1ea3n l\xfd offset c\u1ee7a tin nh\u1eafn cu\u1ed1i c\xf9ng \u0111\xe3 \u0111\u1ecdc, cho ph\xe9p ch\xfang \u0111\u1ecdc l\u1ea1i d\u1eef li\u1ec7u ho\u1eb7c b\u1eaft \u0111\u1ea7u t\u1eeb m\u1ed9t \u0111i\u1ec3m c\u1ee5 th\u1ec3.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Retention: Kafka l\u01b0u gi\u1eef tin nh\u1eafn trong m\u1ed9t kho\u1ea3ng th\u1eddi gian c\u1ea5u h\xecnh \u0111\u01b0\u1ee3c (v\xed d\u1ee5: 7 ng\xe0y) ho\u1eb7c cho \u0111\u1ebfn khi \u0111\u1ea1t k\xedch th\u01b0\u1edbc gi\u1edbi h\u1ea1n, b\u1ea5t k\u1ec3 tin nh\u1eafn \u0111\xe3 \u0111\u01b0\u1ee3c \u0111\u1ecdc hay ch\u01b0a. \u0110i\u1ec1u n\xe0y l\xe0m cho Kafka ph\xf9 h\u1ee3p v\u1edbi c\xe1c k\u1ecbch b\u1ea3n c\u1ea7n x\u1eed l\xfd l\u1ea1i d\u1eef li\u1ec7u."))),(0,r.kt)("p",null,"\u0110i\u1ec3m m\u1ea1nh c\u1ee7a Kafka: Th\xf4ng l\u01b0\u1ee3ng c\u1ef1c cao, kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng t\u1ed1t, l\u01b0u tr\u1eef b\u1ec1n v\u1eefng, ph\xf9 h\u1ee3p cho streaming data v\xe0 event sourcing."),(0,r.kt)("h4",{id:"rabbitmq-message-broker-truy\u1ec1n-th\u1ed1ng-amqp"},"RabbitMQ: Message Broker Truy\u1ec1n Th\u1ed1ng (AMQP)"),(0,r.kt)("p",null,"RabbitMQ l\xe0 m\u1ed9t message broker tr\u01b0\u1edfng th\xe0nh, tri\u1ec3n khai giao th\u1ee9c AMQP (Advanced Message Queuing Protocol) v\xe0 h\u1ed7 tr\u1ee3 c\xe1c giao th\u1ee9c kh\xe1c nh\u01b0 MQTT, STOMP."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Exchanges: Producers kh\xf4ng g\u1eedi tin nh\u1eafn tr\u1ef1c ti\u1ebfp \u0111\u1ebfn queues. Thay v\xe0o \u0111\xf3, ch\xfang g\u1eedi \u0111\u1ebfn exchanges. Exchange ch\u1ecbu tr\xe1ch nhi\u1ec7m \u0111\u1ecbnh tuy\u1ebfn (routing) tin nh\u1eafn \u0111\u1ebfn c\xe1c queues d\u1ef1a tr\xean c\xe1c quy t\u1eafc (routing keys, bindings, headers). C\xe1c lo\u1ea1i exchange ph\u1ed5 bi\u1ebfn:")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"direct: G\u1eedi tin nh\u1eafn \u0111\u1ebfn queue c\xf3 binding key kh\u1edbp ch\xednh x\xe1c v\u1edbi routing key c\u1ee7a tin nh\u1eafn.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"topic: G\u1eedi tin nh\u1eafn \u0111\u1ebfn queue c\xf3 binding pattern kh\u1edbp v\u1edbi routing key (h\u1ed7 tr\u1ee3 wildcard ","*"," v\xe0 #).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"fanout: G\u1eedi tin nh\u1eafn \u0111\u1ebfn t\u1ea5t c\u1ea3 c\xe1c queues \u0111\u01b0\u1ee3c binding v\u1edbi n\xf3, b\u1ecf qua routing key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"headers: \u0110\u1ecbnh tuy\u1ebfn d\u1ef1a tr\xean header attributes c\u1ee7a tin nh\u1eafn thay v\xec routing key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Queues: N\u01a1i l\u01b0u tr\u1eef tin nh\u1eafn ch\u1edd \u0111\u01b0\u1ee3c x\u1eed l\xfd b\u1edfi consumers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Bindings: Quy t\u1eafc li\xean k\u1ebft gi\u1eefa exchange v\xe0 queue. Binding \u0111\u1ecbnh ngh\u0129a c\xe1ch tin nh\u1eafn t\u1eeb m\u1ed9t exchange \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ebfn m\u1ed9t queue c\u1ee5 th\u1ec3.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Producers: G\u1eedi tin nh\u1eafn \u0111\u1ebfn m\u1ed9t exchange v\u1edbi m\u1ed9t routing key c\u1ee5 th\u1ec3.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Consumers: \u0110\u1ecdc tin nh\u1eafn t\u1eeb m\u1ed9t queue c\u1ee5 th\u1ec3. RabbitMQ th\u01b0\u1eddng s\u1eed d\u1ee5ng m\xf4 h\xecnh push, broker ch\u1ee7 \u0111\u1ed9ng \u0111\u1ea9y tin nh\u1eafn \u0111\u1ebfn consumer \u0111\xe3 \u0111\u0103ng k\xfd. Consumer g\u1eedi l\u1ea1i x\xe1c nh\u1eadn (acknowledgement - ack) sau khi x\u1eed l\xfd xong tin nh\u1eafn. N\u1ebfu kh\xf4ng nh\u1eadn \u0111\u01b0\u1ee3c ack, RabbitMQ s\u1ebd gi\u1eef l\u1ea1i tin nh\u1eafn (ho\u1eb7c g\u1eedi l\u1ea1i cho consumer kh\xe1c).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Message Lifecycle: Tin nh\u1eafn th\u01b0\u1eddng b\u1ecb x\xf3a kh\u1ecfi queue sau khi \u0111\u01b0\u1ee3c consumer x\u1eed l\xfd th\xe0nh c\xf4ng v\xe0 g\u1eedi ack."))),(0,r.kt)("p",null,"\u0110i\u1ec3m m\u1ea1nh c\u1ee7a RabbitMQ: \u0110\u1ecbnh tuy\u1ebfn linh ho\u1ea1t, h\u1ed7 tr\u1ee3 nhi\u1ec1u giao th\u1ee9c, \u0111\u1ea3m b\u1ea3o g\u1eedi tin nh\u1eafn (delivery guarantees), m\xf4 h\xecnh request/response d\u1ec5 tri\u1ec3n khai, ph\xf9 h\u1ee3p cho task queues v\xe0 decoupling services."),(0,r.kt)("h2",{id:"so-s\xe1nh-chi-ti\u1ebft"},"So S\xe1nh Chi Ti\u1ebft"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"T\xednh N\u0103ng"),(0,r.kt)("th",{parentName:"tr",align:null},"Kafka"),(0,r.kt)("th",{parentName:"tr",align:null},"RabbitMQ"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ki\u1ebfn tr\xfac"),(0,r.kt)("td",{parentName:"tr",align:null},"Log ph\xe2n t\xe1n (Distributed Log)"),(0,r.kt)("td",{parentName:"tr",align:null},"Message Broker (AMQP)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"M\xf4 h\xecnh Consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"Pull (Consumer k\xe9o d\u1eef li\u1ec7u)"),(0,r.kt)("td",{parentName:"tr",align:null},"Push (Broker \u0111\u1ea9y d\u1eef li\u1ec7u)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Th\u1ee9 t\u1ef1 tin nh\u1eafn"),(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u1ea3m b\u1ea3o trong ph\u1ea1m vi 1 partition"),(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u1ea3m b\u1ea3o trong ph\u1ea1m vi 1 queue (v\u1edbi 1 consumer)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"L\u01b0u tr\u1eef tin nh\u1eafn"),(0,r.kt)("td",{parentName:"tr",align:null},"D\u1ef1a tr\xean th\u1eddi gian/k\xedch th\u01b0\u1edbc (B\u1ec1n v\u1eefng)"),(0,r.kt)("td",{parentName:"tr",align:null},"D\u1ef1a tr\xean acknowledgement (Th\u01b0\u1eddng l\xe0 t\u1ea1m th\u1eddi)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Th\xf4ng l\u01b0\u1ee3ng"),(0,r.kt)("td",{parentName:"tr",align:null},"R\u1ea5t cao (Tri\u1ec7u msg/s)"),(0,r.kt)("td",{parentName:"tr",align:null},"Cao (Ch\u1ee5c \u0111\u1ebfn tr\u0103m ngh\xecn msg/s)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u1ed9 tr\u1ec5"),(0,r.kt)("td",{parentName:"tr",align:null},"Cao h\u01a1n m\u1ed9t ch\xfat (do batching)"),(0,r.kt)("td",{parentName:"tr",align:null},"Th\u1ea5p h\u01a1n (cho c\xe1c t\xe1c v\u1ee5 \u0111\u01a1n gi\u1ea3n)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u1ecbnh tuy\u1ebfn"),(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u01a1n gi\u1ea3n (Topic -> Partition)"),(0,r.kt)("td",{parentName:"tr",align:null},"R\u1ea5t linh ho\u1ea1t (Exchanges, Bindings)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Giao th\u1ee9c"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary qua TCP"),(0,r.kt)("td",{parentName:"tr",align:null},"AMQP, MQTT, STOMP")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u0110\u1ea3m b\u1ea3o g\u1eedi"),(0,r.kt)("td",{parentName:"tr",align:null},"At-least-once, Exactly-once (kh\xf3 h\u01a1n)"),(0,r.kt)("td",{parentName:"tr",align:null},"At-most-once, At-least-once, (Exactly-once kh\xf3)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tr\u01b0\u1eddng h\u1ee3p d\xf9ng"),(0,r.kt)("td",{parentName:"tr",align:null},"Streaming, Log Aggregation, Event Sourcing"),(0,r.kt)("td",{parentName:"tr",align:null},"Task Queues, RPC, Decoupling Services")))),(0,r.kt)("h2",{id:"x\u1eed-l\xfd-t\u1ea3i-cao-h\xe0ng-ng\xe0n-requestgi\xe2y"},"X\u1eed L\xfd T\u1ea3i Cao (H\xe0ng Ng\xe0n Request/gi\xe2y)"),(0,r.kt)("p",null,"C\u1ea3 hai h\u1ec7 th\u1ed1ng \u0111\u1ec1u c\xf3 th\u1ec3 x\u1eed l\xfd t\u1ea3i cao, nh\u01b0ng c\xe1ch ti\u1ebfp c\u1eadn v\xe0 \u0111i\u1ec3m ngh\u1ebdn ti\u1ec1m \u1ea9n kh\xe1c nhau."),(0,r.kt)("h4",{id:"kafka"},"Kafka"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng"),": Kafka \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 m\u1edf r\u1ed9ng theo chi\u1ec1u ngang. B\u1ea1n c\xf3 th\u1ec3 t\u0103ng th\xf4ng l\u01b0\u1ee3ng b\u1eb1ng c\xe1ch:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Th\xeam Brokers: Ph\xe2n t\xe1n t\u1ea3i l\u01b0u tr\u1eef v\xe0 x\u1eed l\xfd tr\xean nhi\u1ec1u m\xe1y ch\u1ee7 h\u01a1n.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"T\u0103ng s\u1ed1 Partitions: Cho ph\xe9p nhi\u1ec1u consumer trong m\u1ed9t group \u0111\u1ecdc song song t\u1eeb c\xf9ng m\u1ed9t topic. S\u1ed1 l\u01b0\u1ee3ng partition l\xe0 gi\u1edbi h\u1ea1n tr\xean cho m\u1ee9c \u0111\u1ed9 song song c\u1ee7a m\u1ed9t consumer group."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u1ea2nh h\u01b0\u1edfng"),": V\u1edbi h\xe0ng ng\xe0n request/gi\xe2y, Kafka th\u01b0\u1eddng ho\u1ea1t \u0111\u1ed9ng t\u1ed1t n\u1ebfu:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Partitioning Strategy: Key c\u1ee7a tin nh\u1eafn \u0111\u01b0\u1ee3c ch\u1ecdn t\u1ed1t \u0111\u1ec3 ph\xe2n ph\u1ed1i \u0111\u1ec1u d\u1eef li\u1ec7u tr\xean c\xe1c partitions, tr\xe1nh "hot partitions".')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Consumer Parallelism: S\u1ed1 l\u01b0\u1ee3ng consumer instances trong m\u1ed9t group \u0111\u1ee7 l\u1edbn (l\xfd t\u01b0\u1edfng l\xe0 b\u1eb1ng s\u1ed1 partitions) \u0111\u1ec3 x\u1eed l\xfd k\u1ecbp t\u1ed1c \u0111\u1ed9 producer.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"T\xe0i nguy\xean: Brokers c\xf3 \u0111\u1ee7 CPU, RAM (\u0111\u1eb7c bi\u1ec7t cho page cache), v\xe0 Disk I/O."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bottlenecks"),": Disk I/O tr\xean brokers, network bandwidth, CPU c\u1ee7a consumer n\u1ebfu x\u1eed l\xfd qu\xe1 ph\u1ee9c t\u1ea1p, ZooKeeper (trong c\xe1c phi\xean b\u1ea3n c\u0169 h\u01a1n, KRaft thay th\u1ebf ZooKeeper trong c\xe1c phi\xean b\u1ea3n m\u1edbi)."),(0,r.kt)("h4",{id:"rabbitmq"},"RabbitMQ"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Competing Consumers: Th\xeam nhi\u1ec1u instances c\u1ee7a c\xf9ng m\u1ed9t consumer \u0111\u1ecdc t\u1eeb m\u1ed9t queue duy nh\u1ea5t. RabbitMQ s\u1ebd ph\xe2n ph\u1ed1i tin nh\u1eafn (round-robin) cho c\xe1c consumer s\u1eb5n s\xe0ng.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Clustering: K\u1ebft n\u1ed1i nhi\u1ec1u node RabbitMQ th\xe0nh m\u1ed9t c\u1ee5m logic. Tuy nhi\xean, m\u1ed9t queue c\u1ee5 th\u1ec3 v\u1eabn th\u01b0\u1eddng ch\u1ec9 t\u1ed3n t\u1ea1i tr\xean m\u1ed9t node (tr\u1eeb khi d\xf9ng Quorum Queues ho\u1eb7c Mirrored Queues - c\xf3 \u1ea3nh h\u01b0\u1edfng hi\u1ec7u n\u0103ng).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Shovel/Federation: Plugin cho ph\xe9p chuy\u1ec3n tin nh\u1eafn gi\u1eefa c\xe1c broker/cluster kh\xe1c nhau, h\u1eefu \xedch cho c\xe1c k\u1ecbch b\u1ea3n ph\xe2n t\xe1n \u0111\u1ecba l\xfd ho\u1eb7c c\u1ea7n t\xe1ch bi\u1ec7t t\u1ea3i."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u1ea2nh h\u01b0\u1edfng"),": V\u1edbi h\xe0ng ng\xe0n request/gi\xe2y:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Single Queue Bottleneck: N\u1ebfu t\u1ea5t c\u1ea3 tin nh\u1eafn \u0111\u1ed5 v\xe0o m\u1ed9t queue duy nh\u1ea5t v\xe0 x\u1eed l\xfd t\u1ed1n th\u1eddi gian, queue \u0111\xf3 c\xf3 th\u1ec3 tr\u1edf th\xe0nh \u0111i\u1ec3m ngh\u1ebdn ngay c\u1ea3 khi c\xf3 nhi\u1ec1u consumer. T\u1ed1c \u0111\u1ed9 b\u1ecb gi\u1edbi h\u1ea1n b\u1edfi t\u1ed1c \u0111\u1ed9 x\u1eed l\xfd c\u1ee7a consumer nhanh nh\u1ea5t v\xe0 kh\u1ea3 n\u0103ng ph\xe2n ph\u1ed1i c\u1ee7a queue.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"outing Complexity: C\xe1c m\xf4 h\xecnh routing ph\u1ee9c t\u1ea1p c\xf3 th\u1ec3 ti\xeau t\u1ed1n CPU tr\xean broker.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Acknowledgements: Vi\u1ec7c ch\u1edd ack c\xf3 th\u1ec3 l\xe0m ch\u1eadm qu\xe1 tr\xecnh n\u1ebfu consumer x\u1eed l\xfd l\xe2u."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bottlenecks"),": CPU/RAM tr\xean node ch\u1ee9a queue b\u1ecb qu\xe1 t\u1ea3i, network gi\u1eefa c\xe1c node trong cluster, t\u1ed1c \u0111\u1ed9 x\u1eed l\xfd v\xe0 ack c\u1ee7a consumer."),(0,r.kt)("h2",{id:"h\xecnh-dung-c\u1ea5u-tr\xfac-v\xe0-kh\u1ea3-n\u0103ng-m\u1edf-r\u1ed9ng-visualization"},"H\xecnh Dung C\u1ea5u Tr\xfac v\xe0 Kh\u1ea3 N\u0103ng M\u1edf R\u1ed9ng (Visualization)"),(0,r.kt)("h3",{id:"kafka-visualization"},"Kafka Visualization"),(0,r.kt)("p",null,"Kafka ph\xe2n t\xe1n d\u1eef li\u1ec7u c\u1ee7a m\u1ed9t topic qua nhi\u1ec1u partition, v\xe0 c\xe1c partition n\xe0y \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\xean c\xe1c broker kh\xe1c nhau. Consumer group cho ph\xe9p x\u1eed l\xfd song song."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+      +----------+      +----------+\n| Producer | ----\x3e| Broker 1 |<----\x3e| Broker 2 |\n+----------+      |----------|      |----------|\n                  | Topic A: |      | Topic A: |\n                  |   P0     |      |   P1     |  <-- Partitions (P)\n                  |   P2     |      |   P3     |\n                  +----------+      +----------+\n                       ^                 ^\n                       |                 |\n+----------------------+----------------------+\n| Consumer Group G1                           |\n| +------------+        +------------+        |\n| | Consumer 1 |<------ | P0, P2     |        |  <-- Each consumer handles specific partitions\n| +------------+        +------------+        |\n| +------------+        +------------+        |\n| | Consumer 2 |<------ | P1, P3     |        |\n| +------------+        +------------+        |\n+---------------------------------------------+\n")),(0,r.kt)("h4",{id:"khi-scale-out-th\xeam-broker-v\xe0-consumer"},"Khi Scale Out (Th\xeam Broker v\xe0 Consumer):"),(0,r.kt)("p",null,"Ch\xfang ta th\xeam Broker 3, t\u0103ng s\u1ed1 partition cho Topic A (v\xed d\u1ee5: P4, P5), v\xe0 th\xeam Consumer 3 v\xe0o Group G1. Kafka s\u1ebd t\u1ef1 \u0111\u1ed9ng rebalance \u0111\u1ec3 ph\xe2n ph\u1ed1i l\u1ea1i c\xe1c partition cho c\xe1c consumer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+      +----------+      +----------+      +----------+\n| Producer | ----\x3e| Broker 1 |<----\x3e| Broker 2 |<----\x3e| Broker 3 |\n+----------+      |----------|      |----------|      |----------|\n                  | Topic A: |      | Topic A: |      | Topic A: |\n                  |   P0     |      |   P1     |      |   P4     | <-- New Partitions\n                  |   P2     |      |   P3     |      |   P5     |\n                  +----------+      +----------+      +----------+\n                       ^                 ^                 ^\n                       |                 |                 |\n+----------------------+-----------------+-----------------+--+\n| Consumer Group G1 (Rebalanced)                          |\n| +------------+        +------------+                    |\n| | Consumer 1 |<------ | P0, P2     |                    | <-- Consumers now handle potentially different partitions\n| +------------+        +------------+                    |\n| +------------+        +------------+                    |\n| | Consumer 2 |<------ | P1, P4     |                    |\n| +------------+        +------------+                    |\n| +------------+        +------------+                    |\n| | Consumer 3 |<------ | P3, P5     |                    | <-- New Consumer\n| +------------+        +------------+                    |\n+---------------------------------------------------------+\n")),(0,r.kt)("h3",{id:"rabbitmq-visualization"},"RabbitMQ Visualization"),(0,r.kt)("p",null,"RabbitMQ t\u1eadp trung v\xe0o \u0111\u1ecbnh tuy\u1ebfn linh ho\u1ea1t qua exchanges v\xe0 x\u1eed l\xfd song song tr\xean c\xf9ng m\u1ed9t queue b\u1eb1ng competing consumers."),(0,r.kt)("h4",{id:"c\u1ea5u-tr\xfac-c\u01a1-b\u1ea3n-direct-exchange"},"C\u1ea5u tr\xfac c\u01a1 b\u1ea3n (Direct Exchange):"),(0,r.kt)("p",null,"Producer g\u1eedi tin nh\u1eafn \u0111\u1ebfn exchange, exchange \u0111\u1ecbnh tuy\u1ebfn \u0111\u1ebfn queue d\u1ef1a tr\xean routing key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------+       +---------------------+       +-----------------+\n| Producer | ----\x3e | Exchange (Direct)   | ----\x3e | Queue A         | <-- Binding Key = "keyA"\n+----------+       | Routing Key: "keyA" |       | (Msg for keyA)  |\n                   +---------------------+       +-----------------+\n                                                       |\n                                                       V\n                                                 +------------+\n                                                 | Consumer 1 |\n                                                 +------------+\n\n')),(0,r.kt)("h4",{id:"c\u1ea5u-tr\xfac-c\u01a1-b\u1ea3n-fanout-exchange"},"C\u1ea5u tr\xfac c\u01a1 b\u1ea3n (Fanout Exchange):"),(0,r.kt)("p",null,"C\xe1ch ph\u1ed5 bi\u1ebfn nh\u1ea5t \u0111\u1ec3 scale RabbitMQ l\xe0 th\xeam nhi\u1ec1u consumer instance c\xf9ng \u0111\u1ecdc t\u1eeb m\u1ed9t queue. RabbitMQ s\u1ebd ph\xe2n ph\u1ed1i tin nh\u1eafn cho c\xe1c consumer r\u1ea3nh r\u1ed7i (round-robin ho\u1eb7c d\u1ef1a tr\xean prefetch)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------+       +---------------------+       +-----------------+\n| Producer | ----\x3e | Exchange (Direct)   | ----\x3e | Queue D         |\n+----------+       | Routing Key: "task" |       | (Task Queue)    |\n                   +---------------------+       +-----------------+\n                                                       |\n                                     -------------------\n                                     |        |        |\n                                     V        V        V\n                               +------------++------------++------------+\n                               | Consumer 1 || Consumer 2 || Consumer 3 | <-- Multiple consumers processing tasks from Queue D\n                               +------------++------------++------------+\n')),(0,r.kt)("h2",{id:"k\u1ef9-thu\u1eadt-t\u1ed1i-\u01b0u-h\xf3a"},"K\u1ef9 Thu\u1eadt T\u1ed1i \u01afu H\xf3a"),(0,r.kt)("h3",{id:"kafka-1"},"Kafka"),(0,r.kt)("h4",{id:"producers"},"Producers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"batch.size & linger.ms: T\u0103ng k\xedch th\u01b0\u1edbc batch v\xe0 th\u1eddi gian ch\u1edd \u0111\u1ec3 g\u1eedi nhi\u1ec1u tin nh\u1eafn h\u01a1n trong m\u1ed9t request, gi\u1ea3m overhead m\u1ea1ng.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"compression.type: S\u1eed d\u1ee5ng n\xe9n (snappy, gzip, lz4, zstd) \u0111\u1ec3 gi\u1ea3m k\xedch th\u01b0\u1edbc tin nh\u1eafn, ti\u1ebft ki\u1ec7m b\u0103ng th\xf4ng v\xe0 dung l\u01b0\u1ee3ng l\u01b0u tr\u1eef.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"acks: C\u1ea5u h\xecnh m\u1ee9c \u0111\u1ed9 \u0111\u1ea3m b\u1ea3o (acks=0, acks=1, acks=all). acks=1 l\xe0 c\xe2n b\u1eb1ng t\u1ed1t gi\u1eefa \u0111\u1ed9 b\u1ec1n v\xe0 hi\u1ec7u n\u0103ng."))),(0,r.kt)("h4",{id:"brokers"},"Brokers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Tuning JVM heap size.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u0110\u1ea3m b\u1ea3o \u0111\u1ee7 RAM cho page cache c\u1ee7a OS (Kafka t\u1eadn d\u1ee5ng m\u1ea1nh m\u1ebd page cache).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"S\u1eed d\u1ee5ng \u1ed5 c\u1ee9ng nhanh (SSD).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"T\u0103ng s\u1ed1 network/IO threads n\u1ebfu c\u1ea7n."))),(0,r.kt)("h4",{id:"consumers"},"Consumers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"fetch.min.bytes & fetch.max.wait.ms: \u0110i\u1ec1u ch\u1ec9nh l\u01b0\u1ee3ng d\u1eef li\u1ec7u t\u1ed1i thi\u1ec3u consumer mu\u1ed1n nh\u1eadn ho\u1eb7c th\u1eddi gian ch\u1edd t\u1ed1i \u0111a, t\u01b0\u01a1ng t\u1ef1 batching \u1edf producer.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"X\u1eed l\xfd song song trong consumer instance (n\u1ebfu logic cho ph\xe9p).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Qu\u1ea3n l\xfd offset c\u1ea9n th\u1eadn (commit \u0111\u1ecbnh k\u1ef3, tr\xe1nh commit qu\xe1 th\u01b0\u1eddng xuy\xean)."))),(0,r.kt)("h3",{id:"rabbitmq-1"},"RabbitMQ"),(0,r.kt)("h4",{id:"consumers-1"},"Consumers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Prefetch Count (QoS): X\xe1c \u0111\u1ecbnh s\u1ed1 l\u01b0\u1ee3ng tin nh\u1eafn t\u1ed1i \u0111a m\xe0 broker c\xf3 th\u1ec3 g\u1eedi cho consumer m\xe0 ch\u01b0a nh\u1eadn \u0111\u01b0\u1ee3c ack. Gi\xe1 tr\u1ecb qu\xe1 cao c\xf3 th\u1ec3 l\xe0m consumer b\u1ecb qu\xe1 t\u1ea3i, gi\xe1 tr\u1ecb qu\xe1 th\u1ea5p l\xe0m gi\u1ea3m th\xf4ng l\u01b0\u1ee3ng. C\u1ea7n tuning c\u1ea9n th\u1eadn.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"S\u1eed d\u1ee5ng manual acknowledgements m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3."))),(0,r.kt)("h4",{id:"queues"},"Queues:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Persistent vs. Transient Messages/Queues: Tin nh\u1eafn/queue b\u1ec1n v\u1eefng (persistent) \u0111\u01b0\u1ee3c ghi xu\u1ed1ng \u0111\u0129a, \u0111\u1ea3m b\u1ea3o kh\xf4ng m\u1ea5t khi broker kh\u1edfi \u0111\u1ed9ng l\u1ea1i nh\u01b0ng ch\u1eadm h\u01a1n. Transient nhanh h\u01a1n nh\u01b0ng d\u1eef li\u1ec7u m\u1ea5t khi restart. Ch\u1ecdn t\xf9y theo y\xeau c\u1ea7u \u0111\u1ed9 b\u1ec1n.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Lazy Queues: Gi\u1eef tin nh\u1eafn tr\xean \u0111\u0129a nhi\u1ec1u h\u01a1n, gi\u1ea3m s\u1eed d\u1ee5ng RAM, h\u1eefu \xedch cho c\xe1c queue r\u1ea5t d\xe0i nh\u01b0ng c\xf3 th\u1ec3 t\u0103ng \u0111\u1ed9 tr\u1ec5.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Quorum Queues: Cung c\u1ea5p \u0111\u1ed9 b\u1ec1n v\xe0 t\xednh s\u1eb5n s\xe0ng cao h\u01a1n so v\u1edbi mirrored queues c\u1ed5 \u0111i\u1ec3n, l\xe0 l\u1ef1a ch\u1ecdn khuy\u1ebfn ngh\u1ecb cho c\xe1c phi\xean b\u1ea3n RabbitMQ m\u1edbi."))),(0,r.kt)("h4",{id:"producers-1"},"Producers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"S\u1eed d\u1ee5ng persistent messages n\u1ebfu c\u1ea7n \u0111\u1ed9 b\u1ec1n.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Connection/Channel Pooling: T\xe1i s\u1eed d\u1ee5ng k\u1ebft n\u1ed1i v\xe0 channel \u0111\u1ec3 gi\u1ea3m overhead thi\u1ebft l\u1eadp."))),(0,r.kt)("h4",{id:"broker"},"Broker:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Tuning Erlang VM (s\u1ed1 l\u01b0\u1ee3ng scheduler threads).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Gi\xe1m s\xe1t memory/disk alarms.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"S\u1eed d\u1ee5ng HiPE (kh\xf4ng c\xf2n \u0111\u01b0\u1ee3c khuy\u1ebfn ngh\u1ecb nhi\u1ec1u nh\u01b0 tr\u01b0\u1edbc)."))),(0,r.kt)("h2",{id:"use-cases-\u0111i\u1ec3n-h\xecnh"},"Use Cases \u0110i\u1ec3n H\xecnh"),(0,r.kt)("h4",{id:"ch\u1ecdn-kafka-khi"},"Ch\u1ecdn Kafka khi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n th\xf4ng l\u01b0\u1ee3ng c\u1ef1c cao (log aggregation, IoT data streams, metrics).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n l\u01b0u tr\u1eef d\u1eef li\u1ec7u l\xe2u d\xe0i v\xe0 c\xf3 kh\u1ea3 n\u0103ng \u0111\u1ecdc l\u1ea1i (event sourcing, stream processing).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Th\u1ee9 t\u1ef1 tin nh\u1eafn trong m\u1ed9t ng\u1eef c\u1ea3nh (partition) l\xe0 quan tr\u1ecdng.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"X\xe2y d\u1ef1ng c\xe1c pipeline d\u1eef li\u1ec7u real-time."))),(0,r.kt)("h4",{id:"ch\u1ecdn-rabbitmq-khi"},"Ch\u1ecdn RabbitMQ khi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n c\xe1c m\xf4 h\xecnh \u0111\u1ecbnh tuy\u1ebfn ph\u1ee9c t\u1ea1p.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n t\xedch h\u1ee3p v\u1edbi c\xe1c h\u1ec7 th\u1ed1ng c\u0169 ho\u1eb7c nhi\u1ec1u giao th\u1ee9c (AMQP, MQTT, STOMP).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u01afu ti\xean \u0111\u1ed9 tr\u1ec5 th\u1ea5p cho c\xe1c t\xe1c v\u1ee5 nh\u1ecf.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n tri\u1ec3n khai m\xf4 h\xecnh task queue (worker queues).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C\u1ea7n m\xf4 h\xecnh request/response \u0111\u01a1n gi\u1ea3n.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u0110\u1ea3m b\u1ea3o g\u1eedi tin nh\u1eafn \u1edf m\u1ee9c \u0111\u1ed9 per-message l\xe0 quan tr\u1ecdng."))),(0,r.kt)("h2",{id:"m\xf4-h\xecnh-requestresponse-trong-rabbitmq"},"M\xf4 H\xecnh Request/Response trong RabbitMQ"),(0,r.kt)("p",null,"RabbitMQ h\u1ed7 tr\u1ee3 t\u1ed1t m\xf4 h\xecnh RPC (Remote Procedure Call) hay Request/Response. C\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9ng nh\u01b0 sau:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Client (Requester):")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"T\u1ea1o m\u1ed9t exclusive callback queue (queue t\u1ea1m th\u1eddi, ch\u1ec9 client n\xe0y \u0111\u1ecdc \u0111\u01b0\u1ee3c v\xe0 t\u1ef1 \u0111\u1ed9ng x\xf3a khi client disconnect).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"G\u1eedi tin nh\u1eafn request \u0111\u1ebfn m\u1ed9t RPC queue c\u1ed1 \u0111\u1ecbnh m\xe0 Server \u0111ang l\u1eafng nghe.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Trong tin nh\u1eafn request, \u0111\u1eb7t hai thu\u1ed9c t\xednh quan tr\u1ecdng trong properties:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"reply_to: T\xean c\u1ee7a callback queue v\u1eeba t\u1ea1o.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"correlation_id: M\u1ed9t gi\xe1 tr\u1ecb duy nh\u1ea5t \u0111\u1ec3 \u0111\u1ecbnh danh request n\xe0y (v\xed d\u1ee5: UUID).")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"B\u1eaft \u0111\u1ea7u l\u1eafng nghe tr\xean callback queue c\u1ee7a m\xecnh."))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Server (Replier):")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"L\u1eafng nghe tin nh\u1eafn tr\xean RPC queue c\u1ed1 \u0111\u1ecbnh.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Khi nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn request:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"X\u1eed l\xfd request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"L\u1ea5y reply_to v\xe0 correlation_id t\u1eeb properties c\u1ee7a tin nh\u1eafn request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'G\u1eedi tin nh\u1eafn response ch\u1ee9a k\u1ebft qu\u1ea3 x\u1eed l\xfd \u0111\u1ebfn exchange m\u1eb7c \u0111\u1ecbnh ("") v\u1edbi routing_key ch\xednh l\xe0 gi\xe1 tr\u1ecb c\u1ee7a reply_to (t\xean callback queue c\u1ee7a client).')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u0110\u1eb7t correlation_id trong tin nh\u1eafn response gi\u1ed1ng h\u1ec7t correlation_id c\u1ee7a tin nh\u1eafn request."))))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Client (Requester):")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn response tr\xean callback queue.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Ki\u1ec3m tra correlation_id c\u1ee7a response \u0111\u1ec3 kh\u1edbp v\u1edbi request t\u01b0\u01a1ng \u1ee9ng \u0111\xe3 g\u1eedi.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"X\u1eed l\xfd k\u1ebft qu\u1ea3 response."))),(0,r.kt)("p",null,"C\u01a1 ch\u1ebf n\xe0y cho ph\xe9p client g\u1eedi nhi\u1ec1u request m\xe0 kh\xf4ng c\u1ea7n \u0111\u1ee3i response tu\u1ea7n t\u1ef1, v\xec correlation_id gi\xfap kh\u1edbp \u0111\xfang response v\u1edbi request."))}m.isMDXComponent=!0}}]);